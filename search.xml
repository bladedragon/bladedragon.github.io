<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>给Spark添加自定义的metric信息</title>
      <link href="/2022/12/11/spark-metric/"/>
      <url>/2022/12/11/spark-metric/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近因为一些工作场景需要获取spark 任务的更多信息，所以要修改spark 源码添加新的metric。顺便串一下整个metric体系，形成整体认知。</p><p>以下讨论基于spark3.1.2，让我们开始吧</p><a id="more"></a><h3 id="ListenerBus-机制"><a href="#ListenerBus-机制" class="headerlink" title="ListenerBus 机制"></a>ListenerBus 机制</h3><p>在动手实操之前，首先我们需要了解spark的listener机制<br>spark中存在多个模块的协同操作，通过考虑到实时性和结构的解耦，spark引入了事件总线的机制，通过注册和监听事件的方式，可以spark各种事件的触发点执行不同的操作。</p><p>在spark中可以指定某个操作的执行作为事件，并事先注册在事件总线中。当该操作执行后发送事件，事件总线就会接受到该事件并异步地将该事件传递给所有监听该事件的监听器，并执行对应方法。这实际上也是典型的生产-消费者模式。我们需要人为的生产一条事件，然后便会有消费者去消费这个事件。最经典的用法就是在某个任务执行前后监听该任务，并近实时获取该任务的开始结束状态，从而获取该任务执行过程中的各种统计信息，也就是我们下面会讲到的metric。</p><br><p>在spark中如果想要自行添加事件监听也非常简单，不过对代码有一些侵入性。这里以task开始执行的为例。<br>首先我们需要注册事件到listenerBus，先创建一个case class继承SparkListenerEvent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">case</span> class <span class="title">SparkListenerTaskStart</span><span class="params">(stageId: Int, stageAttemptId: Int, taskInfo: TaskInfo)</span></span></span><br><span class="line"><span class="function">  extends SparkListenerEvent</span></span><br></pre></td></tr></table></figure><p>SparkListenerEvent的具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="meta">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = <span class="string">"Event"</span>)</span><br><span class="line">trait SparkListenerEvent &#123;</span><br><span class="line">  <span class="comment">/* Whether output this event to the event log */</span></span><br><span class="line">  <span class="keyword">protected</span>[spark] def logEvent: Boolean = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SparkListenerEvent 会被SparkListener接受，并回调指定的方法，具体看SparkListener.scala中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkListener</span> <span class="keyword">extends</span> <span class="title">SparkListenerInterface</span> </span>&#123;</span><br><span class="line">  <span class="function">override def <span class="title">onTaskStart</span><span class="params">(taskStart: SparkListenerTaskStart)</span>: Unit </span>= &#123; &#125;</span><br><span class="line">  <span class="comment">// Some code here ...</span></span><br><span class="line">  <span class="function">override def <span class="title">onOtherEvent</span><span class="params">(event: SparkListenerEvent)</span>: Unit </span>= &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们可以得知两点，一是spark内置了一些event的回调方法，但是如果我们自定义event，最终会走到onOtherEvent方法中，所以实际上只需要继承onOtherEvent方法，并在其中进行模式匹配，就可以监听我们自定义的事件，从而减少了对spark core代码的侵入。 二是我们可以继承SparkListener来重载方法，从而加入我们自己的监听逻辑.</p><p>至于SparkListener 是如何实现监听的，我们就需要来看ListenerBus的具体实现，在ListenerBus.scala中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] trait ListenerBus[L &lt;: AnyRef, E] extends Logging &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Marked `private[spark]` for access in tests.</span></span><br><span class="line">  <span class="keyword">private</span>[spark] def listeners = listenersPlusTimers.asScala.map(_._1).asJava</span><br><span class="line"></span><br><span class="line"><span class="comment">//Some code here ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Post the event to all registered listeners. The `postToAll` caller should guarantee calling</span></span><br><span class="line"><span class="comment">   * `postToAll` in the same thread for all events.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function">def <span class="title">postToAll</span><span class="params">(event: E)</span>: Unit </span>= &#123;</span><br><span class="line">    <span class="comment">// JavaConverters can create a JIterableWrapper if we use asScala.</span></span><br><span class="line">    <span class="comment">// However, this method will be called frequently. To avoid the wrapper cost, here we use</span></span><br><span class="line">    <span class="comment">// Java Iterator directly.</span></span><br><span class="line">    val iter = listenersPlusTimers.iterator</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext) &#123;</span><br><span class="line">      val listenerAndMaybeTimer = iter.next()</span><br><span class="line">      val listener = listenerAndMaybeTimer._1</span><br><span class="line">      val maybeTimer = listenerAndMaybeTimer._2</span><br><span class="line">      val maybeTimerContext = <span class="keyword">if</span> (maybeTimer.isDefined) &#123;</span><br><span class="line">        maybeTimer.get.time()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      lazy val listenerName = Utils.getFormattedClassName(listener)</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        doPostEvent(listener, event)</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">          <span class="comment">// We want to throw the InterruptedException right away so we can associate the interrupt</span></span><br><span class="line">          <span class="comment">// with this listener, as opposed to waiting for a queue.take() etc. to detect it.</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ie: InterruptedException =&gt;</span><br><span class="line">          logError(s<span class="string">"Interrupted while posting to $&#123;listenerName&#125;. Removing that listener."</span>, ie)</span><br><span class="line">          removeListenerOnError(listener)</span><br><span class="line">        <span class="function"><span class="keyword">case</span> <span class="title">NonFatal</span><span class="params">(e)</span> <span class="keyword">if</span> !<span class="title">isIgnorableException</span><span class="params">(e)</span> </span>=&gt;</span><br><span class="line">          logError(s<span class="string">"Listener $&#123;listenerName&#125; threw an exception"</span>, e)</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maybeTimerContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">          val elapsed = maybeTimerContext.stop()</span><br><span class="line">          <span class="keyword">if</span> (logSlowEventEnabled &amp;&amp; elapsed &gt; logSlowEventThreshold) &#123;</span><br><span class="line">            logInfo(s<span class="string">"Process of event $&#123;redactEvent(event)&#125; by listener $&#123;listenerName&#125; took "</span> +</span><br><span class="line">              s<span class="string">"$&#123;elapsed / 1000000000d&#125;s."</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码可以简单解释一下，在listenerBus中实际用一个list保存所有的监听器Listener，并用一个定时器去定时调度，执行监听方法。这里只是基础实现，实际上我们常用的SparkListenerBus 具体由AsyncEventQueue实现，在实际发送事件时采用异步的方式，不会引起阻塞。</p><br><p>了解了ListenerBus的具体实现，我们就可以更自如的使用它。在我们具体的实现类中，只需要传入listener Bus的实例，如下面dagScheduler.scala的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">class</span> <span class="title">DAGScheduler</span>(</span></span><br><span class="line">    private[scheduler] val sc: SparkContext,</span><br><span class="line">    <span class="keyword">private</span>[scheduler] val taskScheduler: TaskScheduler,</span><br><span class="line">    listenerBus: LiveListenerBus,</span><br><span class="line">    mapOutputTracker: MapOutputTrackerMaster,</span><br><span class="line">    blockManagerMaster: BlockManagerMaster,</span><br><span class="line">    env: SparkEnv,</span><br><span class="line">    clock: Clock = <span class="keyword">new</span> SystemClock())</span><br><span class="line">  extends Logging &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some code here ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要监听的行为后面发送事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[scheduler] <span class="function">def <span class="title">handleBeginEvent</span><span class="params">(task: Task[_], taskInfo: TaskInfo)</span>: Unit </span>= &#123;</span><br><span class="line">    <span class="comment">// Note that there is a chance that this task is launched after the stage is cancelled.</span></span><br><span class="line">    <span class="comment">// In that case, we wouldn't have the stage anymore in stageIdToStage.</span></span><br><span class="line">    val stageAttemptId =</span><br><span class="line">      stageIdToStage.get(task.stageId).map(_.latestInfo.attemptNumber).getOrElse(-<span class="number">1</span>)</span><br><span class="line">    listenerBus.post(SparkListenerTaskStart(task.stageId, stageAttemptId, taskInfo))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样，在执行到任务开始的逻辑后，spark就会自动监听并发送事件，我们的listener接受到事件后，就会执行onTaskStart的方法。</p><h3 id="Metric体系"><a href="#Metric体系" class="headerlink" title="Metric体系"></a>Metric体系</h3><p>spark 引用了一个第三方的<a href="http://metrics.codahale.com/" target="_blank" rel="noopener">metric 系统</a> 其基本逻辑也就是从注册一些指标，用kv存储的方式统计这些指标，并实现对应的输出<br>主要概念有三个</p><ul><li><p>source metric的来源，例如JvmSource</p></li><li><p>sink metric的输出， spark支持多种输出方式，例如CSVSink</p></li><li><p>MetricRegistry，具体存储metric的类，由第三方库实现</p><p>我们今天暂时不讲metric如果具体实现，而是关注SparkUI如何展示这些metric。以ExecutorMetric为例。<br>进入ExecutorMetric.scala, 我们可以看到实际上executorMetric实际是一层封装，具体的metric信息在ExecutorMetricType.scala中：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ExecutorMetrics private[spark] extends Serializable &#123;</span><br><span class="line">  <span class="comment">// Metrics are indexed by ExecutorMetricType.metricToOffset</span></span><br><span class="line">  <span class="keyword">private</span> val metrics = <span class="keyword">new</span> Array[Long](ExecutorMetricType.numMetrics)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the value for the specified metric. */</span></span><br><span class="line">  <span class="function">def <span class="title">getMetricValue</span><span class="params">(metricName: String)</span>: Long </span>= &#123;</span><br><span class="line">    metrics(ExecutorMetricType.metricToOffset(metricName))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Some code here ..</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] object ExecutorMetricType &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// List of all executor metric getters</span></span><br><span class="line">  val metricGetters = IndexedSeq(</span><br><span class="line">    JVMHeapMemory,</span><br><span class="line">    JVMOffHeapMemory,</span><br><span class="line">    OnHeapExecutionMemory,</span><br><span class="line">    OffHeapExecutionMemory,</span><br><span class="line">    OnHeapStorageMemory,</span><br><span class="line">    OffHeapStorageMemory,</span><br><span class="line">    OnHeapUnifiedMemory,</span><br><span class="line">    OffHeapUnifiedMemory,</span><br><span class="line">    DirectPoolMemory,</span><br><span class="line">    MappedPoolMemory,</span><br><span class="line">    ProcessTreeMetrics,</span><br><span class="line">    GarbageCollectionMetrics</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  val (metricToOffset, numMetrics) = &#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfMetrics = <span class="number">0</span></span><br><span class="line">    val definedMetricsAndOffset = mutable.LinkedHashMap.empty[String, Int]</span><br><span class="line">    metricGetters.foreach &#123; m =&gt;</span><br><span class="line">      (<span class="number">0</span> until m.names.length).foreach &#123; idx =&gt;</span><br><span class="line">        definedMetricsAndOffset += (m.names(idx) -&gt; (idx + numberOfMetrics))</span><br><span class="line">      &#125;</span><br><span class="line">      numberOfMetrics += m.names.length</span><br><span class="line">    &#125;</span><br><span class="line">    (definedMetricsAndOffset, numberOfMetrics)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不看这些metric的实际统计方法了，只关注如何保存这些metric。实际上在ExecutorMetricType的类中很多都是调用JMX实现的统计。</p><p>这些metric是如何展示的呢？我们首先来看看api.scala，这里保存了executorMetric:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class ExecutorStageSummary private[spark](</span><br><span class="line">    val taskTime : Long,</span><br><span class="line">    val failedTasks : Int,</span><br><span class="line">    val succeededTasks : Int,</span><br><span class="line">    val killedTasks : Int,</span><br><span class="line">    val inputBytes : Long,</span><br><span class="line">    val inputRecords : Long,</span><br><span class="line">    val outputBytes : Long,</span><br><span class="line">    val outputRecords : Long,</span><br><span class="line">    val shuffleRead : Long,</span><br><span class="line">    val shuffleReadRecords : Long,</span><br><span class="line">    val shuffleWrite : Long,</span><br><span class="line">    val shuffleWriteRecords : Long,</span><br><span class="line">    val memoryBytesSpilled : Long,</span><br><span class="line">    val diskBytesSpilled : Long,</span><br><span class="line">    <span class="meta">@deprecated</span>(<span class="string">"use isExcludedForStage instead"</span>, <span class="string">"3.1.0"</span>)</span><br><span class="line">    val isBlacklistedForStage: Boolean,</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = classOf[ExecutorMetricsJsonSerializer])</span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = classOf[ExecutorMetricsJsonDeserializer])</span><br><span class="line">    val peakMemoryMetrics: Option[ExecutorMetrics],</span><br><span class="line">    val isExcludedForStage: Boolean)</span><br></pre></td></tr></table></figure><p>这里随便挑了一个类，实际上还有别的类里保存了executorMetric,我们可以发现这里的metric信息排列其实和sparkUI上的展示如出一辙，可以联想到，在前端展示的数据格式就是这种。</p><p>再向上追溯，我们发现它被封装成LiveEntity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> class <span class="title">LiveExecutorStageSummary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    stageId: Int,</span></span></span><br><span class="line"><span class="function"><span class="params">    attemptId: Int,</span></span></span><br><span class="line"><span class="function"><span class="params">    executorId: String)</span> extends LiveEntity </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> LiveEntityHelpers._</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> taskTime = <span class="number">0L</span></span><br><span class="line">  <span class="keyword">var</span> succeededTasks = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> failedTasks = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> killedTasks = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> isExcluded = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> metrics = createMetrics(<span class="keyword">default</span> = <span class="number">0L</span>)</span><br><span class="line"></span><br><span class="line">  val peakExecutorMetrics = <span class="keyword">new</span> ExecutorMetrics()</span><br><span class="line"></span><br><span class="line">  <span class="function">override <span class="keyword">protected</span> def <span class="title">doUpdate</span><span class="params">()</span>: Any </span>= &#123;</span><br><span class="line">    val info = <span class="keyword">new</span> v1.ExecutorStageSummary(</span><br><span class="line">      taskTime,</span><br><span class="line">      failedTasks,</span><br><span class="line">      succeededTasks,</span><br><span class="line">      killedTasks,</span><br><span class="line">      metrics.inputMetrics.bytesRead,</span><br><span class="line">      metrics.inputMetrics.recordsRead,</span><br><span class="line">      metrics.outputMetrics.bytesWritten,</span><br><span class="line">      metrics.outputMetrics.recordsWritten,</span><br><span class="line">      metrics.shuffleReadMetrics.remoteBytesRead + metrics.shuffleReadMetrics.localBytesRead,</span><br><span class="line">      metrics.shuffleReadMetrics.recordsRead,</span><br><span class="line">      metrics.shuffleWriteMetrics.bytesWritten,</span><br><span class="line">      metrics.shuffleWriteMetrics.recordsWritten,</span><br><span class="line">      metrics.memoryBytesSpilled,</span><br><span class="line">      metrics.diskBytesSpilled,</span><br><span class="line">      isExcluded,</span><br><span class="line">      Some(peakExecutorMetrics).filter(_.isSet),</span><br><span class="line">      isExcluded)</span><br><span class="line">    <span class="keyword">new</span> ExecutorStageSummaryWrapper(stageId, attemptId, executorId, info)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里暴露它的更新方法doUpdate()。 再向上追溯我们可以看到再LiveEntity.scala中提供了对象的保存方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LiveEntity.scala </span></span><br><span class="line"><span class="function">def <span class="title">write</span><span class="params">(store: ElementTrackingStore, now: Long, checkTriggers: Boolean = <span class="keyword">false</span>)</span>: Unit </span>= &#123;</span><br><span class="line">    <span class="comment">// Always check triggers on the first write, since adding an element to the store may</span></span><br><span class="line">    <span class="comment">// cause the maximum count for the element type to be exceeded.</span></span><br><span class="line">    store.write(doUpdate(), checkTriggers || lastWriteTime == -<span class="number">1L</span>)</span><br><span class="line">    lastWriteTime = now</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里我们可以得到，metric的实际信息会最终保存到一个kv 存储中供前端调用。而这个实体类是如何更新的呢？跳转到该方法的引用位置，我们发现实际上该方法是被appStatusListener的监听方法调用。基于上一部分的探索，由此我们可以得出结论，metric的更新就是通过SparkListener的监听机制更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private[spark] class AppStatusListener(</span><br><span class="line">    kvstore: ElementTrackingStore,</span><br><span class="line">    conf: SparkConf,</span><br><span class="line">    live: Boolean,</span><br><span class="line">    appStatusSource: Option[AppStatusSource] = None,</span><br><span class="line">    lastUpdateTime: Option[Long] = None) extends SparkListener with Logging &#123;</span><br><span class="line"></span><br><span class="line">    // Some code here...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在sparkUI上添加自定义的executor-metric"><a href="#在sparkUI上添加自定义的executor-metric" class="headerlink" title="在sparkUI上添加自定义的executor metric"></a>在sparkUI上添加自定义的executor metric</h3><p>有了上面的知识储备，我们总算能在spark UI 中自由加入自己的metric。由于前端数据的交互都是js实现，我们只需要定位到对应的js文件就能找到数据的展示位置。<br>我们以executorMetric为例，首先找到 executor对应的page，在executorspage.js中：</p><p>我们找到如下ajax函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(createTemplateURI(appId, "executorspage"), function (template) &#123; ...&#125;);</span><br></pre></td></tr></table></figure><p>实际的数据展示就是以下面的方式展示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">              data: <span class="function"><span class="keyword">function</span> (<span class="params">row, type</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> peakMemoryMetrics = row.peakMemoryMetrics;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> peakMemoryMetrics !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (type !== <span class="string">'display'</span>)</span><br><span class="line">                    <span class="keyword">return</span> peakMemoryMetrics.DirectPoolMemory;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> (formatBytes(peakMemoryMetrics.DirectPoolMemory, type) + <span class="string">' / '</span> +</span><br><span class="line">                      formatBytes(peakMemoryMetrics.MappedPoolMemory, type));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (type !== <span class="string">'display'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'0.0 B / 0.0 B'</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>在前端展示则是在以下html元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in executorspage-template.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"Peak direct byte buffer / memory-mapped buffer pool memory used by JVM. This refers to BufferPoolMXBean with form 'java.nio:type=BufferPool,name=direct' and 'java.nio:type=BufferPool,name=mapped'."</span>&gt;</span></span><br><span class="line">              Peak Pool Memory Direct / Mapped</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  可以看到这里直接 从后端数据中获取peakMemoryMetrics这个对象，那么数据返回格式什么呢？我们查询前端请求函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// executorspage.js</span></span><br><span class="line"> <span class="keyword">var</span> endPoint = createRESTEndPointForExecutorsPage(appId);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// utils.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRESTEndPointForExecutorsPage</span>(<span class="params">appId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> words = getBaseURI().split(<span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">var</span> ind = words.indexOf(<span class="string">"proxy"</span>);</span><br><span class="line"><span class="keyword">var</span> newBaseURI;</span><br><span class="line"><span class="keyword">if</span> (ind &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  appId = words[ind + <span class="number">1</span>];</span><br><span class="line">  newBaseURI = words.slice(<span class="number">0</span>, ind + <span class="number">2</span>).join(<span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">return</span> newBaseURI + <span class="string">"/api/v1/applications/"</span> + appId + <span class="string">"/allexecutors"</span>;</span><br><span class="line">&#125;</span><br><span class="line">ind = words.indexOf(<span class="string">"history"</span>);</span><br><span class="line"><span class="keyword">if</span> (ind &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  appId = words[ind + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> attemptId = words[ind + <span class="number">2</span>];</span><br><span class="line">  newBaseURI = words.slice(<span class="number">0</span>, ind).join(<span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(attemptId)) &#123;</span><br><span class="line">    <span class="keyword">return</span> newBaseURI + <span class="string">"/api/v1/applications/"</span> + appId + <span class="string">"/allexecutors"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> newBaseURI + <span class="string">"/api/v1/applications/"</span> + appId + <span class="string">"/"</span> + attemptId + <span class="string">"/allexecutors"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uiRoot + <span class="string">"/api/v1/applications/"</span> + appId + <span class="string">"/allexecutors"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现请求的是“/allexecutors”，于是我们查找后端对应处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OneApplicationResource.scala</span></span><br><span class="line">  <span class="meta">@GET</span></span><br><span class="line">  <span class="meta">@Path</span>(<span class="string">"allexecutors"</span>)</span><br><span class="line">  <span class="function">def <span class="title">allExecutorList</span><span class="params">()</span>: Seq[ExecutorSummary] </span>= withUI(_.store.executorList(<span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>发现返回的格式就是我们之前查看到的ExecutorSummary类。至此，我们已经完成掌握了metric的前端展示逻辑。</p><br>那么我们如何添加自定义的metric信息呢？假设我们需要在executor页面上新增一个metric。<p>首先第一步：在api.scala 中的executorSummary类添加我们自己的metric对象</p><p>第二步：在appStausListener.scala 中 在我们想要更新metric的事件的监听逻辑加入我们自己的metric更新逻辑</p><p>第三步：在executorspage.js 中的data展示数组中添加一个对象，加入我们自己的数据展示逻辑</p><p>第四步：不要忘记在executorspage-template.html中heml元素来展示我们的数据。注意数据展示的顺序是数据的顺序，一定要和js中数组的数据保存顺序一致。</p><br><p>由此，我们就实现了在SparkUI中添加我们的自定义metric信息了。你学废了吗？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些感想</title>
      <link href="/2022/12/09/diary-2022-12-09/"/>
      <url>/2022/12/09/diary-2022-12-09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天理发的时候看到两个初高中生，过来问理发师傅：两个十块够不够？理发的价格是20元一位，理发师很自然的笑了笑，摇了摇头，我也心里暗暗吐槽，现在什么时代，剪头发还有十元的。结果一位女生显得很疑惑，又问：一位多少钱？理发师答：二十。结果女生显得更加疑惑了，说：一位二十，两个十块怎么不行？我当时就纳闷了，这女生的算数怎么学的？一位二十，两位十元，四位难不成5元？真是有够好笑的。理发师显然也觉得好笑，但因为专注着理发，就假装不理睬女生的疑惑。只见两位女生又是困惑又是不解，相互嘟囔了几句：明明二十一位，两个十块怎么不行？过了许久才恍然大悟，对理发师说：就她剪，我不剪。理发师也就瞬间明白了她们的意思。但是我依然还蒙在鼓里：一个人剪，也要二十一位啊？又怎么能分成两次十块，难不成还能今天剪一半，明天剪一半？</p><p>想了好久，突然看到其中一位女生掏出一张十元的纸钞，塞进自动取号机，我这才恍然大悟：原来她们说的两个十块，指的是两张十元纸钞。这样我觉得又是好笑又是有趣，好笑在于自己居然被这样的文字游戏给绊住，半天没转过弯，有趣的是，我竟然从来没有想过有十元纸钞这种可能，仿佛二十元在我心中就是不可拆分的，时光流转，很多以前常见的事物慢慢变得不再常见，我们是否还会对他们保有记忆？换一个角度，我们专注于数字时代的产物，对虚拟世界的概念有着很强的接受能力，但同时我们也可能在慢慢不习惯现实世界中的种种操作，例如用纸币付钱，用笔写日记，渐渐的，我们变得只会依赖电子产品和虚拟软件，却不擅长现实中的种种人情世故，这是否可以称得上是一种赛博迂腐？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新的博客</title>
      <link href="/2022/11/20/next-blog/"/>
      <url>/2022/11/20/next-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>尝试一些很新的东西…</p><p><a href="https://bladedragon.xlog.app/" target="_blank" rel="noopener">https://bladedragon.xlog.app/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码规范翻译</title>
      <link href="/2022/08/20/trans-p3c/"/>
      <url>/2022/08/20/trans-p3c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>翻译了阿里巴巴Java编码指南中涉及的54条规则</p><a id="more"></a><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ol><li><p>[强制]定制的ThreadLocal变量必须回收，特别是在使用线程池(其中线程经常被重用)时。否则，它可能会影响后续的业务逻辑，并导致内存泄漏等意外问题。</p></li><li><p>[强制]一个有意义的线程名称有助于跟踪错误信息，因此在创建线程或线程池时分配一个名称。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>); … &#125;</span><br></pre></td></tr></table></figure></li><li><p>[强制]线程应该由线程池提供。不允许显式地创建线程。注意:使用线程池可以减少创建和销毁线程的时间，节省系统资源。如果我们不使用线程池，将会创建许多类似的线程，从而导致“内存耗尽”或过度切换问题。</p></li><li><p>线程池应该由ThreadPoolExecutor而不是executor创建。这样就可以理解线程池的参数。它还将减少耗尽系统资源的风险。注意:以下是使用executor创建线程池所产生的问题:</p><ul><li><p>FixedThreadPool和SingleThreadPool:最大请求队列大小。大量的请求可能会导致OOM。</p></li><li><p>CachedThreadPool ScheduledThreadPool:  </p><p>允许创建的线程数为Integer.MAX_VALUE。创建太多的线程可能会导致OOM</p></li></ul></li><li><p>[强制]SimpleDataFormat是不安全的，不要将其定义为静态变量。如果必须使用，则必须使用lock或Apache DateUtils类。正例:使用DateUtils时要注意线程安全。建议使用如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>注意:在JDK8中，可以使用Instant代替Date;同样地，Calendar被LocalDateTime取代，SimpleDateFormatter被DateTimeFormatter取代。</code></pre></li><li><p>[强制]使用ScheduledExecutorService而不是Timer来运行多个timeask，因为Timer将在捕获异常失败的情况下杀死所有正在运行的线程。</p></li><li><p>[推荐]当使用CountDownLatch将异步操作转换为同步操作时，每个线程退出前必须调用countdown方法。确保在线程运行期间捕获任何异常，以便执行倒计时方法。如果主线程无法到达await方法，程序将返回，直到超时。注意:子线程抛出的异常不能被主线程捕获。</p></li><li><p>[推荐]避免多线程使用随机实例。尽管它是线程安全的，但在同一种子上的竞争会损害性能。注意:随机实例包括java.util.Random和Math.random()的实例。  </p><p>正面例子:</p><p>JDK7之后，可以直接使用ThreadLocalRandom API。但是在JDK7之前，需要在每个线程中创建实例。</p></li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spark源码笔记-UI参数原理</title>
      <link href="/2022/08/14/spark-ui-param/"/>
      <url>/2022/08/14/spark-ui-param/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!more><p>记录一下spark UI上一些参数的记录原理</p><a id="more"></a><p>executorPage.js</p><ul><li><p>peakMetrics</p></li><li><p>memoryMetrics</p></li></ul><p>OneApplicationResource</p><ul><li>和前端交互</li></ul><p>api</p><ul><li><p>MemoryMetrics 可能存在可能不存在</p></li><li><p>ExecutorSummary 包含返回给前端的所有信息</p></li></ul><p>AppStatusListener</p><ul><li>可以知道storageMemory是通过RDD </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>那些永不磨灭的青春</title>
      <link href="/2022/04/20/sports-meeting/"/>
      <url>/2022/04/20/sports-meeting/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>十年饮冰，难凉热血  </p><p>尽管早已置身千里之外，但听到熟悉的枪响，听到镭镭的震鼓，听到运动员呐喊和观众的欢呼……肌肉猛的一下抽搐，心脏开始剧烈跳动——仿佛我从未离去，仿佛我就在赛场。</p><p>当记忆与现实重叠，镜头的焦点却在慢慢偏移。久久我才意识到，聚光灯的朝向已经转变，现在的我，只能在屏幕后面，无声地望着他们的背影。但就是这群背影，继承着荣耀的衣钵，装载着众人的期许，在这片浸润无数汗水的绿茵场上，创造着一个又一个奇迹！<br>赛场上的黄色旋风，再一次成为人们眼中最闪耀的风景线。  </p><p>有人说，这场比赛，是多么微不足道，争夺第一，是多么幼稚无趣，更何况，远在天边的彼时彼刻与眼前的此时此刻不会碰撞出任何花火。关注这些虚无缥缈的东西，有意义吗？当然没有意义。知之者知之，不知者不知，这是当然的。大家都在奔向不同的终点，没必要去强求一致的价值认同。追求第一，也不只是第一；我们秉持着更高更快的信仰，追求着不让自己后悔的人生；比赛的意义，也不仅是比赛，我们喊着口号，五湖四海的人们凝聚在一起，形成了我们不可磨灭的精神符号。只有一起经历过的朋友，才能在回味和再度相遇时相视而笑，而个中滋味，他人不必理解，亦无需知晓。  </p><p>她有她的蒙娜丽莎，我也有我的喜马拉雅。</p><p>你在生命中有过热血沸腾的时候吗</p><p>这是一个团队的故事</p><p>他们追求更快</p><p>更高</p><p>更强</p><p>他们并非天赋异禀</p><p>单纯，</p><p>因为热爱</p><p>汇聚在一起 </p><p>为了同一个目标</p><p>冠军</p><p>他们的信念</p><p>不只有求胜</p><p>还有<br>传承</p><p>在拼搏的路上，你永远不是一个人</p><p>青春的身影孤勇前进，背后有着很多人的支持</p><p>比赛场上的黄色海洋，</p><p>这可能是别人一辈子</p><p>这里可能不是梦想实现的地方 </p><p>但一定是梦想起飞的地方</p><p>感谢大学四年和这样一群人共同奔跑过，希望大家都能保持会为一个目标竭尽全力地初心。愿您出走半生，归来仍是少年</p><p>BGM：</p><p>Rapture -John Stanford 纯音乐</p><p>Intro - 王备 《航拍中国》BGM</p><p>空の欠 - 池田綾子 《电脑线圈》ED</p><p>部分素材来自：</p><p>重庆邮电大学微博视频号</p><p>重庆邮电大学官方 BV1dL4y1G7TV </p><p>以及诸多学院后勤小可爱们</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我们依然需要仰望天空</title>
      <link href="/2022/04/08/boy-and-girl-and-earth/"/>
      <url>/2022/04/08/boy-and-girl-and-earth/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在《地球外少年少女》的正片中，如果单纯论观感，最后结局的演出和设计确实会让人觉得平庸甚至粗糙，有时我也会觉得有些桥段既视感过于强烈。但是不可否认的是，在其中确实能发掘一些值得思考的闪光点，加之这部作品对世界的架构和科学幻想部分深得我心，以及前半段的“太空求生”相对出色，因此我依然认为这部番看了不亏。遗憾的是久仰矶光雄大名，又因为其处女作《电脑线圈》拥有较高口碑，这样的作品确实有些不符合预期，最后还是需要感慨一下逝去的日本科幻动画黄金时代，不知何时，我们还能再次仰望星空呢。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天我们来讲讲一部冷门的番剧《地球外少年少女》， 1月番刚出的时候，其实就有关注过这部番剧，但是没想在热度方面竟然如此之低，导致我在1月番快完结的时候才想到有这样一部作品。热度低也确实有它的原因，毕竟这部作品的题材是现在少有的近现实太空科幻作品，整体的叙事紧凑且设定严密，没有毫无逻辑的怪力乱神（至少前期没有），因此在当前异世界大行其道的宅文化风格中独树一帜，与其说这个作品是属于2022年，倒更像是属于十年前或者二十年前科幻风还尚存一席之地的时代。也或许正是因为这个原因，我才对这部作品青睐有加。</p><p>当然，虽然从这部作品中我们能窥探一丝当年科幻黄金时代的遗风，但是它终究还是和它的前辈存在相当大的差距，六集的篇幅也无法让我们对这个精心构建的世界有更加深入的了解，结局更是褒贬不一，存在一定的争议。因此，我不能说这部作品能带给大家多少发人深省或者酣畅淋漓的体验，总的来说，它还是属于一道差强人意的快餐式作品。但是如果你喜欢传统科幻文学，那我依然会推荐这部作品，毕竟，这样的作品确实看一部少一部了。</p><h2 id="剧情把握"><a href="#剧情把握" class="headerlink" title="剧情把握"></a>剧情把握</h2><p>为了方便下面对一些关键剧情的阐述，这里还是简单介绍一下这部作品。《地球外少年少女》是矶光雄监督的第二部原创作品，他作为知名的原画师，出现在了许多为人熟知的作品如《机动战士高达Z》、《新世纪福音战士》、《机动战士高达0080 口袋中的战争》、《浪客剑心》等等，尽管他作为监督的作品不多，但所谓近朱者赤，在他的作品中依然能反映出那些经典作品的影子。因此，基于这些理由，我们可以放心期待他的作品，哪怕最终作品是个烂作，也一定有值得解读的地方。</p><p>故事发生在近未来，人类的科技水平已经达到了能在太空居住的程度，并有相当一部分人移居到了月球，并生育了第一批后代。但是，人们发现在月球诞生的后代无法适应月球环境，都存在先天性缺陷，只能靠零七科技公司开发的植入物来控制激素分泌得以存活。零七是人类历史上智能最高的AI，他为人类的科技发展做出了巨大贡献，但不出意外的，AI因为高度进化，甚至超过了人类可以掌控的范围，所以和所有电视剧中的桥段一样，人类历史上最高智能的AI 零七 又双 叕暴走了。于是人类对零七进行了安乐死，并于此同时限制了人工智能的发展。同时由于月球上的第二代繁育带来的生存困境和伦理问题，移民计划也受到了大多数人的反对，于是移居月球的人类也开始回归地球。故事主人公失野和他的青梅竹马菜叶就是在月球诞生的孩子之一，作为第一代也是最后一代真正诞生于地球外的孩子，他们即将回到地球，并在安心空间站做最后的适应训练。与此同时，地球上也有三位少年少女因为被活动选中而前往安心空间站参观。就在少年少女相遇之时，他们卷入了彗星撞击事件，故事也由此展开。</p><p>故事其实可以分成上下部分，前三集完全可以看成一部合格的太空灾难片，少年少女在摇摇欲坠的太空站不断利用身边资源和科学知识求生。得益于本剧相当翔实的世界观设定和丰富的细节作画，使得观众非常容易沉浸进去，给我的感觉就像是在看太空版《荒野求生》或者《地心引力》，如果你是细节控或者科幻爱好者，看到剧中的各种新奇但又符合逻辑的设定一定会一本满足。</p><p>事实上，从各大评分网站上，也明显能看出前半部分的评分要优于后半部分，如果没有后半部分，光看前半部分，观众不需要了解非常多世界观背景，当做传统的爆米花爽片其实也未尝不可。但如果真成这样，这部作品或许大众评价会高一点，但是也就没有品鉴的价值了。当故事来到后半部分，剧情发展虽说不乏反转和爆点，但是由于大量世界观设定和带有作者性的思想理论涌入，相信很多观众都会觉得有点迷惑。动画这这一方面的表现确实不算太好，很多思想的阐述都是以说教或者站桩对话的形式进行，一套看下来确实有点吃力。不过也不能完全归咎于动画制作，很多概念和理论本身就带有很强的学术性质，在加上这些信息相当集中饱和，因此在初次观看的时候难免会觉得云里雾里。</p><p>可以看出作者想要在剧中表达的东西很多，但可能是基于剧情容量或者编排，很多都是一带而过，如果有心，可以去一一考究。我也是基于篇幅，只能去主观展开一二，如果真的有喜欢该作品的粉丝，期待可以做出更多更专业的解释。</p><h2 id="世界观的构建"><a href="#世界观的构建" class="headerlink" title="世界观的构建"></a>世界观的构建</h2><p>剧中最让我惊喜的地方，莫过于对未来科技社会的想象和还原。监督并没有去完全天马行空的设计一个架空世界，而是基于现实的科技，去合理想象和预测未来的社会形态。其实这样的设计更考验设计者的专业功底和知识广度。因为架空的社会往往存在一种“无限的能源”作为世界存在的基底，务实一点就是小型核聚变，大胆一点就是例如什么“XX炉”、“XX力”， “XX粒子”，一旦出现了某种违背常识的黑科技，似乎都可以用这种东西来解释。其实这就是设计上的偷懒，或者说“取巧”，毕竟社会的复杂性就是建立在如何利用各种有限的资源上，真正去细究这个世界的每一处细节，会发现我们的世界真的是十分复杂和精巧。因此矶光雄选择构想一个近未来的现实世界时，他所面临的设计难度是非常大的，每一处细节设计都需要基本符合现实的物理规则，这需要设计者充分了解相关行业的各类产品设计，而这样做带来的好处也是显而易见的，那就是真实感，观众能更加自然地融入到这个构想的虚拟世界，代入剧情。事实上，我认为《少年少女》中对于近未来的描绘是相当成功的。我们可以看到很多现实不存在但是很熟悉的东西，比如大脑植入物、触控手套或者主角旁的哈罗；又或者是在不熟悉的场景看到熟悉的东西，比如在空间站上有商场一样的装饰布置，有自助售卖机等，虽然只是对现实元素的排列组合以及稍稍改进，但是要把这些元素构建成一个合理可信的社会，依然需要填充不少的细节。更何况，作者明显在航天领域有着相当的知识储备，例如在穿越空间站区域进行EVA（太空行走）那段，可以看出有相当的专业性。正是这些对场景细节的构建，才让我们能更加沉浸式地带入到剧情中。</p><p>当然作者选择构建这么一个和现实如此接近的社会，也是想借助这个虚构地社会去映射现实存在的问题。比如美衣奈这个角色，在参观三人组中，她的塑造是最完整的，从头到尾完成了一个vtuber的本职工作，即作为一个第三者记录了太空中发生的一切。反观其他两位，白客大洋虽然前期还能和主角演演对手戏，推动剧情发展，但是后面交了Bright后就没了戏份，充当了背景板，另外一位弟弟博士（人名）则更是从头到尾背景板。不过就算是美衣奈也很明显被砍了很多剧情。美衣奈作为vtuber向地球观众直播的这条线实际上反映作者对消费主义和娱乐之上文化的态度。剧中还是明显压缩了地球观众舆论的剧情，从刚登上空间站到主角登矢的言论片段被上传网上引发误解，再到中途各种断网制造信息差，最后产生的各种化学反应，可以说在主线之外，另外开辟了一个相当现实和讽刺的舞台。但是有趣的是，如果说这些只是科幻映射现实的话， 利用大数据筛选观众喜好和推送娱乐讯息的网飞对该剧的注资以及剧中对优衣库的商业植入可以说是现实与科幻相互映射了，如果再联想到现在的饭圈弹幕文化那更是真人体验了。被娱乐化的未来并非全是悲惨和黑暗的，只是在被信息裹挟的时代，我们筛选信息和做出正确判断的成本更高了，大众的集体意志也更容易被转变和引导，其实我们不是必须要给出这种存在方式的对与错，剧中对于这些直播场景的展示也并非完全负面，我们真正需要认识到，是选择接受并正视这种存在的必然性，并为此而做出积极的改变。</p><h2 id="剧情赏析"><a href="#剧情赏析" class="headerlink" title="剧情赏析"></a>剧情赏析</h2><p>剧中的主线其实是非常经典的AI与人之间的立场问题。现在大家都讨论AI与人，实质上就是过去机器人与人话题的延伸。在此基础上，可以引出很多新的问题，我们是否能认可我们创造的物体具有自由意志？是否认可创造物成为与人类同等地位的物种？如果这些创造物真的具有了自由意志，他们是否会反噬甚至取代造物主？实际上，根据目前主流的观点，大家都默认认同存在即合理，如果真的出现具有自由意志的AI，我们尊重并认可其独立物种的地位，但是其中会一个关键点，怎样的区分创造物是否有自由意志？在剧中对AI的智能程度进行了量化，“哈罗”和“pod”一层层突破智能限制，最终达到并超过零七的过程看上去就像打怪升级一样简单，实际上其中隐含了一个完整的物种进化的过程，我们知道最终的零七2号是具有自由意志的，并认可其成为新的物种，但是智能程度处于之间的十二，black和bright这些呢？如何证明他们没有自由意志？如果他们有自由意志，我们还能约束和控制他们吗？虽然现在人类已经有图灵测试去检测AI是否具有人类智能，但是这依然只是人类的标准，更何况目前也有不少AI通过了图灵测试，但是我们认可他们的智能水平达到了人类级别吗？深挖下来其实有很多值得思考的话题，这些话题剧中没有给出答案，可能我们至今还无法给出完美的解释，也许只有等到问题真正出现在眼前，我们才能揭晓答案。</p><p>毕竟探求自由意志存在这个概念本身是一个学术的问题，我们也不希求在一部影视作品中追求得到结果。于是很多作品便把人与AI的冲突放在沟通上，毕竟如果AI能认同人类并不想毁灭人类，那依然能达成一个HAPPYEND的结局。而本作的AI 零七二号在与人类沟通，理解人类的过程中，抛出了这样一个话题，人作为集体和独立个人的概念，是不是一致。这个话题莫名让人联想到EVA的橙汁结局，同样是在人要保持独立个体的存在还是打破心之壁，作为集体的概念存活上进行选择。当然，学过马哲的大家都明白，物质决定意识，抛开人实体存在而光论集体意识的存在是没有意义的。 但是国外的人们有不同的价值观，自然对此有不同的理解。因此我们也不必过于深究概念，毕竟在做长时间思想博弈的过程中，就有可能会不自觉地掉入虚无主义的泥潭，实际上，我认为对生活真正有指导意义的是区分个人意志和集体意志的边界。剧中人物的表现在我看到就是在演绎个人独立意志与集体意志如何冲突和调和的过程。在登矢为了拯救菜叶和零七2号直接对话的过程中，零七2号更多是在整体的角度的思考存亡问题，但是登矢却只关心菜叶个人的生死，并在对话中频频表示出强烈的个体主观意志，与之相反，菜叶却早早接受所谓的宿命，接受人类群体降下的意志，而不曾做独立的思考，直到登矢的言行重新唤醒菜叶内心对生存的渴望，因此，二人才成功得以拯救。当然剧中对这段的演出说不上太好，很多概念一扫而过，缺乏合理解释，导致最后像是机械降神，主角凭借自带光环解决一切问题。虽然可能存在过度解读的可能，但我更倾向作者一定有基于思想层面的考量去设计最后的拯救桥段。</p><p>《少年少女》的正片中，如果单纯论观感，最后结局的演出和设计确实会让人觉得平庸甚至粗糙，有时我也会觉得有些桥段既视感过于强烈。但是不可否认的是，在其中确实能发掘一些值得思考的闪光点，加之这部作品对世界的架构和科学幻想部分深得我心，以及前半段的“逃生纪实”相对出色，因此我依然认为这部番看了不亏。遗憾的是久仰矶光雄大名，以及其处女作《电脑线圈》的高口碑，这样的作品确实有些不符合预期，总的来说，虽然这部作品不算特别完美，但在当今影视作品题材愈发同质化的形势下，还能有充满思想性和思考价值的作品出现实属难得，对于一般观众而言，算是一部合格水平良作，对于科幻爱好者来说，则更有理由去支持这种小众题材的作品 。</p><p>最后还是需要感慨一下逝去的日本科幻动画黄金时代，或许冰冷的机器，深邃未知的太空已经无法再激发人们的兴趣，但在科技飞速发展的现实，如果娱乐作品缺乏对科学技术的普及，对前沿思想的解构，沉默的大多数，是否拥有足够的独立意志做好了迎接未来的准备? 还是会成为被信息裹挟，被言语操控的乌合之众？</p><p>或许有一天我们想起来仰望星空，会发现原来我们早已置于星空之中</p>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清明杂记</title>
      <link href="/2022/03/30/anxious/"/>
      <url>/2022/03/30/anxious/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>结束了淅淅沥沥的阴雨天，4月的第一个周末，总算迎来了阳光明媚的早晨。久违地在起床后沐浴着晨风，安静地思考，才发觉，因为疫情和工作， 让时间流逝得如此之快。转眼间，这一年，就要过去三分之一了。虽然日子一天天正常过，但是脑海中总是布满各种各样阴郁的情绪，感觉无论走什么事情都有一种焦躁的心情，总想做出改变但总是无能为力，是谓之焦虑。</p><p>为什么会焦虑呢？</p><p>一个原因是对现状不满而对未来还充满疑惑吧，另外一个原因是缺乏积累和成长的满足。前者也来自于浮躁带来的想一蹴而就的心态，后者则是安于现状的一种反噬吧。</p><p>说到底，现在需要的专注和持续的投入，没有什么事情是可以一簇而就的，时间会基于你应有得到回报</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/2021/12/31/2021-year-end-summary/"/>
      <url>/2021/12/31/2021-year-end-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-BMWbRfsJ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-BMWbRfsJ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "One Last Kiss",              author: "宇多田ヒカル",              url: "http://music.163.com/song/media/outer/url?id=1824020871.mp3",              pic: "http://p1.music.126.net/l3G4LigZnOxFE9lB4bz_LQ==/109951165791860501.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>继续做梦，继续做对的事情，继续期待。</p><p>Do Dream, Do Right, Do Expect </p><a id="more"></a><p>时间过得飞快，很难想象在圣诞节之后，2021年将会成为过去式。一年前的我，在做什么？一年后的我，将做什么？</p><hr><p>这一年，无疑会是我一生中最重要的一年之一。</p><p>我尝尽了校园的余味，迈入了名叫社会的圈子。用一段无忧无虑的生活，迎来了一个阶段性的谢幕。不知不觉已经到这样的年纪，曾经的理想生活都已变成了既定的现实。虽然这个现实和最初的梦想有了不小的偏差，但是总归来说还是意料之中的结局。</p><p>我是一个不自律的人，因此我必须给自己限定约束，才能得到我最大的满足。这是我20年不断验证的事实。忍耐是我的优点，无法专注是我的缺点。我知道自己的明暗面，也不会给未来过高的期许，但是，这不是给我设限的理由。过去的我总是封闭自己，因此我无法跳出自己给自己设计的逻辑怪圈，其实只要坚持，坚持做对的事情，我依然有无限的可能性。</p><p>今天看了冰冰的视频，平时其实都不会去关注，但不得不承认，有的时候人还是需要一点正能量的，也不是虚伪，不是逃避现实，恰恰相反，这些正能量正是驱动我们进步的现实之一。我们自以为理性，看透了现实的阴暗面，但是却无法承认现实中依然存在的美好的东西，这何尝不是一种非理性的想法？不是所有人的人生，都是去辩驳，去证伪，每个人都应该有自己追求的目标，这样，生活才不孤单，或者说，只要你心里还有对未来的期许，那样为之付出的每一步，都富有意义。</p><p>因此，新的一年，依然要继续立flag，继续做对的事情，继续过着让自己满意的生活。</p><h2 id="将过去归档，存一份念想"><a href="#将过去归档，存一份念想" class="headerlink" title="将过去归档，存一份念想"></a>将过去归档，存一份念想</h2><p>翻看相册，才明白什么叫光阴似箭，日月如梭。真的这些情景仿佛就在昨天展现，然而却快要跨过一年。</p><p><img src="/2021/12/31/2021-year-end-summary/1640963566573.jpg" alt="1640963566573"></p><p><img src="/2021/12/31/2021-year-end-summary/1640963566569.jpg" alt="1640963566569"></p><p><img src="/2021/12/31/2021-year-end-summary/1640963566565.jpg" alt="1640963566565"></p><p><img src="/2021/12/31/2021-year-end-summary/1640963566561.jpg" alt="1640963566561"></p><p><img src="/2021/12/31/2021-year-end-summary/1640963566553.jpg" alt="1640963566553"></p><p><img src="/2021/12/31/2021-year-end-summary/1640963566546.jpg" alt="1640963566546"><img src="/2021/12/31/2021-year-end-summary/1640963566539-16409636723881.jpg" alt="1640963566539"></p><p>4月，结束了我可能是人生最后一次运动会，我任凭心里感情宣泄，将其化成辞藻，最后洋洋洒洒写了一堆心里话。虽然一如既往佶屈聱牙，充满了中二气息，但是这才是我嘛。这份孤高的气质，现在还留有几分呢?</p><p><img src="/2021/12/31/2021-year-end-summary/1640963994974.jpg" alt="1640963994974"></p><p>4月底，我突然有了一个机会做临时实验，这可新鲜。我甚至开始期待这是不是代表可以根治我这毛病又能省钱？（虽然事实证明命运只是擦肩而过）</p><p><img src="/2021/12/31/2021-year-end-summary/1640964215002.jpg" alt="1640964215002"></p><p>5月5日，纪念我的第二部手机，虽然一开始只是倔强得说只是临时机，但还是用的挺爽的。 我最后还是来到了一个不上不下的公司，这让我对数码产品也关注得多了一些，我也曾同样的心情下说出了只是一开始在这里，后面一定会跳槽的。但老实讲，心里还是没有底。但是的但是，生活并不是一成不变的，这次如此，不代表下次一定。具体我会变成什么样子，看今年表现。</p><p><img src="/2021/12/31/2021-year-end-summary/1640964493164.jpg" alt="1640964493164"></p><p>最后的暑假，记录一下大饼。</p><p><img src="/2021/12/31/2021-year-end-summary/1640964544771.jpg" alt="1640964544771"></p><p>是去而不返的校园:(</p><p><img src="/2021/12/31/2021-year-end-summary/1640964609958.jpg" alt="1640964609958"></p><p>是武隆！这里有我第一次用心的vlog，有我最好的朋友。</p><p><img src="/2021/12/31/2021-year-end-summary/Screenshot_2021-12-31-23-34-47-278_com.miui.galle.jpg" alt="Screenshot_2021-12-31-23-34-47-278_com.miui.galle"></p><p>这里有着对学校最后的留念和致意。</p><p><img src="/2021/12/31/2021-year-end-summary/1640964971440.jpg" alt="1640964971440"></p><p>最后的答辩。</p><p><img src="/2021/12/31/2021-year-end-summary/E5G3sskVcAYhO-e.jpg" alt="E5G3sskVcAYhO-e"></p><p>这里跳过非常多的毕业纪念照片…还是没有敢放出来的勇气..（放一张我很喜欢的契丹物语）</p><p><img src="/2021/12/31/2021-year-end-summary/1640965145816.jpg" alt="1640965145816"></p><p>湖南行！与朋友和朋友的女朋友们…不过不妨碍这是一段非常开心的旅程~ （茶颜yyds）</p><p><img src="/2021/12/31/2021-year-end-summary/1640965256368.jpeg" alt="1640965256368"></p><p>一张背影，代表最好的我们</p><p><img src="/2021/12/31/2021-year-end-summary/1640965345616.jpg" alt="1640965345616"></p><p>社会人的开始，二度进厂，做机的时光</p><p><img src="/2021/12/31/2021-year-end-summary/1640965459745.jpg" alt="1640965459745"></p><p>年轻人的第一顿饭…</p><p><img src="/2021/12/31/2021-year-end-summary/1640965515758.jpg" alt="1640965515758"></p><p>年轻人的第一次装机..</p><p><img src="/2021/12/31/2021-year-end-summary/1640965548192.jpeg" alt="1640965548192"></p><p>RGB就是信仰！！</p><p><img src="/2021/12/31/2021-year-end-summary/1640965579531.png" alt="1640965579531"></p><p>社畜的人生开始变成游戏的模样….</p><p><img src="/2021/12/31/2021-year-end-summary/1640965620974.jpg" alt="1640965620974"></p><p>年轻人的第一次团建… 心情是意外的好</p><p>一年就这样走向结束..</p><p><img src="/2021/12/31/2021-year-end-summary/1640965709047.jpg" alt="1640965709047"></p><p>这时今年最后一张照片. END</p><p>你完成了哪些计划?</p><p><img src="/2021/12/31/2021-year-end-summary/image-20211231234948196.png" alt="image-20211231234948196"></p><p>回看去两年前的总结，感觉自己就像断层一样，果然，不记录一点什么，自己就无法知道自己到底活成了什么样子。以前的我还是有很多念想，现在，我具备了一切的条件，想做什么就必须去做吧</p><h2 id="致未来"><a href="#致未来" class="headerlink" title="致未来"></a>致未来</h2><p>对于未来，我不看好，但我充满期待。我活成什么样子，取决于我的执行力如何。</p><p>从今年起，我要开始立flag了。现在的我还年轻，比起研究生们，我还有3年时间。我也只有三年时间，必须让我能骄傲地立足于这个社会上。因此明年的主题，是定调，潜心研究。</p><p>首先是工作的flag：</p><ul><li>明年的述职，一定是要自信和稳操胜券的。</li></ul><p>技术上</p><ul><li>明年至少要有一个自己的开源玩具</li><li>看完至少3本技术书</li><li>博客数量不少于6篇吧（感觉有点虚还是，新年就是要硬气点！）</li></ul><p>生活上</p><ul><li>坚持做饭的良好传统</li><li>每个月都要出门换换气</li><li>坚持锻炼，要保持肌肉max</li></ul><p>习惯上</p><ul><li>至少看完三本书（非技术类）</li><li>学会AE，至少剪一个视频</li></ul><p>未来已来。之后的每一年都会一如既往，但是每一年一定都有不一样的精彩。人生有终点，但奔赴终点不是我们的目标。多抬头，四周望，去发现更加美丽的风景。</p><p>继续做梦，继续做对的事情，不留遗憾。</p>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>airflow源码解析——调度器篇</title>
      <link href="/2021/11/27/airflow-01/"/>
      <url>/2021/11/27/airflow-01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为<code>airflow1.0</code>和<code>2.0</code>变更了许多</p><p>接下来会通过分析<code>airflow1.0</code>和<code>airflow2.0</code>的源码来加深对airflow的理解</p><a id="more"></a><h2 id="airflow简介"><a href="#airflow简介" class="headerlink" title="airflow简介"></a>airflow简介</h2><p><code>airflow</code>是一个工作流模式的分布式任务调度框架，可以实现复杂的工作流调度。因为工作原因需要对<code>airflow</code>进行调研，因此这里记录一下学习<code>airflow</code>过程遇到的问题并吸收一些实现技巧。接下来会根据<code>airflow</code>的各种组件，深入<code>airflow</code>的源码进行讲解。<code>airflow</code>从<code>1.0</code>到<code>2.0</code>，实现的架构进行了一次较大的改变，因此，我在这里同时分析两个大版本的源码，通过分析其中的异同，也可以一窥开发者的设计思路和优化方向。</p><p>首先放一张整体的<code>airflow</code>架构图</p><p><img src="/2021/11/27/airflow-01/d5a83dfb61fdda9670e2237463cdf633.jpg" alt="d5a83dfb61fdda9670e2237463cdf633"></p><p><code>2.0</code>和<code>1.0</code>在整体结构相似，这里大概会将airflow的解析分为调度器篇 <code>worker(executor)</code>篇  <code>dag</code>处理器篇 <code>webserver</code>篇</p><p>接下来的内容默认读者对<code>airflow</code>的基本概念有一定的了解，如果尚未了解相关内容，之后有时间我再考虑写一篇概念相关内容</p><p><code>airflow</code>创建工作流的过程主要如下，注意<code>airflow</code>是一个命令驱动的框架，几乎所有的机制都是从发送命令行开始的</p><ol><li>通过命令行创建<code>dag</code>和<code>operator</code>，</li><li>配置<code>airflow</code>的基本配置，包括数据库连接，<code>webserver</code>端口，连接板并发数，读取的存放dag文件夹的位置等等</li><li>启动调度器，<code>webserver</code>以及<code>executor</code>，这时框架会自动从设置好的的dag文件夹位置读取dag和operator的配置文件并生成<code>dag</code>和<code>task</code>存放进数据库</li><li>接着就可以登陆<code>airflow</code>的<code>webserver</code>查看各个dag的运行情况l</li></ol><h2 id="airflow1-0-调度器部分"><a href="#airflow1-0-调度器部分" class="headerlink" title="airflow1.0 调度器部分"></a>airflow1.0 调度器部分</h2><p>这里我们选择的版本是<code>1.8.2</code></p><p>首先观察一下<code>airflow</code>的主要结构</p><p><img src="/2021/11/27/airflow-01/image-20211128132757164.png" alt="image-20211128132757164"></p><p>大致解释一下各个目录的作用</p><ul><li><code>api</code>: 放置了一些用于代码内接口调用的方法</li><li><code>bin</code>：启动方法</li><li><code>contrib</code>：应该是一些第三方插件的定制方法，包括sensor，executor，hook等</li><li><code>dag</code>：dag的基类</li><li><code>example_dag</code>: 一些dag的样例模板</li><li><code>executor</code>：具体的executor</li><li><code>hooks</code>：用于方法内调用的hook，使得可以降低非核心功、能的耦合程度</li><li><code>macros</code>：只有hive的一些方法，我还不是特别了解</li><li><code>migrations</code>： 略</li><li><code>operators</code>：定制的一些operator，即task的模板</li><li><code>security</code>：有关用户认证和登录的方法</li><li><code>task_runner</code>:  执行airflow命令行工具，有点像bash</li><li><code>ti_dep</code>: taskinstance 的一些依赖状态</li><li><code>utils</code>: 工具类</li><li><code>www</code>: 页面相关</li></ul><p>可以看到目录结构非常之多，因此我们需要抓住一条主线来梳理。本篇选择以调度器作为切入口，我们就从调度器的创建开始吧。</p><p><code>airflow</code>所有机制的运行入口几乎都是从命令行开始的，因此我们直接从命令行的入口方法查看，这里我们查看<code>/bin/cli.py</code></p><p>可以看到再<code>cli.py</code>的<code>CLIFactory</code>类中存在大量的命令定义，这里在之后的学习中还会经常回到这里。我们直接查看<code>scheduler</code>的启动</p><p><img src="/2021/11/27/airflow-01/image-20211128142711668.png" alt="image-20211128142711668"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduler</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(settings.HEADER)</span><br><span class="line">    <span class="comment"># 调度器的核心</span></span><br><span class="line">    job = jobs.SchedulerJob(</span><br><span class="line">        dag_id=args.dag_id,</span><br><span class="line">        subdir=process_subdir(args.subdir),</span><br><span class="line">        run_duration=args.run_duration,</span><br><span class="line">        num_runs=args.num_runs,</span><br><span class="line">        do_pickle=args.do_pickle)</span><br><span class="line"><span class="comment"># 如果挂后台，就将进程挂到daemonContext上</span></span><br><span class="line">    <span class="keyword">if</span> args.daemon:</span><br><span class="line">        pid, stdout, stderr, log_file = setup_locations(<span class="string">"scheduler"</span>, args.pid, args.stdout, args.stderr, args.log_file)</span><br><span class="line">        handle = setup_logging(log_file)</span><br><span class="line">        stdout = open(stdout, <span class="string">'w+'</span>)</span><br><span class="line">        stderr = open(stderr, <span class="string">'w+'</span>)</span><br><span class="line"></span><br><span class="line">        ctx = daemon.DaemonContext(</span><br><span class="line">            pidfile=TimeoutPIDLockFile(pid, <span class="number">-1</span>),</span><br><span class="line">            files_preserve=[handle],</span><br><span class="line">            stdout=stdout,</span><br><span class="line">            stderr=stderr,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">with</span> ctx:</span><br><span class="line">            job.run()</span><br><span class="line"></span><br><span class="line">        stdout.close()</span><br><span class="line">        stderr.close()</span><br><span class="line">       <span class="comment"># 通过信号直接启动进程</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        signal.signal(signal.SIGINT, sigint_handler)</span><br><span class="line">        signal.signal(signal.SIGTERM, sigint_handler)</span><br><span class="line">        signal.signal(signal.SIGQUIT, sigquit_handler)</span><br><span class="line">        job.run()</span><br></pre></td></tr></table></figure><p>可以看见，核心在于创建<code>schuedulerJob</code>类，同时传入dag_id, 持续时间，并发数等基本参数</p><p>继续进入，可以发现我们跳转到了<code>job.py</code></p><p>我们先查看一下<code>schedulerJob</code>的父类，<code>baseJob.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseJob</span><span class="params">(Base, LoggingMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">"job"</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    dag_id = Column(String(ID_LEN),)</span><br><span class="line">    state = Column(String(<span class="number">20</span>))</span><br><span class="line">    job_type = Column(String(<span class="number">30</span>))</span><br><span class="line">    start_date = Column(DateTime())</span><br><span class="line">    end_date = Column(DateTime())</span><br><span class="line">    latest_heartbeat = Column(DateTime())</span><br><span class="line">    executor_class = Column(String(<span class="number">500</span>))</span><br><span class="line">    hostname = Column(String(<span class="number">500</span>))</span><br><span class="line">    unixname = Column(String(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">pass</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_kill</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heartbeat_callback</span><span class="params">(self, session=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heartbeat</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @provide_session</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_state_for_orphaned_tasks</span><span class="params">(self, dag_run, session=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>可以发现，这里<code>job</code>首先是作为一张表保存了job的状态，执行情况（这里是<code>sqlalchemy</code>的相关知识）</p><p>主要的方法有</p><ul><li><code>is_alive</code>: 通过<code>heartbeat</code>判断是否存活</li><li><code>kill</code>：通过删除数据库记录的方式来结束任务</li><li><code>on_kill</code>：等待子类重写，用于删除任务的时候做一些额外处理</li><li><code>heartbeat_callback</code>：心跳的回调，等待子类重写</li><li><code>heartbeat</code>：发送心跳，下面详细介绍</li><li><code>run</code>：修改表中job的状态，来表示job正在进行，同时执行_exexute</li><li><code>_execute</code>： 等待子类重写，如何执行job</li><li><code>reset_state_for_orphaned_tasks</code>：重置孤儿任务</li></ul><p>下面我们看看heartbeat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heartbeat</span><span class="params">(self)</span>:</span></span><br><span class="line">    session = settings.Session()</span><br><span class="line">    job = session.query(BaseJob).filter_by(id=self.id).one()</span><br><span class="line">    make_transient(job)</span><br><span class="line">    session.commit()</span><br><span class="line">    session.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> job.state == State.SHUTDOWN:</span><br><span class="line">        self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Figure out how long to sleep for</span></span><br><span class="line">    sleep_for = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> job.latest_heartbeat:</span><br><span class="line">        sleep_for = max(</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            self.heartrate - (datetime.now() - job.latest_heartbeat).total_seconds())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Don't keep session open while sleeping as it leaves a connection open</span></span><br><span class="line">    session.close()</span><br><span class="line">    sleep(sleep_for)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update last heartbeat time</span></span><br><span class="line">    session = settings.Session()</span><br><span class="line">    job = session.query(BaseJob).filter(BaseJob.id == self.id).first()</span><br><span class="line">    job.latest_heartbeat = datetime.now()</span><br><span class="line">    session.merge(job)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line">    self.heartbeat_callback(session=session)</span><br><span class="line">    session.close()</span><br><span class="line">    self.logger.debug(<span class="string">'[heart] Boom.'</span>)</span><br></pre></td></tr></table></figure><p>心跳在调度器运行期间定期发送，通过查表判断调度器状态是否正常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@provide_session</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">reset_state_for_orphaned_tasks</span><span class="params">(self, dag_run, session=None)</span>:</span></span><br><span class="line"><span class="comment"># 从执行器中获取等待入队的任务</span></span><br><span class="line">       queued_tis = self.executor.queued_tasks</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 同样考虑正在执行器中执行的任务</span></span><br><span class="line">       running = self.executor.running</span><br><span class="line">       tis = list()</span><br><span class="line">       tis.extend(dag_run.get_task_instances(state=State.SCHEDULED, session=session))</span><br><span class="line">       tis.extend(dag_run.get_task_instances(state=State.QUEUED, session=session))</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 等待入队和正在执行器执行的任务属于正常情况不会处理</span></span><br><span class="line">       <span class="keyword">for</span> ti <span class="keyword">in</span> tis:</span><br><span class="line">           <span class="keyword">if</span> ti.key <span class="keyword">not</span> <span class="keyword">in</span> queued_tis <span class="keyword">and</span> ti.key <span class="keyword">not</span> <span class="keyword">in</span> running:</span><br><span class="line">               self.logger.debug(<span class="string">"Rescheduling orphaned task &#123;&#125;"</span>.format(ti))</span><br><span class="line">               ti.state = State.NONE</span><br><span class="line">       session.commit()</span><br></pre></td></tr></table></figure><p>重置孤儿任务则是考虑在调度过程可能因为各种异常情况，如调度器进程突然中止或者没有没有执行器执行任务，就会产生无法继续执行的孤儿任务，这种任务将会在下一次调度前进行回收并再次调度</p><p>接下来就进入schedulerJob了，我们直接来看核心方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_execute</span><span class="params">(self)</span>:</span></span><br><span class="line">       self.logger.info(<span class="string">"Starting the scheduler"</span>)</span><br><span class="line">       <span class="comment"># 打开锁，对表连接进行独占</span></span><br><span class="line">       pessimistic_connection_handling()</span><br><span class="line"></span><br><span class="line">       logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># dag可以被一些执行器pickle序列化，以便更容易地远程执行</span></span><br><span class="line">       pickle_dags = <span class="literal">False</span></span><br><span class="line">       <span class="keyword">if</span> self.do_pickle <span class="keyword">and</span> self.executor.__class__ <span class="keyword">not</span> <span class="keyword">in</span> \</span><br><span class="line">               (executors.LocalExecutor, executors.SequentialExecutor):</span><br><span class="line">           pickle_dags = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># Use multiple processes to parse and generate tasks for the</span></span><br><span class="line">       <span class="comment"># DAGs in parallel. By processing them in separate processes,</span></span><br><span class="line">       <span class="comment"># we can get parallelism and isolation from potentially harmful</span></span><br><span class="line">       <span class="comment"># user code.</span></span><br><span class="line">       </span><br><span class="line"><span class="comment"># some log </span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># Build up a list of Python files that could contain DAGs</span></span><br><span class="line">       self.logger.info(<span class="string">"Searching for files in &#123;&#125;"</span>.format(self.subdir))</span><br><span class="line">       <span class="comment"># 遍历目录并查找python文件</span></span><br><span class="line">       known_file_paths = list_py_file_paths(self.subdir)</span><br><span class="line">       self.logger.info(<span class="string">"There are &#123;&#125; files in &#123;&#125;"</span></span><br><span class="line">                        .format(len(known_file_paths), self.subdir))</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">processor_factory</span><span class="params">(file_path, log_file_path)</span>:</span></span><br><span class="line">           <span class="keyword">return</span> DagFileProcessor(file_path,</span><br><span class="line">                                   pickle_dags,</span><br><span class="line">                                   self.dag_ids,</span><br><span class="line">                                   log_file_path)</span><br><span class="line"><span class="comment"># 核心的方法，处理dag，将文件转换成dag</span></span><br><span class="line">       processor_manager = DagFileProcessorManager(self.subdir,</span><br><span class="line">                                                   known_file_paths,</span><br><span class="line">                                                   self.max_threads,</span><br><span class="line">                                                   self.file_process_interval,</span><br><span class="line">                                                   self.child_process_log_directory,</span><br><span class="line">                                                   self.num_runs,</span><br><span class="line">                                                   processor_factory)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 执行调度</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           self._execute_helper(processor_manager)</span><br><span class="line">       <span class="keyword">finally</span>:</span><br><span class="line">           self.logger.info(<span class="string">"Exited execute loop"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment"># 到这里调度结束，杀死子进程并退出</span></span><br><span class="line">           pids_to_kill = processor_manager.get_all_pids()</span><br><span class="line">           <span class="keyword">if</span> len(pids_to_kill) &gt; <span class="number">0</span>:</span><br><span class="line">               <span class="comment"># First try SIGTERM</span></span><br><span class="line">               this_process = psutil.Process(os.getpid())</span><br><span class="line">               </span><br><span class="line">               <span class="comment"># 只检查子进程以确保因为子进程死亡但是进程ID被重用导致杀死错误进程的情况</span></span><br><span class="line">               child_processes = [x <span class="keyword">for</span> x <span class="keyword">in</span> this_process.children(recursive=<span class="literal">True</span>)</span><br><span class="line">                                  <span class="keyword">if</span> x.is_running() <span class="keyword">and</span> x.pid <span class="keyword">in</span> pids_to_kill]</span><br><span class="line">               <span class="keyword">for</span> child <span class="keyword">in</span> child_processes:</span><br><span class="line">                   self.logger.info(<span class="string">"Terminating child PID: &#123;&#125;"</span>.format(child.pid))</span><br><span class="line">                   child.terminate()</span><br><span class="line">               timeout = <span class="number">5</span></span><br><span class="line">               self.logger.info(<span class="string">"Waiting up to &#123;&#125;s for processes to exit..."</span></span><br><span class="line">                                .format(timeout))</span><br><span class="line">               <span class="comment"># 等待进程被中止</span></span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   psutil.wait_procs(child_processes, timeout)</span><br><span class="line">               <span class="keyword">except</span> psutil.TimeoutExpired:</span><br><span class="line">                   self.logger.debug(<span class="string">"Ran out of time while waiting for "</span></span><br><span class="line">                                     <span class="string">"processes to exit"</span>)</span><br><span class="line"></span><br><span class="line">               <span class="comment"># Then SIGKILL</span></span><br><span class="line">               child_processes = [x <span class="keyword">for</span> x <span class="keyword">in</span> this_process.children(recursive=<span class="literal">True</span>)</span><br><span class="line">                                  <span class="keyword">if</span> x.is_running() <span class="keyword">and</span> x.pid <span class="keyword">in</span> pids_to_kill]</span><br><span class="line">               <span class="keyword">if</span> len(child_processes) &gt; <span class="number">0</span>:</span><br><span class="line">                   <span class="keyword">for</span> child <span class="keyword">in</span> child_processes:</span><br><span class="line">                       self.logger.info(<span class="string">"Killing child PID: &#123;&#125;"</span>.format(child.pid))</span><br><span class="line">                       child.kill()</span><br><span class="line">                       child.wait()</span><br></pre></td></tr></table></figure><p>可以看到调度的流程是 加锁-&gt; 获取解析后的dag -&gt; 调度 -&gt;调度结束杀死进程 </p><p>关于解析dag我们单独放一篇出来讲，这里我们直接进入execute_helper一探究竟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_execute_helper</span><span class="params">(self, processor_manager)</span>:</span></span><br><span class="line">    </span><br><span class="line">    self.executor.start()</span><br><span class="line"></span><br><span class="line">    session = settings.Session()</span><br><span class="line">    self.logger.info(<span class="string">"Resetting state for orphaned tasks"</span>)</span><br><span class="line">    <span class="comment"># grab orphaned tasks and make sure to reset their state</span></span><br><span class="line">    active_runs = DagRun.find(</span><br><span class="line">        state=State.RUNNING,</span><br><span class="line">        external_trigger=<span class="literal">False</span>,</span><br><span class="line">        session=session,</span><br><span class="line">        no_backfills=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> dr <span class="keyword">in</span> active_runs:</span><br><span class="line">        self.logger.info(<span class="string">"Resetting &#123;&#125; &#123;&#125;"</span>.format(dr.dag_id,</span><br><span class="line">                                                  dr.execution_date))</span><br><span class="line">        self.reset_state_for_orphaned_tasks(dr, session=session)</span><br><span class="line"></span><br><span class="line">    session.close()</span><br><span class="line"></span><br><span class="line">    execute_start_time = datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Last time stats were printed</span></span><br><span class="line">    last_stat_print_time = datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Last time that self.heartbeat() was called.</span></span><br><span class="line">    last_self_heartbeat_time = datetime.now()</span><br><span class="line">    <span class="comment"># Last time that the DAG dir was traversed to look for files</span></span><br><span class="line">    last_dag_dir_refresh_time = datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use this value initially</span></span><br><span class="line">    known_file_paths = processor_manager.file_paths</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For the execute duration, parse and schedule DAGs</span></span><br><span class="line">    <span class="keyword">while</span> (datetime.now() - execute_start_time).total_seconds() &lt; \</span><br><span class="line">            self.run_duration <span class="keyword">or</span> self.run_duration &lt; <span class="number">0</span>:</span><br><span class="line">        self.logger.debug(<span class="string">"Starting Loop..."</span>)</span><br><span class="line">        loop_start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Traverse the DAG directory for Python files containing DAGs</span></span><br><span class="line">        <span class="comment"># periodically</span></span><br><span class="line">        elapsed_time_since_refresh = (datetime.now() -</span><br><span class="line">                                      last_dag_dir_refresh_time).total_seconds()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> elapsed_time_since_refresh &gt; self.dag_dir_list_interval:</span><br><span class="line">            <span class="comment"># Build up a list of Python files that could contain DAGs</span></span><br><span class="line">            self.logger.info(<span class="string">"Searching for files in &#123;&#125;"</span>.format(self.subdir))</span><br><span class="line">            known_file_paths = list_py_file_paths(self.subdir)</span><br><span class="line">            last_dag_dir_refresh_time = datetime.now()</span><br><span class="line">            self.logger.info(<span class="string">"There are &#123;&#125; files in &#123;&#125;"</span></span><br><span class="line">                             .format(len(known_file_paths), self.subdir))</span><br><span class="line">            processor_manager.set_file_paths(known_file_paths)</span><br><span class="line"></span><br><span class="line">            self.logger.debug(<span class="string">"Removing old import errors"</span>)</span><br><span class="line">            self.clear_nonexistent_import_errors(known_file_paths=known_file_paths)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Kick of new processes and collect results from finished ones</span></span><br><span class="line">        self.logger.info(<span class="string">"Heartbeating the process manager"</span>)</span><br><span class="line">        simple_dags = processor_manager.heartbeat()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.using_sqlite:</span><br><span class="line">            <span class="comment"># For the sqlite case w/ 1 thread, wait until the processor</span></span><br><span class="line">            <span class="comment"># is finished to avoid concurrent access to the DB.</span></span><br><span class="line">            self.logger.debug(<span class="string">"Waiting for processors to finish since we're "</span></span><br><span class="line">                              <span class="string">"using sqlite"</span>)</span><br><span class="line">            processor_manager.wait_until_finished()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send tasks for execution if available</span></span><br><span class="line">        <span class="keyword">if</span> len(simple_dags) &gt; <span class="number">0</span>:</span><br><span class="line">            simple_dag_bag = SimpleDagBag(simple_dags)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Handle cases where a DAG run state is set (perhaps manually) to</span></span><br><span class="line">            <span class="comment"># a non-running state. Handle task instances that belong to</span></span><br><span class="line">            <span class="comment"># DAG runs in those states</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># If a task instance is up for retry but the corresponding DAG run</span></span><br><span class="line">            <span class="comment"># isn't running, mark the task instance as FAILED so we don't try</span></span><br><span class="line">            <span class="comment"># to re-run it.</span></span><br><span class="line">            self._change_state_for_tis_without_dagrun(simple_dag_bag,</span><br><span class="line">                                                      [State.UP_FOR_RETRY],</span><br><span class="line">                                                      State.FAILED)</span><br><span class="line">            <span class="comment"># If a task instance is scheduled or queued, but the corresponding</span></span><br><span class="line">            <span class="comment"># DAG run isn't running, set the state to NONE so we don't try to</span></span><br><span class="line">            <span class="comment"># re-run it.</span></span><br><span class="line">            self._change_state_for_tis_without_dagrun(simple_dag_bag,</span><br><span class="line">                                                      [State.QUEUED,</span><br><span class="line">                                                       State.SCHEDULED],</span><br><span class="line">                                                      State.NONE)</span><br><span class="line"></span><br><span class="line">            self._execute_task_instances(simple_dag_bag,</span><br><span class="line">                                         (State.SCHEDULED,))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Call hearbeats</span></span><br><span class="line">        self.logger.info(<span class="string">"Heartbeating the executor"</span>)</span><br><span class="line">        self.executor.heartbeat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Process events from the executor</span></span><br><span class="line">        self._process_executor_events()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Heartbeat the scheduler periodically</span></span><br><span class="line">        time_since_last_heartbeat = (datetime.now() -</span><br><span class="line">                                     last_self_heartbeat_time).total_seconds()</span><br><span class="line">        <span class="keyword">if</span> time_since_last_heartbeat &gt; self.heartrate:</span><br><span class="line">            self.logger.info(<span class="string">"Heartbeating the scheduler"</span>)</span><br><span class="line">            self.heartbeat()</span><br><span class="line">            last_self_heartbeat_time = datetime.now()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Occasionally print out stats about how fast the files are getting processed</span></span><br><span class="line">        <span class="keyword">if</span> ((datetime.now() - last_stat_print_time).total_seconds() &gt;</span><br><span class="line">                self.print_stats_interval):</span><br><span class="line">            <span class="keyword">if</span> len(known_file_paths) &gt; <span class="number">0</span>:</span><br><span class="line">                self._log_file_processing_stats(known_file_paths,</span><br><span class="line">                                                processor_manager)</span><br><span class="line">            last_stat_print_time = datetime.now()</span><br><span class="line"></span><br><span class="line">        loop_end_time = time.time()</span><br><span class="line">        self.logger.debug(<span class="string">"Ran scheduling loop in &#123;:.2f&#125;s"</span></span><br><span class="line">                          .format(loop_end_time - loop_start_time))</span><br><span class="line">        self.logger.debug(<span class="string">"Sleeping for &#123;:.2f&#125;s"</span></span><br><span class="line">                          .format(self._processor_poll_interval))</span><br><span class="line">        time.sleep(self._processor_poll_interval)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Exit early for a test mode</span></span><br><span class="line">        <span class="keyword">if</span> processor_manager.max_runs_reached():</span><br><span class="line">            self.logger.info(<span class="string">"Exiting loop as all files have been processed "</span></span><br><span class="line">                             <span class="string">"&#123;&#125; times"</span>.format(self.num_runs))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Stop any processors</span></span><br><span class="line">    processor_manager.terminate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Verify that all files were processed, and if so, deactivate DAGs that</span></span><br><span class="line">    <span class="comment"># haven't been touched by the scheduler as they likely have been</span></span><br><span class="line">    <span class="comment"># deleted.</span></span><br><span class="line">    all_files_processed = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> known_file_paths:</span><br><span class="line">        <span class="keyword">if</span> processor_manager.get_last_finish_time(file_path) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            all_files_processed = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> all_files_processed:</span><br><span class="line">        self.logger.info(<span class="string">"Deactivating DAGs that haven't been touched since &#123;&#125;"</span></span><br><span class="line">                         .format(execute_start_time.isoformat()))</span><br><span class="line">        models.DAG.deactivate_stale_dags(execute_start_time)</span><br><span class="line"></span><br><span class="line">    self.executor.end()</span><br><span class="line"></span><br><span class="line">    settings.Session.remove()</span><br></pre></td></tr></table></figure><p>内容有点长，主要可以分成这几部分</p><ul><li>处理前调度的特殊情况</li><li>调度和解析dag</li><li>执行task-instance </li><li>调度结束后处理</li></ul><p>先看调度前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">self.executor.start()</span><br><span class="line"></span><br><span class="line"> session = settings.Session()</span><br><span class="line"> self.logger.info(<span class="string">"Resetting state for orphaned tasks"</span>)</span><br><span class="line"> <span class="comment"># grab orphaned tasks and make sure to reset their state</span></span><br><span class="line"> active_runs = DagRun.find(</span><br><span class="line">     state=State.RUNNING,</span><br><span class="line">     external_trigger=<span class="literal">False</span>,</span><br><span class="line">     session=session,</span><br><span class="line">     no_backfills=<span class="literal">True</span>,</span><br><span class="line"> )</span><br><span class="line"> <span class="keyword">for</span> dr <span class="keyword">in</span> active_runs:</span><br><span class="line">     self.logger.info(<span class="string">"Resetting &#123;&#125; &#123;&#125;"</span>.format(dr.dag_id,</span><br><span class="line">                                               dr.execution_date))</span><br><span class="line">     self.reset_state_for_orphaned_tasks(dr, session=session)</span><br><span class="line"></span><br><span class="line"> session.close()</span><br><span class="line"></span><br><span class="line"> execute_start_time = datetime.now()</span><br><span class="line"></span><br><span class="line"> <span class="comment"># Last time stats were printed</span></span><br><span class="line"> last_stat_print_time = datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"> <span class="comment"># Last time that self.heartbeat() was called.</span></span><br><span class="line"> last_self_heartbeat_time = datetime.now()</span><br><span class="line"> <span class="comment"># Last time that the DAG dir was traversed to look for files</span></span><br><span class="line"> last_dag_dir_refresh_time = datetime.now()</span><br><span class="line"></span><br><span class="line"> <span class="comment"># Use this value initially</span></span><br><span class="line"> known_file_paths = processor_manager.file_paths</span><br></pre></td></tr></table></figure><p>这里会首先寻找dag-run，dag-run是dag每次执行生成的实例，通过dag-run清理之前调度器遗留下来的孤儿任务</p><p>除了孤儿任务，首先看调度前有哪些依然正常运行的任务</p><ol><li>dag-run有效同时task-instance还在调度中（schedue），这些可以直接被本次调度回收</li><li>dag-run有效同时task-instance还在进入队列中（queued），这些会被队列回收</li></ol><p>因为</p><h2 id="airflow2-0调度器部分"><a href="#airflow2-0调度器部分" class="headerlink" title="airflow2.0调度器部分"></a>airflow2.0调度器部分</h2><p>airflow2.0因为使用python3作为开发语言，因此在架构上使用了许多新的特性，同时整体的文件组织结构也发生了较大的变化</p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> airflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm安装记录</title>
      <link href="/2021/11/21/nvmfirst/"/>
      <url>/2021/11/21/nvmfirst/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近新装了一台PC，因此需要同步博客框架。然而时间过去太久，新安装的<code>nodejs</code>16版本太高，<code>hexo</code>暂时无法支持，没办法，只能选择寻找一个<code>nodejs</code>的版本控制工具，来实现<code>nodejs</code>的版本切换。</p><p><img src="/2021/11/21/nvmfirst/63901457_p0.png" alt="63901457_p0"></p><a id="more"></a><hr><h2 id="安装介绍"><a href="#安装介绍" class="headerlink" title="安装介绍"></a>安装介绍</h2><p>首先介绍一下什么是<code>nvm</code>:</p><p> <code>nvm</code>全名<code>node.js version management</code>，是一个<code>nodejs</code>的版本管理工具。这里是<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载地址</a>,windows就直接用<code>setup</code>版本最方便了，会自动注入环境变量。</p><blockquote><p>如果你的电脑里已经装了<code>nodejs</code>，也没有关系，至少最新版的nvm会自动检测并将你电脑里的<code>nodejs</code>加入自己的管理范围内，但是考虑到环境变量可能会发生变化，最好还是在干净的环境上从零开始装。</p></blockquote><blockquote><p>注意nvm管理的是<code>nodejs</code>版本，npm依然会使用默认的。如果是从nvm中安装的<code>nodejs</code>，默认的npm将是你第一个安装的<code>nodejs</code>附带</p></blockquote><p>安装过程非常简单</p><p><img src="/2021/11/21/nvmfirst/image-20211121230422120.png" alt="image-20211121230422120"></p><p>这里是nvm主要的安装位置，会放置核心的组件和安装的<code>nodejs</code>包</p><p><img src="/2021/11/21/nvmfirst/image-20211121230530483.png" alt="image-20211121230530483"></p><p>这里的路径是选择启动的<code>nodejs</code>包，实际上通过一个快捷方式链接得到。</p><p>安装完成之后输入以下命令，如果获得正确版本号说明安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure><p>安装完后nvm的目录结构如图</p><p><img src="/2021/11/21/nvmfirst/image-20211121231111226.png" alt="image-20211121231111226"></p><p>注意上面的文件夹就是具体下载安装的<code>nodejs</code>包</p><blockquote><p>再次提醒如果你在nvm安装之前已经安装<code>nodejs</code>，他的主体就会被移动到这里，这时最好再次检查一下环境变量是否还能正常生效</p></blockquote><p>接下来就是简单的安装配置环境，列一下命令清单即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里是常见命令</span></span><br><span class="line">nvm list   #查看已经安装的版本</span><br><span class="line">nvm list installed # 查看已经安装的版本</span><br><span class="line">nvm list available # 查看网络可以安装的版本</span><br><span class="line">nvm version # 查看当前的版本</span><br><span class="line">nvm install #  安装最新版本nvm</span><br><span class="line">nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line">nvm ls  # 列出所有版本</span><br><span class="line">nvm current    #显示当前版本</span><br><span class="line">nvm uninstall &lt;version&gt; #  卸载制定的版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里是其他的命令</span></span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line">nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm on # 打开`nodejs`控制</span><br><span class="line">nvm off # 关闭`nodejs`控制</span><br><span class="line">nvm proxy # 查看设置与代理</span><br><span class="line">nvm node_mirror [url] # 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://`nodejs`.org/dist/</span><br><span class="line">nvm npm_mirror [url] #  设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line">nvm use [version] [arch] #  切换制定的node版本和位数</span><br><span class="line">nvm root [path] #  设置和查看root路径</span><br></pre></td></tr></table></figure><p>如果正常安装生效的通过nvm ls 就可以看到效果：</p><p><img src="/2021/11/21/nvmfirst/image-20211121232204409.png" alt="image-20211121232204409"></p><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-之前已存在的nodejs安装nvm之后无法使用"><a href="#1-之前已存在的nodejs安装nvm之后无法使用" class="headerlink" title="1.之前已存在的nodejs安装nvm之后无法使用"></a>1.之前已存在的nodejs安装nvm之后无法使用</h3><p>一般都是路径问题，常见方法</p><ol><li>检查环境变量</li><li>在C盘的用户名文件夹下删除<code>.npmrc</code>，实际就是类似于删除缓存</li></ol><p>如果无法解决问题再具体看报错信息具体分析</p><h3 id="2-nvm运行use命令时报错exit-status-1-��u���㹻��E��ִ�д˲�����"><a href="#2-nvm运行use命令时报错exit-status-1-��u���㹻��E��ִ�д˲�����" class="headerlink" title="2.nvm运行use命令时报错exit status 1: ��û���㹻��Ȩ��ִ�д˲�����"></a>2.nvm运行use命令时报错exit status 1: ��û���㹻��Ȩ��ִ�д˲�����</h3><p><img src="/2021/11/21/nvmfirst/image-20211121233842672.png" alt="image-20211121233842672"></p><p>主要是管理员权限的问题，如果安装文件夹需要管理员权限，执行的<code>cmd</code>又没有管理员模式，就会出现这样的问题</p><p>解决方法也很简单，用管理员方式执行<code>cmd</code>或者安装的时候注意不要安装到管理员权限的目录中即可</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个关灯神器</title>
      <link href="/2021/11/21/smart-switch/"/>
      <url>/2021/11/21/smart-switch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2021/11/21/smart-switch/89968294_p0.jpg" alt="89968294_p0"></p><p>自从租房之后，生活环境发生了很大的变化。其实大部分的变化我尚且还算满意，但每当晚上躺在床上玩手机的时候，当困意袭来时，心里总是非常郁闷：我在这边，灯的开关在床的那边。没办法，只得再度下床关灯，再摸黑爬上床——此时睡意早已消失（大哭</p><p>于是，我想到了关灯神器——远程操控开关关灯。</p><a id="more"></a><hr><h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>因为只是想做一个解放双手的小玩具，自然没有打算做的非常复杂。鉴于家里的开关设计（如下图），只需要一个可以通电左右摇摆的舵机即可，给予一定的电信号，就物理控制开关上下拨动</p><p><img src="/2021/11/21/smart-switch/u=2165159047,3614293207&fm=26&fmt=auto-16375971964056.jpeg" alt="img"></p><p>方案很简单，只需要一块单片机和一个舵机就可以，考虑到拨动开关所需的强度，如果开关很硬可以考虑提供额外的电源供电来保持舵机输出功率。好在家里的开关还算听话（勉强刚刚好，鬼知道我调整了多少次角度和高度），这次就不额外添加配件了。</p><p>参考B站的诸多”关灯神器”<a href="https://www.bilibili.com/video/BV1W3411y7PU/?spm_id_from=333.788.recommend_more_video.3" target="_blank" rel="noopener">视频</a>, 这里单片机选用了esp8266，类似下图</p><p><img src="/2021/11/21/smart-switch/O1CN01vkRl1M29DcaqAmXTW_!!699018034.jpg" alt="img"></p><p>舵机则是使用了<code>sg90</code>：</p><p><img src="/2021/11/21/smart-switch/O1CN01p2GPB51OVDsOM7YnL_!!361121710.jpg" alt="img"></p><p>总成本不到20元…</p><p>(Ps:网上淘宝现成的开关神器换个马甲，多装个模块就能卖百来块…可见其中的利润空间，咱们理工男可不能被这种骗了钱去~)</p><p>剩下就是控制方案</p><p>常见的必然是手机app控制，这里必须借助第三方提供，自己写app也不是不可以，主要是不想徒增学习成本（说白了还是懒😂），连接方法有蓝牙、WiFi，这里可以看自己的开发板需求。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>既然搞定了方案，接下来进行实践环节！</p><h3 id="硬件实现"><a href="#硬件实现" class="headerlink" title="硬件实现"></a>硬件实现</h3><p>硬件方面很简单，注意看卖家给的引脚图不要插错即可。</p><p><img src="/2021/11/21/smart-switch/image-20211122002407365.png" alt="image-20211122002407365"></p><p><img src="/2021/11/21/smart-switch/image-20211122002447280.png" alt="image-20211122002447280"></p><p>注意观察，如果发现线序不对，可能需要自己拆下舵机的线材固定器更改线序。运气很好，我买的不需要，就直接插上连PC就行了</p><h3 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h3><p>这里需要用到软件和安装包如下</p><p><img src="/2021/11/21/smart-switch/image-20211122003055867.png" alt="image-20211122003055867"></p><ol><li>8266开发板的配置包</li><li>开发板开发软件</li><li>blink电灯科技第三方应用的适配库文件</li><li>COM串口驱动</li></ol><h4 id="安装arduino"><a href="#安装arduino" class="headerlink" title="安装arduino"></a>安装arduino</h4><p>首先安装arduino，直接无脑next即可</p><p>安装完成后打开arduino，界面如图：</p><p><img src="/2021/11/21/smart-switch/image-20211122003443664.png" alt="image-20211122003443664"></p><h4 id="导入ESP8266配置包"><a href="#导入ESP8266配置包" class="headerlink" title="导入ESP8266配置包"></a>导入ESP8266配置包</h4><p>首先打开Arduino IDE菜单 &gt; 文件 &gt;首选项，在 <strong>附加开发板管理器网址</strong> 输入框中，填入以下网址：<code>https://www.arduino.cn/package_esp8266com_index.json</code> </p><p><img src="/2021/11/21/smart-switch/image-20211122003558865.png" alt="image-20211122003558865"></p><p>然后点击文件夹中的配置包：</p><img src="/2021/11/21/smart-switch/image-20211122003654491.png" alt="image-20211122003654491" style="zoom:25%;"><p>导入配置。</p><h4 id="安装三方库文件"><a href="#安装三方库文件" class="headerlink" title="安装三方库文件"></a>安装三方库文件</h4><p><img src="/2021/11/21/smart-switch/image-20211122003953235.png" alt="image-20211122003953235"></p><p>添加库中添加<code>blinker-library-0.3.80210803.zip</code></p><h4 id="配置开发板"><a href="#配置开发板" class="headerlink" title="配置开发板"></a>配置开发板</h4><p>接下来新建文件-&gt; 保存一下 -&gt;如下图配置开发板信息</p><p><img src="/2021/11/21/smart-switch/image-20211122003807420.png" alt="image-20211122003807420"></p><p>如果没有<code>8266</code>开发选项，如下图，搜索<code>8266</code>，安装上图对应<code>module</code></p><p><img src="/2021/11/21/smart-switch/image-20211122004307352.png" alt="image-20211122004307352"></p><p>接下来就是编写代码,这边已经提供好了一个模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLINKER_MIOT_LIGHT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Servo myservo;<span class="comment">//定义舵机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> auth[] = <span class="string">"xxxxxxxx"</span>;  <span class="comment">//点灯Key</span></span><br><span class="line"><span class="keyword">char</span> ssid[] = <span class="string">"SELF-WIFI"</span>;      <span class="comment">//wifi名称</span></span><br><span class="line"><span class="keyword">char</span> pswd[] = <span class="string">"password"</span>;     <span class="comment">//wifi密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建组件对象，注意这里的名称要和电灯科技app里保持一致</span></span><br><span class="line"><span class="function">BlinkerButton <span class="title">Button1</span><span class="params">(<span class="string">"test"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意如果接入小爱同学，其监听的就是这个电源事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">miotPowerState</span><span class="params">(<span class="keyword">const</span> String &amp; state)</span><span class="comment">//电源类操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">"need set power state: "</span>, state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state == BLINKER_CMD_ON) &#123;</span><br><span class="line">      </span><br><span class="line">        myservo.write(<span class="number">150</span>);<span class="comment">//收到“on”的指令后舵机旋转150度</span></span><br><span class="line">        BlinkerMIOT.powerState(<span class="string">"on"</span>);</span><br><span class="line">        BlinkerMIOT.print();<span class="comment">//反馈状态</span></span><br><span class="line">        delay(<span class="number">1000</span>);<span class="comment">//延时1秒</span></span><br><span class="line">        myservo.write(<span class="number">90</span>);<span class="comment">//舵机归零，回到垂直状态</span></span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF) &#123;</span><br><span class="line">      </span><br><span class="line">         myservo.write(<span class="number">30</span>);            <span class="comment">//舵机偏转30°</span></span><br><span class="line">         BlinkerMIOT.powerState(<span class="string">"off"</span>);</span><br><span class="line">         BlinkerMIOT.print();</span><br><span class="line">         delay(<span class="number">1000</span>);</span><br><span class="line">         myservo.write(<span class="number">90</span>);</span><br><span class="line">         </span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按下按键即会执行该函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">button1_callback</span><span class="params">(<span class="keyword">const</span> String &amp; state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">"get button state: "</span>, state);</span><br><span class="line">    <span class="keyword">if</span> (state==<span class="string">"on"</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        myservo.write(<span class="number">170</span>);<span class="comment">//收到“on”的指令后舵机旋转150</span></span><br><span class="line">        delay(<span class="number">1000</span>);<span class="comment">//延时</span></span><br><span class="line">        myservo.write(<span class="number">90</span>);<span class="comment">//舵机归零垂直</span></span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state==<span class="string">"press"</span>||state==<span class="string">"tap"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       myservo.write(<span class="number">10</span>);<span class="comment">//长按开关按键后舵机旋转10</span></span><br><span class="line">       delay(<span class="number">1000</span>);<span class="comment">//延时</span></span><br><span class="line">       myservo.write(<span class="number">90</span>);<span class="comment">//舵机归零垂直(90度)</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未绑定的组件被触发，则会执行其中内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dataRead</span><span class="params">(<span class="keyword">const</span> String &amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">"Blinker readString: "</span>, data);</span><br><span class="line">    counter++;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化串口</span></span><br><span class="line">    Serial.begin(<span class="number">115200</span>);</span><br><span class="line">    BLINKER_DEBUG.stream(Serial);</span><br><span class="line">    <span class="comment">// 初始化舵机</span></span><br><span class="line">    myservo.attach(<span class="number">2</span>);<span class="comment">//舵机的IO口，nodemcu的D4口</span></span><br><span class="line">    myservo.write(<span class="number">90</span>);<span class="comment">//上电时舵机归零垂直</span></span><br><span class="line">  BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化blinker</span></span><br><span class="line">    Blinker.begin(auth, ssid, pswd);</span><br><span class="line">    Blinker.attachData(dataRead);</span><br><span class="line"></span><br><span class="line">    Button1.attach(button1_callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">"Blinked running..."</span>);</span><br><span class="line">    Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，只需要点击左上角编译通过就完成了。</p><p>如果编译没有问题，接下来就需要将程序上传到开发板上。首先注意下图端口，经过之前安装com端口驱动，理论上这边端口可以正常显示</p><p><img src="/2021/11/21/smart-switch/image-20211122221850553.png" alt="image-20211122221850553"></p><p>如果不能，查看设备管理器看是否端口正常显示。</p><p><img src="/2021/11/21/smart-switch/image-20211122221934991.png" alt="image-20211122221934991"></p><h3 id="安装APP"><a href="#安装APP" class="headerlink" title="安装APP"></a>安装APP</h3><p>还记得代码里的<code>key</code>吗？接下来就是下载电灯科技APP并申请<code>key</code></p><p><img src="/2021/11/21/smart-switch/image-20211122223606482.png" alt="image-20211122223606482"></p><p>一般应用市场都有，如果没有的话可以去<a href="https://www.diandeng.tech/home" target="_blank" rel="noopener">官网</a>下.</p><h4 id="注册设备"><a href="#注册设备" class="headerlink" title="注册设备"></a>注册设备</h4><p>下载并注册点灯科技账号之后，在右上角加号-&gt;独立设备-&gt; 网络接入</p><p><img src="/2021/11/21/smart-switch/image-20211122223926556.png" alt="image-20211122223926556"></p><p>一般推荐阿里云 接入，但是我目前的版本只能接入点灯科技服务，实测无论是控制还是接入小爱同学都没有影响，这里就看大家选择。</p><p><img src="/2021/11/21/smart-switch/image-20211122224104935-16375920710875.png" alt="image-20211122224104935"></p><p>完成设备注册后如上图所示，这时你会获取一个<code>key</code>，填入代码中即可。</p><h4 id="开发界面"><a href="#开发界面" class="headerlink" title="开发界面"></a>开发界面</h4><p>这里大家就可以按照代码中发信指引自己制作开关界面。我这边在网上找到一份简单的界面配置文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;¨config¨&#123;¨headerColor¨¨transparent¨¨headerStyle¨¨dark¨¨background¨&#123;¨img¨¨assets/img/headerbg.jpg¨¨isFull¨«&#125;&#125;¨dashboard¨|&#123;¨type¨¨btn¨¨ico¨¨fad fa-lightbulb-on¨¨mode¨Ê¨t0¨¨开灯¨¨t1¨¨文本2¨¨bg¨Ì¨cols¨Í¨rows¨Í¨key¨¨test¨´x´Ë´y´Ì¨speech¨|÷¨cus¨¨on¨¨lstyle¨Ë¨clr¨¨#076EEF¨&#125;&#123;ßAßBßC¨fad fa-lightbulb¨ßEÉßF¨关灯¨ßHßIßJÌßKÍßLÍßMßN´x´Ë´y´ÑßO|÷ßRËßSßT&#125;&#123;ßA¨deb¨ßEÉßJÉßKÑßLÌßM¨debug¨´x´É´y´¤D&#125;÷¨actions¨|¦¨cmd¨¦¨switch¨‡¨text¨‡ßQ¨打开?name¨¨off¨¨关闭?name¨—÷¨triggers¨|&#123;¨source¨ßa¨source_zh¨¨开关状态¨¨state¨|ßQßd÷¨state_zh¨|¨打开¨¨关闭¨÷&#125;÷&#125;</span><br></pre></td></tr></table></figure><p>将这份文件导入到配置信息即可。（上面的乱码是真的（汗））</p><p>导入后配置如下：</p><p><img src="/2021/11/21/smart-switch/image-20211122231307946.png" alt="image-20211122231307946"></p><p>接下来就可以自己操控查看配置情况了。</p><h2 id="接入小爱同学"><a href="#接入小爱同学" class="headerlink" title="接入小爱同学"></a>接入小爱同学</h2><p>接入小爱同学其实很简单，就看第三方服务方提不提供支持</p><p>米家-&gt;接入其他设备-&gt;点灯科技-&gt;同步配置即可</p><h2 id="设备安装"><a href="#设备安装" class="headerlink" title="设备安装"></a>设备安装</h2><p>这一步在实际操作中反倒是最难的，因为每个人情况不同，按钮的强度也不一样，我一开始还是非常担心舵机的功率可能不足以拨动开关的。实际上确实在尝试了很多角度之后总是无法成功实现。</p><p>曾经尝试过给舵机扇叶进行延长增大接触面积，但是这些方案最终没有一个很好的实现。最后我尝试回归起点，通过垫高舵机，使得扇叶和开关产生一定的间隔，这样在扇叶旋转的时候，会有一个惯性辅助用力。接着使用纸板和502将舵机固定，并用透明胶在外层进行二次辅助固定，最终总算实现了开关的正常拨动（虽然有的时候还是不太灵敏）</p><p>最终实现图如下：</p><p><img src="/2021/11/21/smart-switch/E7SKR8UK$16%60M55RVC%5D9E7.jpg" alt="img"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>这里给出一个<a href="https://www.bilibili.com/video/BV1K44y1Y7uK/" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调试的一次经历</title>
      <link href="/2021/11/07/jvm-commands/"/>
      <url>/2021/11/07/jvm-commands/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-FgwsBBeK" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-FgwsBBeK"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "少年少女",              author: "银杏BOYZ",              url: "https://sharefs.ali.kugou.com/202111211220/2e649d44aa9f0a556b475deead519772/KGTX/CLTX001/9073bdd808ac142de731f73d28aa9f74.mp3",              pic: "http://y.qq.com/music/photo_new/T002R300x300M000002fLaUt1Pydsn_2.jpg?max_age=2592000",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><blockquote><p>像是经历了一次漂流，最终依然要选择回归现实</p></blockquote><img src="/2021/11/07/jvm-commands/2772438ff8f3977c7e64456975d5cd4b6139c6fc.jpg@942w_1292h_progressive.webp" style="zoom:50%;"><p>记录一次工作中遇到的GC分配失败问题</p><a id="more"></a><p>之前在工作中遇到一次IO占用异常的情况，通过<code>iotop</code>查看IO占用最高的进程，发现都是业务相关的java进程,于是通过查阅<code>gc.log</code>发现了类似如下的异常（图源网络，当场场景已不可复现, 当时场景与下图几乎类似）</p><p><img src="https://img-blog.csdn.net/20181012170445536?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pjMTk5MjEyMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>问题最关键的是异常一直在输出，这让人不由得怀疑业务逻辑中存在的问题，事实上，通过这些，导致问题的原因其实已经能比较容易就能联想到，但是，本着务实求真（大雾）的态度，还是要细细了解其中出现的个中缘由</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>既然看到了内存分配的字样，我们首先自然得先复习一下JVM内存分配的基础概念。</p><p>我们知道，JVM中采用分代的内存分配策略，将java堆分成了新生代，老年代。仔细分的话，新生代又能分成eden区和survivor区（分为0和1两个区域，这也是为了更好的进行垃圾回收，比如使用复制算法）</p><p><img src="https://snailclimb.gitee.io/javaguide/docs/java/jvm/pictures/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/01d330d8-2710-4fad-a91c-7bbbfaaefc0e.png" alt="img"></p><p>一个对象从创建之初就有两种选择</p><ul><li>小对象进入新生代</li><li>大对象进入老年代</li></ul><p>我们以小对象举例，在进入新生代后，对象首先会被分配到<code>eden</code>区，在这个过程中，就会经历到垃圾回收（<code>GC</code>）。<code>GC</code>又分为<code>minor GC</code>和<code>fullGC</code>（还有<code>major GC</code>，这里不作解释，通常可以认为是<code>fullGC</code>等价）<code>minorGC</code>仅进行新生代范围的垃圾回收，因为范围少，所以回收快，一般不会对执行中的进程 造成很大影响（视收集器算法而不同，<code>minor GC</code>也会暂停线程工作，导致<code>STW</code>），当<code>eden</code>区满后，就会执行一次<code>minorGC</code>， 经过一次<code>minorGC</code>之后，如果对象存活，就会进入<code>survivor</code>区</p><p><code>survivor</code>区的对象存活时间会稍长，因为当存活对象经历了数次GC之后（默认是<code>15</code>次，每进行一次对象年龄+1），对象才会进入老年代。</p><p>大对象和经历数次回收的对象存活在老年代，这里区域很大，数据变动也不频繁，代价就是垃圾回收的时候影响很大。如果老年代区域空间占满导致<code>full GC</code>，就会<code>stop the world</code>（暂停当前所有线程工作，会影响任务执行）</p><p>至此，一个对象从出生到死亡的整个过程就结束了。现在回到开始，我们可以通过查看<code>gc.log</code>来观察对象内存分配情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [ParNew: 367523K-&gt;1293K(410432K), 0.0023988 secs] 522739K-&gt;156516K(1322496K), 0.0025301 secs] [Times: user=0.04 sys=0.00, real=0.01 secs]</span><br></pre></td></tr></table></figure><p>这是其中一条记录。我们分别看看这些参数代表什么含义：</p><p><strong>GC</strong>：代表进行了一次垃圾回收，前面没有<code>full</code>修饰，说明是<code>minor GC</code>，因此单论这次<code>GC</code>，本身不会对任务造成太大影响·</p><p><strong>Allocation Failure</strong>: 结合上面的<code>minor GC</code>可以得出此次内存分配失败是新生代没有足够的空间导致的，因此会触发<code>minor GC</code>，让部分对象进入老年代</p><p><strong>parNew</strong> 说明这次<code>GC</code>发生在新生代，同时使用的收集器是<code>parNew</code>收集器，<code>ParNew</code>是一个<code>Serial</code>收集器的多线程版本，会使用多个<code>CPU</code>和线程完成垃圾收集工作，该收集器采用复制算法回收内存，期间会停止其他工作线程,造成<code>STW</code>。</p><p>之后的参数代表 <code>GC前内存区域使用容量-&gt;GC后内存区域使用容量(内存区总容量)</code> 后面的时间代表耗时</p><p>接着又是一组数据，代表<code>堆区垃圾回收前的大小-&gt;堆区垃圾回收后的大小(堆区总大小)</code> 以及该内存区域<code>GC</code>耗时</p><p>最后的<code>Times</code>则是总耗时，分别代表 <code>用户态耗时 内核态耗时 总耗时</code></p><p>分析下可以得出结论：</p><ul><li>该次<code>GC</code>新生代减少了<code>367523-1293=366239K</code></li><li><code>Heap</code>区总共减少了<code>522739-156516=366223K</code></li></ul><p><code>366239 – 366223 =16K</code>，说明该次共有<code>16K</code>内存从年轻代移到了老年代，可以看出来数量并不多，说明都是生命周期短的对象，只是这种对象有很多。</p><p>我们需要的是尽量避免<code>Full GC</code>的发生，让对象尽可能的在年轻代就回收掉，所以这里可以稍微增加一点年轻代的大小，让那<code>17K</code>的数据也保存在年轻代中。</p><p>(这里介绍几个修改JVM的参数)</p><h2 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h2><p>这里针对排查<code>java</code>出现的异常，做一下简单的命令行记录。</p><p><code>jdk</code>内置了若干命令行工具，这些命令在 <code>JDK</code>安装目录下的 <code>bin</code>目录下：</p><ul><li><strong><code>jps</code></strong> (JVM Process Status）: 类似 <code>UNIX</code>的 <code>ps</code> 命令。用户查看所有 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息；</li><li><strong><code>jstat</code></strong>（ JVM Statistics Monitoring Tool）: 用于收集 <code>HotSpot</code>虚拟机各方面的运行数据;</li><li><strong><code>jinfo</code></strong> (Configuration Info for Java) : 显示虚拟机配置信息;</li><li><strong><code>jmap</code></strong> (Memory Map for Java) :生成堆转储快照;</li><li><strong><code>jhat</code></strong> (JVM Heap Dump Browser ) : 用于分析 <code>heapdump</code>文件，它会建立一个 HTTP/HTML 服务器，让用户可以在浏览器上查看分析结果;</li><li><strong><code>jstack</code></strong> (Stack Trace for Java):生成虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合。</li></ul><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一 <code>ID</code>（<code>Local Virtual Machine Identifier,LVMID</code>）</p><p><strong>*注意：必须要在进程执行的对应用户权限下操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SnailClimb&gt;jps</span><br><span class="line">7360 NettyClient2</span><br><span class="line">17396</span><br><span class="line">7972 Launcher</span><br><span class="line">16504 Jps</span><br><span class="line">17340 NettyServer</span><br></pre></td></tr></table></figure><p>参数</p><p><code>jps -l</code>：输出主类的全名，如果进程执行的是 <code>Jar</code>包，输出 <code>Jar</code>路径</p><p><code>jps -q</code>：只输出进程的本地虚拟机唯一 <code>ID</code></p><p><code>jps -v</code> : 输出虚拟机进程启动时候<code>JVM</code>参数</p><p><code>jps -m</code>： 输出传递给<code>main</code>函数的参数·</p><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>使用于监视虚拟机各种运行状态信息的命令行工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure><ul><li><code>jstat -class vmid</code> ：显示 <code>ClassLoader</code>的相关信息；</li><li><code>jstat -compiler vmid</code> ：显示 <code>JIT</code>编译的相关信息；</li><li><code>jstat -gc vmid</code> ：显示与 <code>GC</code> 相关的堆信息；</li><li><code>jstat -gccapacity vmid</code> ：显示各个代的容量及使用情况；</li><li><code>jstat -gcnew vmid</code> ：显示新生代信息；</li><li><code>jstat -gcnewcapcacity vmid</code> ：显示新生代大小与使用情况；</li><li><code>jstat -gcold vmid</code> ：显示老年代和永久代的信息；</li><li><code>jstat -gcoldcapacity vmid</code> ：显示老年代的大小；</li><li><code>jstat -gcpermcapacity vmid</code> ：显示永久代大小；</li><li><code>jstat -gcutil vmid</code> ：显示垃圾收集信息；</li><li><code>jstat -t</code> : 在输出信息上加一个 <code>Timestamp</code>列，显示程序的运行时间。</li></ul><h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p>输出当前 <code>jvm</code> 进程的全部参数和系统属性 (第一部分是系统的属性，第二部分是 JVM 的参数)。</p><p><strong>*使用 jinfo 可以在不重启虚拟机的情况下，可以动态的修改 jvm 的参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SnailClimb&gt;jinfo  -flag MaxHeapSize 17340</span><br><span class="line">-XX:MaxHeapSize=2124414976</span><br><span class="line">C:\Users\SnailClimb&gt;jinfo  -flag PrintGC 17340</span><br><span class="line">-XX:-PrintGC</span><br></pre></td></tr></table></figure><p><code>jinfo -flag [+|-]name vmid</code> : 开启或者关闭对应名称的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SnailClimb&gt;jinfo  -flag  PrintGC 17340</span><br><span class="line">-XX:-PrintGC</span><br><span class="line"></span><br><span class="line">C:\Users\SnailClimb&gt;jinfo  -flag  +PrintGC 17340</span><br><span class="line"></span><br><span class="line">C:\Users\SnailClimb&gt;jinfo  -flag  PrintGC 17340</span><br><span class="line">-XX:+PrintGC</span><br></pre></td></tr></table></figure><h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>用于生成堆转储快照<code>.dump</code>文件，除此之外生成<code>dump</code>文件的方法还有</p><ul><li><code>-XX:+HeapDumpOnOutOfMemoryError</code> 参数让虚拟机在 <code>OOM</code>异常出现之后自动生成 <code>dump</code>文件</li><li><code>Linux</code>命令下可以通过 <code>kill -3</code> 发送进程退出信号也能拿到 <code>dump</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SnailClimb&gt;jmap -dump:format=b,file=C:\Users\SnailClimb\Desktop\heap.hprof 17340</span><br><span class="line">Dumping heap to C:\Users\SnailClimb\Desktop\heap.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><h3 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h3><p>用于分析 <code>heapdump</code>文件，它会建立一个<code>HTTP/HTML</code>服务器，让用户可以在浏览器上查看分析结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SnailClimb&gt;jhat C:\Users\SnailClimb\Desktop\heap.hprof</span><br><span class="line">Reading from C:\Users\SnailClimb\Desktop\heap.hprof...</span><br><span class="line">Dump file created Sat May 04 12:30:31 CST 2019</span><br><span class="line">Snapshot read, resolving...</span><br><span class="line">Resolving 131419 objects...</span><br><span class="line">Chasing references, expect 26 dots..........................</span><br><span class="line">Eliminating duplicate references..........................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure><h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>用于生成虚拟机当前时刻的线程快照。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合.</p><p>·查找耗时时间长的线程的通用方法：</p><ol><li>使用<code>jps</code>查找出<code>java</code>进程的<code>pid</code>，如<code>7777</code><br>或<code>ps -ef | grep java</code></li><li>使用<code>top -p 7777</code>观察进程情况，然后<code>Shift+h</code>,显示该进程的所有线程。</li><li>找出<code>CPU</code>消耗较多的线程``id<code>，如</code>7788<code>，将</code>7788<code>转换为16进制</code>0x1e6c`，注意是小写。</li><li>使用<code>jstack 7777 | grep -A 10 0x1e6c</code>来查询出具体的线程状态。<br><code>-A 10</code>表示查找到所在行的后<code>10</code>行</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>现在有了这些知识储备，相信解决一些常见问题应该不会无从下手了。现在返回到最上面的问题。当时出现了一直打印内存失败的信息，首先判断出这是<code>minor ``GC</code>，如果出现频率低那可以暂时不用考虑，属于正常现象；但是依然需要去思考优化如何减少<code>GC</code>。这次的问题在于一直在有对象进入老年代，可见如果持续i下去，内存必然占满。因此，很可能是代码逻辑出现了问题，例如死循环等，让任务一直不断执行，不断生成新对象，消灭老对象。最后查看代码逻辑，果然定位到了问题所在。</p><p>当然，如果是经验丰富的老手一定能在第一时间判断出问题的根源。但是我依然还在不断学习，还是需要通过记录的方式，总结经验，提升能力。</p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一回家小记</title>
      <link href="/2021/10/04/october_first/"/>
      <url>/2021/10/04/october_first/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>感觉就像一场梦。</p><p>自己推箱子出门的记忆仿佛就在昨天，而这两天在家里和家人团聚的感觉却是那样朦胧，缺乏实感。</p><p>母亲的唠叨一如既往，父亲的后背依然可靠，回到家，感觉自己毫无长大，依然是个需要依赖的孩子</p><p>有的时候，还是需要停下来，思考一下现实，回味一会儿过去，让失去理智的大脑重新冷静下来，然后才能明白自己想要做什么，将要做什么，才不会在最关键的时刻，失去了机会，迷失了方向。</p>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于js运行机制的简单理解</title>
      <link href="/2020/06/01/js-runtime/"/>
      <url>/2020/06/01/js-runtime/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-LXEIYhoW" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-LXEIYhoW"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "青い栞",              author: "Galileo Galilei",              url: "http://music.163.com/song/media/outer/url?id=417613399.mp3",              pic: "http://p1.music.126.net/IMAMMCzMU7InvJhLD7U4xA==/3393092891197502.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p><img src="http://cdn.zblade.top/qiniu_img/illust_78075718_20200601_215515.png" alt></p><p>最近在学前端基础，今天梳理一下<code>javascript</code>的运行机制</p><p>只是简单理解，完全没入门那种~</p><a id="more"></a><p>首先必须记录的事<code>Javascript</code>是单线程的，目的是简化和用户的交互逻辑，从而不会出现严重的并发问题。</p><p>但是<code>js</code>脚本可以创建多个线程，但是创建的子线程受到主线程控制，同时不能操作<code>DOM</code>。</p><h2 id="相关进程和线程"><a href="#相关进程和线程" class="headerlink" title="相关进程和线程"></a>相关进程和线程</h2><p>在浏览器中加载页面主要用到4个进程：</p><ol><li>主进程：（<code>Browser</code>进程）负责页面展示和资源下载等</li><li><code>GPU</code>进程：负责<code>3D</code>图示绘图</li><li>第三方插件进程：负责第三方插件的处理</li><li>渲染进程：（<code>Render</code>进程），负责<code>js</code>执行，页面渲染等功能</li></ol><p>其中渲染进程中又包括：</p><ul><li><code>GUI</code>渲染进程</li><li><code>Js</code>引擎线程</li><li>事件循环线程</li><li>定时器线程</li><li><code>http</code>异步线程</li><li>…</li></ul><p>这里主要看渲染进程的相关线程</p><h3 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h3><p>主要处理的事情包括：</p><ol><li>首先浏览器会解析<code>html</code>代码（实际上html代码本质是字符串）转化为浏览器认识的节点，生成<code>DOM</code>树，也就是<code>DOM Tree</code></li><li>然后解析<code>css</code>，生成<code>CSSOM</code>（<code>CSS</code>规则树）</li><li>把<code>DOM Tree</code> 和<code>CSSOM</code>结合，生成<code>Rendering Tree</code>(渲染树)</li></ol><blockquote><p>注意其中存在重绘和回流：</p><p>如果修改了一些元素的颜色或者背景色，页面就会重绘（<code>Repaint</code>），如果修改元素的尺寸，页面就会回流（<code>Reflow</code>），当页面需要<code>Repaing</code>和<code>Reflow</code>时GUI多会执行，进行页面绘制。</p></blockquote><h3 id="Js引擎线程"><a href="#Js引擎线程" class="headerlink" title="Js引擎线程"></a>Js引擎线程</h3><p>负责解析和执行<code>js</code>代码，浏览器同时只能有一个<code>JS</code>引擎线程在运行<code>JS</code>程序，所以<code>js</code>是单线程运行的。</p><p><strong>Js线程会阻塞渲染线程</strong>，因此<code>&lt;script&gt;</code>标签和其他DOM标签是顺序执行的，一旦执行到<code>&lt;script&gt;</code>标签就会立即执行,所以一般我们把<code>&lt;script&gt;</code>标签放在·<code>body</code>的最后</p><h3 id="事件循环线程"><a href="#事件循环线程" class="headerlink" title="事件循环线程"></a>事件循环线程</h3><p>用来控制事件的循环，维护和管理一个任务队列（<code>task queue</code>）。</p><p>下面会讲到关于事件队列的用法</p><h3 id="定时器线程"><a href="#定时器线程" class="headerlink" title="定时器线程"></a>定时器线程</h3><p>单独用来计时，计时完成将定时器执行的操作添加到事件任务队列尾。</p><h3 id="异步请求线程"><a href="#异步请求线程" class="headerlink" title="异步请求线程"></a>异步请求线程</h3><p>执行到一个<code>http</code>异步请求时，便把异步请求事件添加到异步请求线程，等待响应；并把回调函数添加到事件队列，等待js引擎线程执行</p><h2 id="Eventloop"><a href="#Eventloop" class="headerlink" title="Eventloop"></a>Eventloop</h2><p><code>Eventloop</code>其实是<code>Js</code>的执行机制，表示了线程之间的协作关系</p><p>因为js是单线程，因此任务的执行只能顺序执行，为了将耗时的任务分离出来，在js中实现了两种任务类型，<strong>同步任务</strong>和<strong>异步任务。</strong></p><ul><li>所有同步任务在主线程上执行，形成执行栈</li><li>任务队列（task queue，就是由事件循环线程维护）负责存放异步任务的运行结果</li><li>执行栈的同步任务执行完成后会读取任务队列，将对应的异步任务加入执行栈执行</li><li>上述操作不断循环往复</li></ul><p>诸如此图</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="Event Loop"></p><blockquote><p>注意一句话:</p><p><code>javascript</code>的执行和运行有很大的区别，<code>javascript</code>在不同的环境下，比如<code>node</code>，浏览器，<code>Ringo</code>等等，执行方式是不同的。而运行大多指<code>javascript</code>解析引擎，是统一的。</p></blockquote><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器是一个相当特殊的存在，任务队列中不仅可以放普通事件，也可以放定时事件。</p><p>主要由<code>setTimeout()</code>和<code>setInterval()</code>两个函数完成</p><p>值得注意的是</p><ol><li><p>定时器不会完全按照规定时间执行</p><ul><li>W3C标准规定<code>setTimeout</code>中最小的时间周期是4毫秒，凡是低于4ms的时间间隔都按照4ms来处理。因此代码不会完全精确按照所定时间执行</li><li>主线程执行到定时器后，会把定时任务交给定时器线程执行，等到时间了，定时器所要执行的操作会放到任务队列末尾，因此不一定立即执行</li></ul></li><li><p><code>setInterval</code>存在累计效应：如果定时器里面的代码执行所需的时间大于定时器的执行周期，会导致有些事件丢失</p><p>可以使用<code>setTimeout()</code>代替<code>setInterval()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(say, <span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(say, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ol><p>剩下的以后再总结…</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a></p><p><a href="https://segmentfault.com/a/1190000013119813" target="_blank" rel="noopener">js运行原理与机制</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次跨域问题</title>
      <link href="/2020/06/01/cors/"/>
      <url>/2020/06/01/cors/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-mXNILFmB" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-mXNILFmB"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "没那么简单",              author: "黄小琥",              url: "http://music.163.com/song/media/outer/url?id=478384.mp3",              pic: "http://cdn.zblade.top/qiniu_img/image-20200601171805737.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601171805737.png" alt></p><p>最近在做前后端交互的时候遇到了特殊的跨域问题。其实自己平时做项目的时候也多多少少处理过跨域问题，但是这次情况特殊。正好借此机会将跨域问题的解决方法做一下总结，以备不时之需。</p><a id="more"></a><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>自己前段时间在学习前端，所以想趁着这个机会自己搞个小工具玩玩。所以就有了如下这个极其简陋的弹幕网站。</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601150002198.png" alt></p><p>为了实现弹幕的持久保存，自己尝试前后端交互将弹幕存储在数据库中，然后前端每间隔一段时间就从后台拉取一次数据。</p><p>实现其实比较简单，但是当我在本地开始测试向后台发送请求的时候，问题出现了：</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601150333604.png" alt></p><p>很明显这是一个跨域问题，所以接下来我们就要动用我们所学的知识去解决它。</p><p>首先第一步，分析问题原因：什么是跨域？</p><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><blockquote><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源</p></blockquote><p>跨域其实不是什么bug，而是由于浏览器为了安全起见指定了一系列“同源策略”，这些同源策略可以保证用户信息的安全，防止被恶意的网站窃取数据。</p><p>该政策限制网页的某些行为必须限制在与自己“同源”的网页中才能进行，如果不是同源，就会导致该行为无法生效，也就是跨域失败。</p><p>这里出现了两个概念，一个是<mark><strong>同源</strong></mark>，一个是<mark><strong>跨域行为</strong></mark></p><p>同源的定义包含三个方面</p><blockquote><ol><li>协议相同</li><li>域名相同</li><li>端口相同</li></ol></blockquote><p>只有三个条件都满足，才能认定两个网页是”同源“</p><p>跨域行为（自己定义的名词，大概就是我们会被同源政策影响到的操作）随着互联网的发展，范围变得越来越宽泛，一般我们常见的跨域行为包括</p><blockquote><ul><li>获取 Cookie、LocalStorage 和 IndexDB</li><li>获得DOM和JS对象</li><li>AJAX请求</li></ul></blockquote><p>我们可以看到在前后端交互中最常见的AJAX请求也赫然在列，在前后端交互中解决跨域问题的不可避免的。</p><p><strong>那为什么要定义同源策略呢？没有跨域限制不是更好吗？</strong></p><p>如果没有跨域限制，网页将很容易受到XSS、CSRF等攻击，因为没有限制，恶意网站同样可以自由地发起攻击，这将大大提高网站的维护成本。因此，同源策略其实是一把双刃剑，只是在保护网页的同时，偶尔总会误伤友军。</p><p>知道了问题的根源，我们就可以对症下药，寻找解决方案</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们可以看到，跨域问题的关键在于我们的M<mark><strong>请求处于限制范围内</strong></mark>，<mark><strong>没有做到同源</strong></mark>&gt;，从而导致的。</p><p>重点已经标出来了，其实我们解决的方法也就是从这两个思路着手</p><blockquote><ol><li>采用不在同源策略的行为操作</li><li>想办法让行为处于同源状态</li></ol></blockquote><p>这里我们指针对AJAX请求，对于其他诸如cookie、iframe等的跨域方案，其实参考相关的博客相信一定能得到答案</p><h3 id="1-JSONP跨域"><a href="#1-JSONP跨域" class="headerlink" title="1.JSONP跨域"></a>1.JSONP跨域</h3><p>我们可以通过在AJAX请求中定义JSONP类型实现跨域，虽说如此，但JSONP本质上采用的是和AJAX完全不同的请求方式。</p><p>传统的AJAX请求其实是<code>xhr</code>的异步请求，而JSONP本质上是去构建一个<code>&lt;script&gt;</code>标签，利用<code>script</code>标签中的<code>src</code>不受同源政策的限制，在<code>src</code>中填写后端<code>URL</code>并添加回调函数，获取到的数据就通过回调函数处理。</p><p>参考<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰的博客</a>,实现思想大致如此：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</span><br><span class="line">  script.src = src;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  addScriptTag(<span class="string">'http://example.com/ip?callback=foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'response data: '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用<code>JSON.parse</code>的步骤。</p></blockquote><p>如何在AJAX实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"handleCallback"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如何在vue上实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/login'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'handleCallback'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从实现原理上可以看出JSONP还是存在弊端，那就是使用JSONP必须是GET请求，如果要POST请求实现跨域，还是需要使用其他方法</p><h3 id="2-WebSocket"><a href="#2-WebSocket" class="headerlink" title="2.WebSocket"></a>2.WebSocket</h3><p><code>websocket</code>本身就是一种通信协议，通过<code>websocket</code>通信，实际上就可以跨过同源策略， 实现某种意义上的”同源”。</p><p>下面是<code>websocket</code>请求的HTTP头信息，重点关注<code>Origin</code>字段，这是实现跨域的关键</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat, superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Origin</span>: http://example.com</span><br></pre></td></tr></table></figure><p>Origin字段表示该请求的请求源，只要Origin字段中的源域名和请求的目的域名是同一个，就可以通过同源策略中的域名一致，实现跨域。</p><p>如果允许通信，WebSocket的响应头如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat</span><br></pre></td></tr></table></figure><h3 id="3-CORS"><a href="#3-CORS" class="headerlink" title="3.CORS"></a>3.CORS</h3><blockquote><p>CORS即跨域资源共享”（Cross-origin resource sharing），它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p></blockquote><p>这是解决跨域问题的常用方法。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>其实现原理如图</p><p><img src="http://cdn.zblade.top/qiniu_img/1460000012469718.jpg" alt></p><p>CORS请求主要分成两类：简单请求和非简单请求。</p><p>满足以下条件的就是简单请求，否则就是非简单请求</p><blockquote><p>（1) 请求方法是以下三种方法之一：</p><ul><li><code>HEAD</code></li><li><code>GET</code></li><li><code>POST</code></li></ul><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Last-Event-ID</code></li><li><code>Content-Type</code>：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul></blockquote><p>简单CORS请求只是在请求的时候在http头中加入Origin字段</p><p>非简单CORS请求的话，浏览器会在正式通信后先发送预检请求，先询问服务器是否允许请求，得到响应，检查相关字段后就可以做出回应，发起正式请求</p><p>假设现在发起一段js脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://api.alice.com/cors'</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'value'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>其中预检请求的请求方法是OPTIONS，具体请求头类似如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.alice.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>主要关注三个字段</p><ul><li><p><code>Origin</code></p><p>表示请求来自哪个源</p></li><li><p><code>Access-Control-Request-Method</code> </p><p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是<code>PUT</code>。</p></li><li><p><code>Access-Control-Request-Headers</code></p><p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p></li></ul><p>得到响应如下之后就能确认允许跨域请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//表示支持任意跨域请求</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</span><br><span class="line">//表示支持跨域请求的方法</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line">//当浏览器请求包含Access-Control-Request-Headers的时候必需，表示支持的头信息字段</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line">//允许发送cookie和认证信息</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line">//指定本次预检请求的有效期</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br></pre></td></tr></table></figure><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>这里主要是后端的操作，这里用了<code>java</code> <code>springboot</code>的跨域方式做为样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                        .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                        .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">                        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                        .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"DELETE"</span>, <span class="string">"PUT"</span>,<span class="string">"PATCH"</span>)</span><br><span class="line">                        .maxAge(<span class="number">3600</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是在服务端响应的时候添加请求头，<code>springboot</code>还支持在不同<code>controller</code>上使用注解添加</p><h3 id="4-nginx代理跨域"><a href="#4-nginx代理跨域" class="headerlink" title="4.nginx代理跨域"></a>4.nginx代理跨域</h3><p>这个原理也简单，其实就是让前端和后端处于同源上，利用nginx的反向代理可以修改请求的域名、端口，也能添加cookie信息啥的实现跨域</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        <span class="attribute">proxy_cookie_domain</span> www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外使用一些中间件的代理方式其原理都是这回事，这里就不加赘述</p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><h3 id="一通分析"><a href="#一通分析" class="headerlink" title="一通分析"></a>一通分析</h3><p>上面解决方案说了一大堆，但最终还是要回归我们的问题，这次，我们开始对症下药。首先再看一遍报错日志：</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601150333604.png" alt></p><p>嗯？好像和想象中的不太一样，常见的跨域问题应该如同：</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601163902763.png" alt></p><p>这种，看起来其中有诈？</p><p>果不其然，通过后台添加跨域设置，我们的报错信息依然没有变化。</p><p>这时我们就需要对报错信息好好分析<del>（其实这应该是分析日志的第一步，为了强行引入跨域解决方案，因此特地将分析放在了后面）</del></p><p>这句话引起了我的注意</p><blockquote><p> <strong>Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.</strong></p></blockquote><p>通过查阅资料发现，原来这里我的前后端交互都是再本地实现，本地打开html使用的file协议，但是file协议的请求无法被浏览器认可，网上提供的方法如下</p><p>在谷歌浏览器下的快捷方式位置</p><img src="http://cdn.zblade.top/qiniu_img/image-20200601164925261.png"><p>在目标处添加：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" -args --disable-web-security --user-data-dir --allow-file-access-from-files</span><br></pre></td></tr></table></figure><p>大概就是这样，但是我还是不推荐使用这种方法，因为这样的方式并不是特别优雅的解决方法</p><h3 id="另外的尝试"><a href="#另外的尝试" class="headerlink" title="另外的尝试"></a>另外的尝试</h3><p>另外的解决方法就是在本地部署nginx，诸如上面提到过的解决方法，不通过file协议打开文件。</p><p>什么是file协议的打开方式？</p><p>大概就是这种</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601165343281.png" alt></p><p>要换成用http形式打开的方式，诸如这种</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601165431077.png" alt></p><p>还有如果不嫌麻烦直接把网页部署到服务器上也是一种解决方法</p><h3 id="意外的结果"><a href="#意外的结果" class="headerlink" title="意外的结果"></a>意外的结果</h3><p>但是！！最终问题还是没有得到解决！这可把我难到了。。</p><p>事必有因，经过一个多小时的不懈努力，我终于找到了问题的根源</p><p>————</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200601165821321.png" alt></p><p>ajax的请求URL必须以http的格式。。。。</p><p>啊啊啊啊果然还是我太菜了。。</p><p>因为刚学ajax，对其原理不熟，导致最后出现了这种问题。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰的博客</a></p><p><a href="https://segmentfault.com/a/1190000012469713" target="_blank" rel="noopener">ajax跨域，这应该是最全的解决方案了</a></p><p><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty_reactor线程模型</title>
      <link href="/2020/05/31/netty-reactorrctor-1/"/>
      <url>/2020/05/31/netty-reactorrctor-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://cdn.zblade.top/qiniu_img/1587564658461.jpeg" alt></p><p><code>Netty</code>是一个封装了<code>JAVA NIO</code>的异步网络应用框架，它简化了我们网络编程，同时保证了高可用和高性能，因此我认为学习<code>netty</code>对以后深入一些RPC框架，或者接触一些网络通信都大有裨益。</p><p>今天就是想从源码角度学习一下<code>netty</code>的<code>reactor</code>线程模型，这应该是<code>netty</code>的核心之一，整篇文章包含的只是我作为一个初学者的粗浅见解，同时也借鉴了大量的博客文章，因此对部分内容认识不够深入，或者存在逻辑不通的情况，希望能够谅解。</p><a id="more"></a><h2 id="Reactor简介"><a href="#Reactor简介" class="headerlink" title="Reactor简介"></a>Reactor简介</h2><p>在接触<code>netty</code>之前，首先先介绍一些基础知识，让我们了解一下什么是<code>Reactor</code>模式</p><p>维基百科的解读如下</p><blockquote><p>The reactor design pattern is an <strong>event handling pattern</strong> for handling service requests delivered <strong>concurrently</strong> to a service handler by <strong>one or more inputs</strong>. The service handler then <strong>demultiplexes</strong> the incoming requests and dispatches them synchronously to the associated request handlers.</p></blockquote><p>翻译总结主要有这么几点</p><blockquote><ul><li>reactor是一种事件驱动的设计模式</li><li>reactor可以同步地接受多个输入源</li><li>reactor以多路复用的模式分发多个请求到对应的处理器上去</li></ul></blockquote><p>让我们拿实际情景做例子。</p><p>在传统<code>BIO</code>中，一旦遇到多个事件请求并发，事件监听器只会将后面的线程阻塞，等到当前线程处理结束后才能继续进行监听接受后续请求，这样会大大降低吞吐量，增大系统的负载，在高并发的场景下容易造成明显的数据延迟。</p><p>因此在<code>NIO</code>中将耗时的<code>IO</code>处理操作和请求的监听接受分离开来，由一个线程专门监听事件请求，当接受一个请求后再开启一条线程专门处理<code>IO</code>请求，从而主线程不阻塞，达到了非阻塞。</p><p>至此，<code>Reactor</code>的基本架构已经出来了，在上述文字中已经隐含了<code>Reactor</code>的三种基础角色：</p><blockquote><ul><li><strong>Reactor</strong> 将I/O事件分派给对应的Handler</li><li><strong>Acceptor</strong> 处理客户端新连接，并分派请求到处理器链中</li><li><strong>Handlers</strong> 执行非阻塞读/写 任务</li></ul></blockquote><p>经典的<code>reactor</code>线程模型如图所示，</p><p><img src="https://oscimg.oschina.net/oscnet/e9f813b5b08ac68021039ae5141c03f3cfc.jpg" alt="img"></p><p>但是这只是最初级的架构，针对具体复杂的场景，还需要做出诸多优化，比如构建处理<code>IO</code>请求的线程池、将监听事件和分发事件进一步解耦、进一步减少资源开销等，这些在这里就不再展开了。</p><p><code>netty</code>中核心的<code>reactor</code>线程模型就是一个相对更成熟和高性能的模型，它的架构更像是下图，是一个多<code>reactor</code>多线程的模型。</p><p>其中<code>mainReactor</code> 主要是用来处理网络<code>IO</code> 连接建立操作，通常一个线程就可以处理，而<code>subReactor</code>主要做和建立起来的<code>socket</code>做数据交互和事件业务处理操作，它的个数上一般是和<code>CPU</code>个数等同，每个<code>subReactor</code>一个线程来处理。</p><p><img src="https://oscimg.oschina.net/oscnet/7ea7f4beb7b3c1d1c87d7b9e3bab8b6afb4.jpg" alt="img"></p><p>关于<code>reactor</code>模式的暂时就介绍这么多了，其实关于事件的处理还有其他的处理模式。在<code>Douglas Schmidt</code>的作品《POSA2》中提到了有四种事件处理模式:</p><blockquote><ol><li><strong>Reactor</strong>　　</li><li><strong>Proactor</strong>　　</li><li><strong>Asynchronous Completion Token</strong>　　</li><li><strong>Acceptor-Connector</strong></li></ol></blockquote><p>这些以后有时间再研究，今天就先专注<code>netty</code>的事件处理</p><h2 id="Reacor线程的启动和创建"><a href="#Reacor线程的启动和创建" class="headerlink" title="Reacor线程的启动和创建"></a>Reacor线程的启动和创建</h2><p>得益于<code>netty</code>良好的封装，使得我们只要接触过<code>netty</code>，相信都能直接感受其中<code>reactor</code>模式的存在，下面给一个简单的<code>netty</code>服务端的启动<code>demo</code> <mark><strong>(本人环境 netty-all-4.1.48 )</strong></mark>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">8000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//netty的启动引导类</span></span><br><span class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定线程组，这时我们今天重点关注对象</span></span><br><span class="line">        NioEventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="comment">//在引导类中配置相关选项，这些暂时不要去在意它</span></span><br><span class="line">        serverBootstrap</span><br><span class="line">                .group(boss,worker)</span><br><span class="line">                .option(ChannelOption.TCP_NODELAY,<span class="keyword">true</span>)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                <span class="comment">//添加事件处理类，就是reactor中的handler角色</span></span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> EchoHandler());</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).bind(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最重要的就是<code>NioEventLoopGroup</code>，因为在这里我们创建了事件的监听和分发器。那什么是<code>NioEventLoopGroup</code>呢？通过词义可以看到词根是<code>EventLoop</code>, 在<code>Js</code>中我们知道<code>Eventloop</code>就是<code>Js</code>的运行机制，是通过单线程循环调度处理事件，这其实也和<code>reactor</code>模式中用单线程监听接受事件非常相似，那再<code>netty</code>中是否就是这个意思呢？让我们先往下看</p><h3 id="NioEventLoopGroup"><a href="#NioEventLoopGroup" class="headerlink" title="NioEventLoopGroup"></a>NioEventLoopGroup</h3><p>因此,现在就让我们扒一扒<code>NioEventLoopGroup</code>的源码，看看里面做了什么。首先进入<code>NioEventLoopGroup</code>，发现它继承了<code>MultithreadEventLoopGroup</code>，先不急看父类，看一下它的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEventLoopGroup</span> <span class="keyword">extends</span> <span class="title">MultithreadEventLoopGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...省略中间若干个构造函数</span></span><br><span class="line"><span class="comment">//从第一个无参构造函数开始，发现最终到达了这个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(nThreads, executor, <span class="keyword">new</span> Object[]&#123;selectorProvider, selectStrategyFactory, RejectedExecutionHandlers.reject()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...省略其他</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察一下其中的传入参数,其中大部分参数都被设置了默认值</p><ul><li><code>nThreads</code> ：表示线程池中的线程数，<mark>注意这里的线程并非是我们常见的线程，大家先这个thread看成是某个实体，接下来会揭晓这个实体是什么</mark></li><li><code>executor</code>: 传入的线程池实例，这个暂时不表，只要知道是给上述那个实体用的</li><li><code>selectorProvider</code>:  我们需要通过它来实例化 JDK 的 <code>Selector</code>，也就是说那个实体持有selector</li><li><code>selectStrategyFactory</code> ：关于<code>selector</code>如何<code>select</code>的策略，之后等揭晓了这个实体之后会做出解答</li></ul><p>其他参数</p><ul><li><code>chooserFactory</code>： 选择从线程池中选择线程（那个实体）的策略</li><li><code>rejectedExecutionHandler</code>： 线程池中出现拒绝执行时的策略, <code>netty</code>的默认拒绝策略是抛出异常</li></ul><p>接下里我们进入父类查看构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class="number">1</span>, SystemPropertyUtil.getInt(<span class="string">"io.netty.eventLoopThreads"</span>, NettyRuntime.availableProcessors() * <span class="number">2</span>));</span><br><span class="line"><span class="comment">//看到nThreads如果没有被设置过就被初始化成核心数*2</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(nThreads == <span class="number">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, threadFactory, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续进入父类查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入下面的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventExecutorGroup</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(nThreads, (Executor)(threadFactory == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> ThreadPerTaskExecutor(threadFactory)), args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventExecutorGroup</span><span class="params">(<span class="keyword">int</span> nThreads, Executor executor, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(nThreads, executor, DefaultEventExecutorChooserFactory.INSTANCE, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里<code>MultithreadEventExecutorGroup</code>会先设置一个<code>ThreadPerTaskExecutor</code>，就是上面所说的<code>executor</code></p><p>再设置一个<code>chooserFactory</code>，用来实现在线程池中选择线程的选择策略，这部分代码比较简单，就不贴出来了</p><p>接着<code>this()</code>就会进入正式配置的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventExecutorGroup</span><span class="params">(<span class="keyword">int</span> nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, Object... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">    <span class="comment">//将所有child实例化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; ++i) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> var18 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            var18 = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//注意这里，构造了一个线程池数组</span></span><br><span class="line">            <span class="keyword">this</span>.children = <span class="keyword">new</span> EventExecutor[nThreads];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; ++i) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">boolean</span> var18 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var18 = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//实例化一个child</span></span><br><span class="line">                    <span class="keyword">this</span>.children[i] = <span class="keyword">this</span>.newChild((Executor)executor, args);</span><br><span class="line">                    success = <span class="keyword">true</span>;</span><br><span class="line">                    var18 = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var19) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"failed to create a child event loop"</span>, var19);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">////这里指上面实例化child失败，执行下面逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.children[j].shutdownGracefully();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                        EventExecutor e = <span class="keyword">this</span>.children[j];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">while</span>(!e.isTerminated()) &#123;</span><br><span class="line">                                e.awaitTermination(<span class="number">2147483647L</span>, TimeUnit.SECONDS);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException var22) &#123;</span><br><span class="line">                            Thread.currentThread().interrupt();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//所有child都已经实例化</span></span><br><span class="line">            <span class="comment">//设置线程选择策略</span></span><br><span class="line">            <span class="keyword">this</span>.chooser = chooserFactory.newChooser(<span class="keyword">this</span>.children);</span><br><span class="line">            <span class="comment">//添加监听器，监听每个线程是否termination                </span></span><br><span class="line">            FutureListener&lt;Object&gt; terminationListener = <span class="keyword">new</span> FutureListener&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;Object&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (MultithreadEventExecutorGroup.<span class="keyword">this</span>.terminatedChildren.incrementAndGet() == MultithreadEventExecutorGroup.<span class="keyword">this</span>.children.length) &#123;</span><br><span class="line">                        MultithreadEventExecutorGroup.<span class="keyword">this</span>.terminationFuture.setSuccess((Object)<span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            EventExecutor[] var24 = <span class="keyword">this</span>.children;</span><br><span class="line">            j = var24.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var26 = <span class="number">0</span>; var26 &lt; j; ++var26) &#123;</span><br><span class="line">                EventExecutor e = var24[var26];</span><br><span class="line">                e.terminationFuture().addListener(terminationListener);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着进入上面的<code>newChild()</code>方法,实际上是进入的<code>NioEventLoop</code>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> EventLoop <span class="title">newChild</span><span class="params">(Executor executor, Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopTaskQueueFactory queueFactory = args.length == <span class="number">4</span> ? (EventLoopTaskQueueFactory)args[<span class="number">3</span>] : <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实际上是创建了一个新的NioEventLoop</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NioEventLoop(<span class="keyword">this</span>, executor, (SelectorProvider)args[<span class="number">0</span>], ((SelectStrategyFactory)args[<span class="number">1</span>]).newSelectStrategy(), (RejectedExecutionHandler)args[<span class="number">2</span>], queueFactory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至此可以揭晓谜底了，线程池中的线程，那个实体指的就是<code>NioEventLoop</code>!所以我们整段代码看下来，可以得出结论，<code>NioEventLoopGroup</code>只是一个创建<code>NioEventLoop</code>的实体池，而很多构造方法里的参数最终也是要进入<code>NioEventLoop</code>进行使用。</p><p>其实我们看词义和继承关系也能看出个大概，<code>NioEventLoop</code>继承了<code>MultithreadEventLoopGroup</code>，而<code>NioEventLoop</code>继承了<code>SingleThreadEventLoop</code>，也是多和一的关系。</p><h3 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h3><p>那接下来我们就要查看<code>NioEventLoop</code>的源码，康康里面究竟卖着什么葫芦药</p><p>首先看看它的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NioEventLoop(...) &#123;</span><br><span class="line"><span class="keyword">super</span>(parent, executor, <span class="keyword">false</span>, newTaskQueue(queueFactory), newTaskQueue(queueFactory), rejectedExecutionHandler);</span><br><span class="line"><span class="comment">//老面孔</span></span><br><span class="line">        <span class="keyword">this</span>.provider = (SelectorProvider)ObjectUtil.checkNotNull(selectorProvider, <span class="string">"selectorProvider"</span>);</span><br><span class="line"><span class="comment">//老面孔</span></span><br><span class="line">        <span class="keyword">this</span>.selectStrategy = (SelectStrategy)ObjectUtil.checkNotNull(strategy, <span class="string">"selectStrategy"</span>);</span><br><span class="line"><span class="comment">//selecor，重要的组件</span></span><br><span class="line">        NioEventLoop.SelectorTuple selectorTuple = <span class="keyword">this</span>.openSelector();</span><br><span class="line">        <span class="keyword">this</span>.selector = selectorTuple.selector;</span><br><span class="line">        <span class="keyword">this</span>.unwrappedSelector = selectorTuple.unwrappedSelector;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看一下父类的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent, executor, addTaskWakesUp, taskQueue, rejectedExecutionHandler);</span><br><span class="line">        <span class="keyword">this</span>.tailTasks = (Queue)ObjectUtil.checkNotNull(tailTaskQueue, <span class="string">"tailTaskQueue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//看一下父类的构造方法</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventExecutor</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">       <span class="comment">//老面孔</span></span><br><span class="line">        <span class="keyword">this</span>.executor = ThreadExecutorMap.apply(executor, <span class="keyword">this</span>);</span><br><span class="line">       <span class="comment">//其中最重要的就是这个taskQueue，联想一下js中的Eventloop是不是也有这个东西？</span></span><br><span class="line">       <span class="comment">//任务队列，提交给 NioEventLoop 的任务都会进入到这个 taskQueue 中等待被执行</span></span><br><span class="line">        <span class="keyword">this</span>.taskQueue = (Queue)ObjectUtil.checkNotNull(taskQueue, <span class="string">"taskQueue"</span>);</span><br><span class="line">       <span class="comment">//老面孔</span></span><br><span class="line">        <span class="keyword">this</span>.rejectedExecutionHandler = (RejectedExecutionHandler)ObjectUtil.checkNotNull(rejectedHandler, <span class="string">"rejectedHandler"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现了很多老面孔了，这些都是直接从外层传递进来的，但是也有一些比较重要的东西，比如<code>selector</code>，这是<code>reactor</code>的重要角色</p><p>现在我们其实对<code>NioEventLoop</code>的具体工作流程尚不了解，但是通过对构造函数的分析，相信大家也都明白了这个实体类的重要性。这里做一下总结，接下来会继续分析<code>NioEventLoop</code>的具体工作</p><ul><li>从构造上可以看出，<code>NioEventLoop</code>实际上是一个线程池，只不过是一个单线程的线程池，里面持有一个<code>Selector</code>，负责<code>Reactor</code>中最重要的角色</li><li>我们利用<code>NioEventLoopGroup</code>构建<code>NioEventLoop</code>，<code>NioEventLoopGroup</code>是一个<code>NioEventLoop</code>池，默认创建<code>2*核心数</code>个<code>NioEventLoop</code>，同时，客户端创建一个<code>NioEventLoopGroup</code>，服务端创建两个<code>NioEventLoopGroup</code>，实际上是多reactor模型，对事件的接受和分发做解耦，这个之后回顾整体架构的时候再细说</li></ul><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>在<code>netty</code>服务端的<code>demo</code>启动后，代码会执行到<code>NioEventLoop</code>的<code>run</code>方法，让我们直接进入<code>run</code>方法查看<code>eventloop</code>是如何工作的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> selectCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> strategy;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//注意这里，这里的selectStrategy就是我们之前所提到的构造方法里的一个参数</span></span><br><span class="line">                        <span class="comment">//这里有三个值：-1代表 SELECT -2代表CONTINUE -3代表BUSY_WAIT</span></span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        strategy = <span class="keyword">this</span>.selectStrategy.calculateStrategy(<span class="keyword">this</span>.selectNowSupplier, <span class="keyword">this</span>.hasTasks());</span><br><span class="line">                        <span class="keyword">switch</span>(strategy) &#123;</span><br><span class="line">                        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">long</span> curDeadlineNanos = <span class="keyword">this</span>.nextScheduledTaskDeadlineNanos();</span><br><span class="line">                            <span class="keyword">if</span> (curDeadlineNanos == -<span class="number">1L</span>) &#123;</span><br><span class="line">                                curDeadlineNanos = <span class="number">9223372036854775807L</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">this</span>.nextWakeupNanos.set(curDeadlineNanos);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!<span class="keyword">this</span>.hasTasks()) &#123;</span><br><span class="line">                                    strategy = <span class="keyword">this</span>.select(curDeadlineNanos);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="keyword">this</span>.nextWakeupNanos.lazySet(-<span class="number">1L</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var38) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.rebuildSelector0();</span><br><span class="line">                        selectCnt = <span class="number">0</span>;</span><br><span class="line">                        handleLoopException(var38);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ++selectCnt;</span><br><span class="line">                    <span class="keyword">this</span>.cancelledKeys = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">this</span>.needsToSelectAgain = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">///ioRatio 的默认值是50</span></span><br><span class="line">                    <span class="keyword">int</span> ioRatio = <span class="keyword">this</span>.ioRatio;</span><br><span class="line">                    <span class="keyword">boolean</span> ranTasks;</span><br><span class="line">                    <span class="keyword">if</span> (ioRatio == <span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">this</span>.processSelectedKeys();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            ranTasks = <span class="keyword">this</span>.runAllTasks();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">long</span> ioStartTime = System.nanoTime();</span><br><span class="line">                        <span class="keyword">boolean</span> var26 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            var26 = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">this</span>.processSelectedKeys();</span><br><span class="line">                            var26 = <span class="keyword">false</span>;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (var26) &#123;</span><br><span class="line">                                <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                                <span class="keyword">this</span>.runAllTasks(ioTime * (<span class="keyword">long</span>)(<span class="number">100</span> - ioRatio) / (<span class="keyword">long</span>)ioRatio);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                        ranTasks = <span class="keyword">this</span>.runAllTasks(ioTime * (<span class="keyword">long</span>)(<span class="number">100</span> - ioRatio) / (<span class="keyword">long</span>)ioRatio);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ranTasks = <span class="keyword">this</span>.runAllTasks(<span class="number">0L</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注其中的一个 <code>switch(strategy)</code>，一个 <code>if (ioRatio == 100)</code></p><p>这里其实主要涉及到三个操作、</p><ul><li><code>select()</code>：轮询，接受注册到<code>reactor</code>线程上的事件</li><li><code>processSelectedKeys()</code>：处理产生网络<code>IO</code>事件的<code>channel</code></li><li><code>runAllTasks()</code>：处理任务队列</li></ul><p>这三个操作就是<code>NioEventLoop</code>的核心操作，实际上就包含了<code>channel</code>的接受，分发和处理，下面就分别介绍一下这三个操作</p><h3 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h3><p>截取run方法中的一部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(strategy) &#123;</span><br><span class="line">        <span class="comment">//这里有三个值：-1代表 SELECT -2代表CONTINUE -3代表BUSY_WAIT</span></span><br><span class="line">                            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                                <span class="keyword">long</span> curDeadlineNanos = <span class="keyword">this</span>.nextScheduledTaskDeadlineNanos();</span><br><span class="line">                                <span class="keyword">if</span> (curDeadlineNanos == -<span class="number">1L</span>) &#123;</span><br><span class="line">                                    curDeadlineNanos = <span class="number">9223372036854775807L</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">this</span>.nextWakeupNanos.set(curDeadlineNanos);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (!<span class="keyword">this</span>.hasTasks()) &#123;</span><br><span class="line">                                        strategy = <span class="keyword">this</span>.select(curDeadlineNanos);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                    <span class="keyword">this</span>.nextWakeupNanos.lazySet(-<span class="number">1L</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p>这里主要关注<code>select</code>分支，首先要注意的是<code>select</code>是一个阻塞方法，返回值表示多少<code>channel</code>准备就绪，可以进入处理。</p><p>看一看<code>select</code>前后处理逻辑，首先设置当前最迟的轮询时间，然后进入<code>select</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">long</span> deadlineNanos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (deadlineNanos == <span class="number">9223372036854775807L</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.selector.select();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//设置边界时间为0.995s</span></span><br><span class="line">           <span class="keyword">long</span> timeoutMillis = deadlineToDelayNanos(deadlineNanos + <span class="number">995000L</span>) / <span class="number">1000000L</span>;</span><br><span class="line">           <span class="keyword">return</span> timeoutMillis &lt;= <span class="number">0L</span> ? <span class="keyword">this</span>.selector.selectNow() : <span class="keyword">this</span>.selector.select(timeoutMillis);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>netty</code>里面定时任务队列是按照延迟时间从小到大进行排序，每次获取任务都是从延迟时间最小的开始获取。<code>select</code>就是通过判断是否有任务正在排队来决定是否进行<code>select</code></p><p>这里，如果时间小于<code>0.995s</code>，表示截止事件时间快到了，那就立刻<code>select</code>一次，调用<code>selectNow()</code>方法。</p><p>其中还设置了下一次唤醒时间，如果截止时间到了但是任务还没有被处理，就会自动唤醒</p><p>·</p><h3 id="processSelectedKeys"><a href="#processSelectedKeys" class="headerlink" title="processSelectedKeys()"></a>processSelectedKeys()</h3><p>让我们进入processSelectedKeys()方法看看里面干了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.selectedKeys != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//处理优化过的SelectionKey</span></span><br><span class="line">            <span class="keyword">this</span>.processSelectedKeysOptimized();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理正常情况的SelectionKey</span></span><br><span class="line">            <span class="keyword">this</span>.processSelectedKeysPlain(<span class="keyword">this</span>.selector.selectedKeys());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们知道<code>SelectionKey</code>代表事件返回的对象，里面有感兴趣事件集合，准备就绪的事件集合，<code>channel</code>，<code>selector</code>，<code>attachment</code>等</p><p>优化过的<code>SelectionKey</code>和正常的<code>SelectionKey</code>的区别在于<code>netty</code>重写了<code>SelectedSelectionKeySet</code>的<code>selectedKeys</code>属性和<code>publicSelectedKeys</code>属性，使得原来的set变成数组，降低了修改元素的事件复杂度。</p><p>看一下<code>processSelectedKeysOptimized()</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKeysOptimized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.selectedKeys.size; ++i) &#123;</span><br><span class="line">        <span class="comment">//取出IO事件和channel</span></span><br><span class="line">        SelectionKey k = <span class="keyword">this</span>.selectedKeys.keys[i];</span><br><span class="line">        <span class="keyword">this</span>.selectedKeys.keys[i] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取selectoinKey中的attachment</span></span><br><span class="line">        Object a = k.attachment();</span><br><span class="line">        <span class="comment">//attachment一般是AbstractNioChannel，存放着具体IO事件</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> AbstractNioChannel) &#123;</span><br><span class="line">            <span class="keyword">this</span>.processSelectedKey(k, (AbstractNioChannel)a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NioTask&lt;SelectableChannel&gt; task = (NioTask)a;</span><br><span class="line">            processSelectedKey(k, task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//部分情况可能出现需要再次轮询的情况</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.needsToSelectAgain) &#123;</span><br><span class="line">            <span class="keyword">this</span>.selectedKeys.reset(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.selectAgain();</span><br><span class="line">            i = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么时候需要再次轮询？</p><ul><li>在<code>channel</code>从<code>selector</code>上移除的时候，调用<code>cancel</code>函数将<code>key</code>取消，并且当被去掉的<code>key</code>到达 <code>CLEANUP_INTERVAL</code> 的时候，设置<code>needsToSelectAgain</code>为<code>true</code>,<code>CLEANUP_INTERVAL</code>默认值为<code>256</code></li><li>因此每满<code>256</code>次会将<code>selectedKeys</code>的内部数组全部清空，然后重新<code>selectAgain</code>重新装载<code>selectionKey</code></li></ul><h3 id="runTasks"><a href="#runTasks" class="headerlink" title="runTasks()"></a>runTasks()</h3><p>先看<code>run</code>方法的代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">++selectCnt;</span><br><span class="line">                        <span class="keyword">this</span>.cancelledKeys = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">this</span>.needsToSelectAgain = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//ioRatio是 IO 任务的执行时间比例,如果等于100表示所有时间都被用来处理io任务，默认是50</span></span><br><span class="line">                        <span class="keyword">int</span> ioRatio = <span class="keyword">this</span>.ioRatio;</span><br><span class="line">                        <span class="keyword">boolean</span> ranTasks;</span><br><span class="line">                        <span class="keyword">if</span> (ioRatio == <span class="number">100</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">this</span>.processSelectedKeys();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                ranTasks = <span class="keyword">this</span>.runAllTasks();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">long</span> ioStartTime = System.nanoTime();</span><br><span class="line">                            <span class="keyword">boolean</span> var26 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                var26 = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">this</span>.processSelectedKeys();</span><br><span class="line">                                var26 = <span class="keyword">false</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (var26) &#123;</span><br><span class="line">                                    <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                                    <span class="keyword">this</span>.runAllTasks(ioTime * (<span class="keyword">long</span>)(<span class="number">100</span> - ioRatio) / (<span class="keyword">long</span>)ioRatio);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                            ranTasks = <span class="keyword">this</span>.runAllTasks(ioTime * (<span class="keyword">long</span>)(<span class="number">100</span> - ioRatio) / (<span class="keyword">long</span>)ioRatio);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            ranTasks = <span class="keyword">this</span>.runAllTasks(<span class="number">0L</span>);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>ioRatio</code>为<code>100</code>同时就直接执行<code>IO</code>操作，并最后处理返回的任务</li><li>如果<code>ioRatio</code>不是<code>100</code> 就计算<code>io</code>处理限制时间，设置处理返回任务的截止时间，让处理<code>I/O</code>事件的时间和执行任务的时间为1:1。</li></ul><p>再看<code>runAllTasks</code>的实现之前，先要明白<code>task</code>究竟是什么。在<code>netty</code>中一共有两种任务，一种是<mark>普通任务</mark>，一种是<mark>定时任务</mark>。这里先抛出结论：普通任务存放在<code>taskQueue</code>中，定时任务存放在<code>PriorityQueue</code>中，这部分的代码追踪暂时就不写出来了，让我们首先关注如何去运行致谢<code>tasks</code>吧</p><p>进入<code>runAllTasks()</code>看一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">runAllTasks</span><span class="params">(<span class="keyword">long</span> timeoutNanos)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//等会讲</span></span><br><span class="line">       <span class="keyword">this</span>.fetchFromScheduledTaskQueue();</span><br><span class="line">    <span class="comment">//从队列中取出任务</span></span><br><span class="line">       Runnable task = <span class="keyword">this</span>.pollTask();</span><br><span class="line">       <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.afterRunningAllTasks();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">long</span> deadline = timeoutNanos &gt; <span class="number">0L</span> ? ScheduledFutureTask.nanoTime() + timeoutNanos : <span class="number">0L</span>;</span><br><span class="line">           <span class="keyword">long</span> runTasks = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">long</span> lastExecutionTime;</span><br><span class="line">           <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">               <span class="comment">//处理任务，这里的task其实就是一个Runnable类，方法里直接run就行了</span></span><br><span class="line">               safeExecute(task);</span><br><span class="line">               <span class="comment">//记录处理完的任务数</span></span><br><span class="line">               ++runTasks;</span><br><span class="line">               <span class="comment">//每64个任务才检查一次timeout，因为nanoTime()开销比较大</span></span><br><span class="line">               <span class="keyword">if</span> ((runTasks &amp; <span class="number">63L</span>) == <span class="number">0L</span>) &#123;</span><br><span class="line">                   lastExecutionTime = ScheduledFutureTask.nanoTime();</span><br><span class="line">                   <span class="keyword">if</span> (lastExecutionTime &gt;= deadline) &#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//继续处理下一个任务</span></span><br><span class="line">               task = <span class="keyword">this</span>.pollTask();</span><br><span class="line">               <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   lastExecutionTime = ScheduledFutureTask.nanoTime();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">this</span>.afterRunningAllTasks();</span><br><span class="line">           <span class="keyword">this</span>.lastExecutionTime = lastExecutionTime;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>整体逻辑还算简单，主要先看看<code>fetchFromScheduledTaskQueue()</code>里面做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">fetchFromScheduledTaskQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.scheduledTaskQueue != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.scheduledTaskQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">long</span> nanoTime = AbstractScheduledEventExecutor.nanoTime();</span><br><span class="line"></span><br><span class="line">            Runnable scheduledTask;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//在定时任务队列中获取一个离截止时间最近的任务</span></span><br><span class="line">                scheduledTask = <span class="keyword">this</span>.pollScheduledTask(nanoTime);</span><br><span class="line">                <span class="keyword">if</span> (scheduledTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="comment">//添加普通队列中去</span></span><br><span class="line">                &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.taskQueue.offer(scheduledTask));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果添加失败，就归还定时任务</span></span><br><span class="line">            <span class="keyword">this</span>.scheduledTaskQueue.add((ScheduledFutureTask)scheduledTask);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之前说过<code>task</code>包含普通任务和定时任务，分别处在不同的队列中。可见这个函数的主要作用就是将定时任务添加到普通队列中去，这样后面处理任务的时候就可以统一一个队列中获取。</p><p>为什么是放在普通队列中？因为定时队列是按照时间优先级的顺序排列，普通任务也无法正常的插入定时任务队列，反之快到截止时间的定时任务是可以看作是普通任务来处理的。</p><p>到这里<code>runTasks</code>的逻辑也基本讲完了。总结一下主要干了这些事</p><ul><li>协调<code>IO</code>时间和处理任务的时间，计算处理任务需要的<code>deadline</code>截止时间</li><li>聚合定时任务和普通任务，循环取出任务执行</li><li>每执行<code>64</code>次任务就检查一次截止时间，到期退出循环</li><li>在<code>afterRunningAllTasks()</code>中，做一些收尾动作</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，<code>EventLoop</code>上的所有任务都开始执行了，整个流程也结束了。·</p><p>最后让我们看看<code>reactor</code>模式及对应下各个角色的具体实现，让我们再看一眼<img src="http://cdn.zblade.top/qiniu_img/112151380898648.jpg" alt></p><p><code>Reactor</code>线程模型的主要实现实体：<code>NioEventLoop</code></p><p><code>client</code>： 请求的事件，可以理解是一个<code>channel</code></p><p><code>acceptor</code>： <code>selector</code>，主要指<code>selector</code>的<code>select()</code>负责的监听并接受事件</p><p><code>mainReactor</code>和<code>sunReactor</code>：在服务端会绑定两个<code>NioEventLoopGroup</code>：<code>parentGroup</code>和<code>childGroup</code>，一般在<code>parentGroup</code>中处理<code>accept</code>事件，再<code>childGroup</code>中处理其他事件。<code>IO</code>事件的处理主要是在<code>processSelectedKeys()</code>函数里，判断<code>SelectionKey</code>的类型，并交给不同的函数处理。</p><p><code>queued tasks</code>:当建立了连接后，待处理任务就会进入<code>tasks queue</code>，等到再<code>runTasks()</code>中循环队列处理，每个任务对应从<code>threadpool</code>中取出一条<code>worker thread</code>进行处理</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://my.oschina.net/u/1859679/blog/1844109#h2_8" target="_blank" rel="noopener">【NIO系列】——之Reactor模型</a></p><p><a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="noopener">Java NIO浅析-美团技术团队</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy爬虫入门</title>
      <link href="/2020/05/12/scrapy1/"/>
      <url>/2020/05/12/scrapy1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-mvcJaPeA" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-mvcJaPeA"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Something I Need",              author: "OneRepublic",              url: "http://music.163.com/song/media/outer/url?id=26060071.mp3",              pic: "http://p2.music.126.net/b2nl6jsVbqj23IV8dVvJcg==/7766950139663735.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>现在说到爬虫，大家都会或多或少地将python和爬虫联系在一起，归根到底，是因为python丰富的生态和灵活简单的语法。同时基于python存在有几个强大的爬虫框架，极大地降低了爬虫的难度，提高了编写程序的效率。因此，今天就让我们初探其中一个强大的python框架——scrapy，体验一下使用框架爬虫的快感吧</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Scrapy是一个用于爬网网站和提取结构化数据的应用程序框架，可用于各种有用的应用程序，例如数据挖掘，信息处理或历史档案。</p><p>——翻译自官网</p></blockquote><p>推荐直接查看<a href="https://doc.scrapy.org/en/latest/intro/overview.html" target="_blank" rel="noopener">官网</a>，里面甚至有完整的scraoy教程，简直是深入学习框架的必备选择！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装scrapy框架的时候，网上有许多方法，针对python的环境不同，可能存在奇奇怪怪的错误，这里我基于python3环境，预装了pip，亲测一遍过</p><p><strong>预装环境</strong></p><blockquote><p>Windows 10 + python 3.7.0 + pip20.1 +virtualenv</p></blockquote><p><mark>同时请开启一个新的virtual环境来保证不会出现其他包的依赖冲突</mark></p><p><strong>前期安装组件</strong></p><ul><li><code>lxml</code></li><li><code>pyOpenSSL</code></li><li><code>Twisted</code></li><li><code>PyWin32</code></li></ul><p><strong>安装lxml</strong></p><p>直接<code>pip</code>安装即可。这是<code>python</code>一个<code>HTML</code>、<code>XML</code>解析库，即使不用框架也是经常使用的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure><p><strong>安装PyWin32</strong></p><p>官网下载对应版本的安装包双击安装即可 [pywin32]([<a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/]" target="_blank" rel="noopener">https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/]</a>(<a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build" target="_blank" rel="noopener">https://sourceforge.net/projects/pywin32/files/pywin32/Build</a> 221/))</p><p><strong>安装剩余组件</strong></p><p>这里首先要介绍<code>wheel</code></p><p><code>wheel</code>是<code>python</code>的一个打包格式，以前<code>python</code>主流的打包格式是<code>.egg</code>文件，但现在<code>*.whl</code>文件也变得流行起来。</p><p><code>wheel</code>其实上是python上一种压缩打包的组件，有点类似于zip之类的，但在本文中你只要知道通过wheel文件格式文件你可以快速将一个库安装到你的<code>python</code>环境中</p><p>安装其实也很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install wheel</span><br></pre></td></tr></table></figure><p>这样你的<code>python</code>环境就支持<code>.whl</code>文件格式的安装啦</p><p>接下来的步骤就是到各个官网上下载各组件的<code>whl</code>格式，注意要和你的python环境匹配</p><ul><li><a href="https://pypi.org/project/pyOpenSSL/#files" target="_blank" rel="noopener"><code>pyOpenSSL</code></a></li></ul><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyOpenSSL-19.1.0-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener"><code>Twisted</code></a>注意要和你的python版本对应</li></ul><p>像我的环境就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Twisted-20.3.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure><p><strong>安装scrapy</strong></p><p>所有依赖包安装成功后直接pip安装scrapy就不会有问题啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Scrapy</span><br></pre></td></tr></table></figure><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><p>首先创建项目</p><p>在你想要放置爬虫项目的文件夹运行，xxx就是你的项目名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject xxx</span><br></pre></td></tr></table></figure><p>顺便记录一下一些基本的操作</p><ul><li>创建项目：<code>scrapy startproject xxx</code></li><li>进入项目：<code>cd xxx #进入某个文件夹下</code></li><li>创建爬虫：<code>scrapy genspider xxx（爬虫名） xxx.com （爬取域）</code></li><li>生成文件：<code>scrapy crawl xxx -o xxx.json (生成某种类型的文件)</code></li><li>运行爬虫：<code>scrapy crawl XXX</code></li><li>列出所有爬虫：<code>scrapy list</code></li><li>获得配置信息：<code>scrapy settings [options]</code></li></ul><p>创建完成后你可以看到文件夹下多了这些内容</p><img src="http://cdn.zblade.top/qiniu_img/image-20200514161732426.png" style="zoom:50%;"><p>让我们一个个介绍这些组件（<code>spider_demo</code>是你的爬虫项目名）</p><ul><li><code>scrapy.cfg</code>: 项目的配置文件(在项目文件夹的平行目录下)</li><li><code>spider_demo/spiders/</code>: 放置<code>spider</code>代码的目录. （放爬虫的地方）<strong>也是你放爬虫具体逻辑的地方</strong></li><li><code>spider_demo/items.py</code>: 项目中的<code>item</code>文件.（创建容器的地方，也是定义最终爬虫得到的结果格式的地方）</li><li><code>spider_demo/pipelines.py</code>: 项目中的<code>pipelines</code>文件.（实现数据的清洗、存储和验证）</li><li><code>spider_demo/settings.py</code>: 项目的设置文件.（爬虫的具体配置，包括启动某个中间件，启动关闭某个功能等）</li><li><code>spider_demo/middlewares.py</code>:定义项目的下载器中间件和爬虫中间件</li></ul><p>感觉是不是还有点蒙圈？接下来简单介绍一下<code>scrapy</code>运行的原理，这样相信就能更理解这些组件的作用了</p><hr><p>官网的流程图</p><p><img src="https://doc.scrapy.org/en/latest/_images/scrapy_architecture_02.png" alt="崎architecture的建筑"></p><p><code>Scrapy</code>是由执行引擎控制执行的</p><ol><li><code>Spider</code>发起请求给<code>Engine</code></li><li><code>Engine</code>安排请求<code>Scheduler</code>和接受下一个爬取请求</li><li><code>Scheduler</code>返回下一个请求</li><li><code>Engine</code>将请求通过<code>Downloader Middlewares</code>发送给<code>Downloader</code></li><li><code>Downloader</code>爬取网页并将返回结果通过<code>Downloader Middlewares</code>发送回<code>Engine</code></li><li>引擎接受响应并通过<code>Spider Middleware</code>转发给<code>Spider</code>处理</li><li><code>Spider</code>的<code>parse()</code>方法对获取到的<code>response</code>进行处理，解析出<code>items</code>或者请求，将解析出来的<code>items</code>或请求，返回给<code>Engine</code></li><li><code>Engine</code>将<code>items</code>发送到<code>Item Pipline</code>,将请求发送到<code>Scheduler</code></li><li>重复步骤1直到没有新的请求</li></ol><p>总结一下上面步骤出现的组件</p><table><thead><tr><th>组件名</th><th>组件功能</th><th></th></tr></thead><tbody><tr><td>Engine</td><td>框架核心，负责整体的数据和信号的调度</td><td>框架实现</td></tr><tr><td>Scheduler</td><td>一个存放请求的队列</td><td>框架实现</td></tr><tr><td>Downloader</td><td>执行具体下载任务的单元</td><td>框架实现</td></tr><tr><td>Spider</td><td>处理下载得到的响应结果，提取需要的是数据（具体的业务逻辑）</td><td>自己实现</td></tr><tr><td>Item Pipline</td><td>处理最终得到的数据，如进行持久化操作</td><td>自己实现</td></tr><tr><td>Downloader MIddlewares</td><td>在正式进行下载任务之前，可以进行一些自定义处理。比如设置请求头，设置代理</td><td>自己实现</td></tr><tr><td>Spider Midderwares</td><td>自定义请求和过滤响应</td><td>自己实现</td></tr></tbody></table><p>相信这一套组合拳下来应该能对这个框架有了基本的认识，接下来就通过实战来强化一下记忆吧</p><h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><p>这次是根据网上通过爬取猫眼电影的排行榜做的一个<code>demo</code>，以后有时间再换一个更加复杂的<code>demo</code></p><p>实现目标是爬取电影排行榜上的片名、分数和排名，同时将结果以<code>json</code>的格式保存在一个<code>.json</code>文件中</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200514225053514.png" alt></p><p>首先你要确定你需要爬取哪些数据，将你需要的数据记录到容器中，在<code>item.py</code>中进行编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们需要排名、标题、收藏人数、上映时间和分数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderDemoItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    index = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    star = scrapy.Field()</span><br><span class="line">    releasetime = scrapy.Field()</span><br><span class="line">    score = scrapy.Field()</span><br></pre></td></tr></table></figure><p>接下来在<code>Spiders</code>文件夹下新建一个爬虫文件，例如我新建了一个<code>MoyanSpider.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> spider_demo.items <span class="keyword">import</span> SpiderDemoItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaoyanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    <span class="comment">#这是爬虫启动的名称，之后启动爬虫就需要用到这个名称</span></span><br><span class="line">    name = <span class="string">"maoyan"</span></span><br><span class="line">    <span class="comment">#可以爬取的域名可选列表</span></span><br><span class="line">    allowed_domains = [<span class="string">"maoyan.com"</span>]</span><br><span class="line">    <span class="comment">#目标爬取的网址</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://maoyan.com/board/7/"</span>, </span><br><span class="line">        <span class="string">"http://maoyan.com/board/4/"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#处理已经下载的页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        </span><br><span class="line">        dl = response.css(<span class="string">".board-wrapper dd"</span>)</span><br><span class="line">        <span class="comment">#通过解析得到具体的数据存到容器中</span></span><br><span class="line">        <span class="keyword">for</span> dd <span class="keyword">in</span> dl:</span><br><span class="line">            item = SpiderDemoItem()</span><br><span class="line">            item[<span class="string">"index"</span>] = dd.css(<span class="string">".board-index::text"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"title"</span>] = dd.css(<span class="string">".name a::text"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"star"</span>] = dd.css(<span class="string">".star::text"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"releasetime"</span>] = dd.css(<span class="string">".releasetime::text"</span>).extract_first()</span><br><span class="line">            score = dd.css(<span class="string">'.integer::text'</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                item[<span class="string">"score"</span>] = score  + dd.css(<span class="string">'.fraction::text'</span>).extract_first()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                item[<span class="string">"score"</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#通过yield将结果返回</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>这里提一下，<code>scrapy</code>支持各种类型的解析，你可以使用python常见的<a href="http://mp.weixin.qq.com/s?__biz=MzU0NDg3NDg0Ng==&mid=2247483766&idx=1&sn=86d61115ebb7a4083e17a54f1acffdf1&chksm=fb74c947cc03405122d74b1172a9a96ef35af65753666f3f7900a9318290c4326736c2d6e69e&scene=21#wechat_redirect" target="_blank" rel="noopener">三大解析库</a>进行解析，但框架也提供了一种自己的解析方式（<code>Selector</code>）</p><ul><li>选择器</li><li><code>Xpath</code></li></ul><p>这里不详细叙述，以后有时间再细聊</p><p>同时我们需要在<code>setting,py</code>中对配置稍微进行修改(<code>setting.py</code>中有许多默认配置，这里只展示修改的部分)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果没有自动生成UA，就需要手动定义，但是每次爬取都是同样的UA容易出现验证操作，因此后面还会介绍一种随机生成UA的方法</span></span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许机器人协议，关于机器人协议的具体内容可以自行上网查找</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样，基本就完成了一个简单的爬虫，只需要执行<code>scrapy crawl maoyan</code>(最后一个是你的爬虫名)</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200515001803049.png" alt></p><p>之后还有两个要点，一个是项目的持久化，一个是随机化<code>User-Agent</code>。</p><p>先看持久化，这里简单起见就示范将爬虫数据以<code>json</code>格式导出</p><p>这里需要修改<code>pipline.py</code>，至于为什么，相信看了之前的组件介绍应该能明白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderDemoPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonPipline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"打开文件，准备写入...."</span>)</span><br><span class="line">        self.file = codecs.open(<span class="string">"maoyan.json"</span>, <span class="string">"wb"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"准备写入..."</span>)</span><br><span class="line">        line = json.dumps(dict(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">"\n"</span></span><br><span class="line">        self.file.write(line)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"写入完毕，关闭文件"</span>)</span><br><span class="line">        self.file.close</span><br></pre></td></tr></table></figure><p>然后在<code>setting.py</code>中开启自定义的<code>pipline</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    #    &apos;spider_demo.pipelines.SpiderDemoPipeline&apos;: 300,</span><br><span class="line">    &apos;spider_demo.pipelines.JsonPipline&apos;: 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于随机化UA，先说明添加UA的原理</p><p><code>scrapy</code>首先会读取<code>setting.py</code>里面关于UA的设置，然后经过<code>middleware</code>，如果没有进行自定义操作，就会将配置中的UA添加到请求头中。因此，想要实现随机化UA,实际上就可以在发起网页请求之前，在<code>Download Middleware</code>上做文章。</p><p>这里在<code>middleware.py</code>上做了修改,引入了第三方包<code>fake_useragent</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 随机更换user-agent</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, crawler)</span>:</span></span><br><span class="line">        super(RandomUserAgentMiddleware, self).__init__()</span><br><span class="line">        self.ua = UserAgent()</span><br><span class="line">        self.ua_type = crawler.settings.get(<span class="string">"RANDOM_UA_TYPE"</span>, <span class="string">"random"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(crawler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_ua</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> getattr(self.ua, self.ua_type)</span><br><span class="line"></span><br><span class="line">        request.headers.setdefault(<span class="string">'User-Agent'</span>, get_ua())</span><br></pre></td></tr></table></figure><p>同时在<code>setting.py</code>上做修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'spider_demo.middlewares.SpiderDemoDownloaderMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">     <span class="string">'spider_demo.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddleware.useragent.UserAgentMiddleware'</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机选择UA</span></span><br><span class="line"><span class="comment">#这个是自己设置的，依赖于fake-useragent</span></span><br><span class="line">RANDOM_UA_TYPE = <span class="string">'random'</span></span><br></pre></td></tr></table></figure><p>至此，一个简单的爬虫应用就实现了！</p><p>可以看见<code>UA</code>发生了变化</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200515090733339.png" alt></p><p>同时生成了一个<code>maoyan.json</code>文件</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20200515003238330.png" alt="json文件"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春招面经小记</title>
      <link href="/2020/05/12/interview/"/>
      <url>/2020/05/12/interview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-mxXjfEyC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-mxXjfEyC"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "追梦赤子心",              author: "GALA",              url: "http://music.163.com/song/media/outer/url?id=355992.mp3",              pic: "http://p2.music.126.net/XDncptlBJ4_LN3hLBx-8aw==/19061133579343591.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>从3月开始正式投递，到现在，大大小小经历了十几场笔试，来来回回也算经历了不少的面试，从一开始的踌躇满志到慢慢开始接受现实，这两个月来的经历确实让我开始认清自己，在梦想和现实中慢慢找寻平衡。</p><p>深感自己能力的不足，但是又不甘就这样停歇，既然决定将此作为毕生的事业，那就不要抱怨，一心一意，不断向前吧。</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-yj1z57.png" alt></p><a id="more"></a><p>分享这几个月的面试经验</p><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><p>一开始投提前批的时候期望挺高，结果投了几家公司都杳无音讯，倒是腾讯成为了我的首家面试公司。第一次面试感觉确实很紧张，虽然对腾讯的面试重点有所了解，但是准备依然不充分。面试官还是非常和蔼，这让我慢慢放松了下来，但是最后还是败在了算法题上面</p><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p><strong>计算机网络</strong></p><ol><li><p>IP报文头有哪些？</p><p>当时没有提前准备，凭着很早的记忆勉强说了出来</p></li><li><p><code>ttl</code>的作用</p><p>生命周期，标记IP数据包转发的最大跳数，防止在计算机网络上无休止地循环</p></li><li><p>拥塞控制</p></li><li><p><code>https</code>怎么优化（这个确实比较懵）</p><p>看了一下博客，大致总结这些：</p><ul><li><p><strong>False Start</strong>：客户端在发送 <code>Change Cipher Spec Finished</code> 同时发送应用数据（如 HTTP 请求），服务端在 TLS 握手完成时直接返回应用数据（如 HTTP 响应）。这样，应用数据的发送实际上并未等到握手全部完成，故谓之抢跑·</p><p>启用TLS False Start可以节省一个RTT时间，但是客户端和服务端都需要支持<code>NPN</code>/<code>ALPN</code>，需要采用支持前向保密的密码套件，即使用ECDHE进行密钥交换。</p></li><li><p>减少证书大小，例如 ECC（<code>Elliptic Curve Cryptography</code>，椭圆曲线密码学）证书</p></li><li><p><strong><code>Session Resumption</code></strong> 会话复用：将第一次握手辛辛苦苦算出来的对称密钥存起来，后续请求中直接使用。这样可以节省证书传送等开销，也可以将 TLS 握手所需 RTT 减少到一个。</p><p>实现方法：利用<code>sessioinID</code> 判别客户端身份，<code>Session Ticket</code> 是用只有服务端知道的安全密钥加密过的会话信息，最终保存在浏览器端。浏览器如果在 <code>ClientHello</code> 时带上了 <code>Session Ticket</code>，只要服务器能成功解密就可以完成快速握手。</p></li><li><p>选用合适的加密算法</p></li></ul></li><li><p>实现一个TCP服务器（一开始不懂具体要问什么知识点，面试官再补充了一下才大致明白应该是考察<code>IO</code>、<code>socket</code>这些的…）<br>要说出连接<code>socket</code>建立服务端客户端的具体过程<br>规则：</p><ol><li><p>正等待连接请求的一端有一个固定长度的连接队列，该队列中的连接已被TCP接受（完成三次握手），但还没有被应用层接受。注意：TCP接受一个连接是将其放入这个队列，而应用层接受连接是将其从该队列中移出。也就是<strong>使用*\</strong>.accept()函数来阻塞等待客户的请求**。</p></li><li><p>应用层指明该队列的最大长度，这个值被称为“积压值(backlog)”，范围为0~5。<strong>也就是使用*\</strong>.listen(5)函数来指定的队列长度。通常取值5**</p></li><li><p>当一个连接请求到达时，TCP使用一个算法，根据当前连接队列中的连接数来确定是否接收这个连接。这不同于积压值，积压值说明的是TCP监听的端点已被TCP接受而等待应用层接受的最大连接数。<strong>这个积压值对系统所允许的最大连接数，或者并发服务器所能并发处理的客户数，并无影响。</strong></p></li><li><p>如果对于新的连接请求，该TCP监听的端点的连接队列中还有空间，TCP模块将对SYN进行确认并完成连接的建立。但应用层只有在三次握手中的第三个报文段收到后才会知道这个新连接。另外，当客户进程的主动打开成功但服务器的应用层还不知道这个新连接时，它可能会认为服务器进程已经准备好接受数据了。此后，如果客户程序发送数据，<strong>服务器的TCP模块会将接收的数据放入缓存队列。</strong></p></li><li><p>如果对于新的连接请求，连接队列中已没有空间，TCP将不理会收到的SYN，也不发回任何报文段(包括RST)，这是一个软错误，而不是一个硬错误。如果应用层不能及时接受.listen(5)中的连接，达到积压值(5)，客户的主动打开最终也将超时</p><p><img src="/2020/05/12/interview/0_1322811079mRzu.gif" alt="0_1322811079mRzu"></p></li></ol></li><li><p><code>nginx</code>负载均衡的策略（当时真的没有复习到这..）</p></li></ol><ul><li><code>weight</code>权重判断<ul><li>时间片轮转</li></ul></li><li><code>fair</code>根据响应时间<ul><li><code>ip hash</code></li></ul></li><li><code>url hash</code></li></ul><p><strong>Linux</strong></p><ol><li>进程间通信的方式，最常使用的有哪些？</li><li>进程的内存结构，堆栈的区别</li><li>管道的注意事项</li><li>如何避免死锁<ol><li><strong>避免多次锁定</strong>。尽量避免同一个线程对多个 <code>Lock</code>进行锁定。例如上面的死锁程序，主线程要对 A、B 两个对象的 <code>Lock</code>进行锁定，副线程也要对 A、B 两个对象的 <code>Lock</code>进行锁定，这就埋下了导致死锁的隐患。</li><li><strong>具有相同的加锁顺序</strong>。如果多个线程需要对多个 <code>Lock</code>进行锁定，则应该保证它们以相同的顺序请求加锁。比如上面的死锁程序，主线程先对 A 对象的 <code>Lock</code>加锁，再对 B 对象的 <code>Lock</code>加锁；而副线程则先对 B 对象的 <code>Lock</code>加锁，再对 A 对象的 <code>Lock</code>加锁。这种加锁顺序很容易形成嵌套锁定，进而导致死锁。如果让主线程、副线程按照相同的顺序加锁，就可以避免这个问题。</li><li><strong>使用定时锁</strong>。程序在调用 <code>acquire()</code> 方法加锁时可指定 <code>timeout</code>参数，该参数指定超过 <code>timeout</code>秒后会自动释放对 <code>Lock</code>的锁定，这样就可以解开死锁了。</li><li><strong>死锁检测</strong>。死锁检测是一种依靠算法机制来实现的死锁预防机制，它主要是针对那些不可能实现按序加锁，也不能使用定时锁的场景的。</li></ol></li></ol><p><strong>java</strong></p><ol><li><code>hashmap</code>的内部结构，介绍了<code>hash</code>算法、<code>rehash</code>机制</li></ol><p><strong>数据库</strong></p><ol><li><code>innodb</code>和<code>myISam</code>的区别</li><li><code>redis</code>的数据结构，跳表的实现  随机化层数的算法</li><li>完全二叉树的深度</li></ol><p><strong>数据结构</strong></p><ol><li>归并排序的时间复杂度</li><li>深度优先遍历和广度优先遍历使用的数据结构（栈）</li><li><code>topK</code>问题</li></ol><p><strong>场景题</strong></p><ol><li><p>两个文件存储qq号，如何去重</p><p><code>bitMap</code>+ 布隆过滤器</p></li><li><p>分布式ID，最节约内存的方法</p></li><li><p>如果数据库存分布式ID，如何保证分布式ID的唯一性，（数据库同步）</p><ul><li>唯一索引自增</li><li><code>redis</code>自增</li><li><code>UUID</code></li><li>雪花算法</li></ul></li></ol><p><strong>代码题</strong></p><ol><li><p>两个树，用数组表示，结合成一个有序数组</p><p>做的很勉强，其实不用想太多，直接树化，中序遍历</p></li></ol><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>根据一面的情况，自己也感觉应该是挂了 ，但居然还有二面。虽说是二面，实际上感觉就是在刷<code>kpi</code>，甚至没有给代码题，问的问题都很敷衍，感觉就是根据题库随机抽题问，面完后反手就给挂。，真不理解这样的面试意义何在，从面试者的角度这样从一开始就没有结果的面试就是在挥霍我们的期待，有点败坏好感。</p><p><strong>计算机网络</strong></p><ol><li>IP报文头</li><li>传输层报文头</li><li>为什么出现IP报文</li><li>一个文本怎么从一个主机传到另一个主机</li></ol><p><strong>linux</strong></p><ol><li><p>基础命令</p></li><li><p>虚拟地址空间</p></li><li><p>c文件到可执行文件的编译过程</p></li><li><p>动态链接和静态链接</p></li><li><p>系统库和标准库的区别</p><p>一个是商家自行开发，一个是语言标准的函数库</p></li></ol><p><strong>数据库</strong></p><ol><li>查询语句</li><li>创建索引的sql语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br></pre></td></tr></table></figure><p><strong>web开发</strong></p><ol><li>你了解过一些安全方面的东西吗</li><li>怎么调试BUG</li></ol><p><strong>情景题</strong></p><ol><li><p>黑帽子白帽子，至少一人戴黑帽子，如果自己是黑帽子则鼓掌，三次开关灯后才有人鼓掌，问黑帽子几顶（想了好久才想出来的，感觉有点博弈论的感觉）</p><p>三顶。如果是一个人戴黑的,第一次熄灯他发现所有人都是白帽,所以他必然黑帽；可是没有人鼓掌,证明所有人看到其他人有戴黑帽的,如果是两个人,那么第二次熄灯那两个人会一起鼓掌,因为他们知道肯定不只一个黑帽子,可自己只看到一个黑帽子,所以肯定自己也是黑帽子,以此类推,结果就是,熄几次灯几个黑帽子</p></li><li><p>两城市距离s，两列车AB相向而行，一无人机速度c，快于AB，飞到AB后返回，问最后AB相遇的时候无人机飞的距离</p><p>AB相向而行,距离为s,速度就是<code>a+b</code>,时间就为<code>s/（a+b)</code><br>鸽子的速度为c,它直到AB相遇消耗的时间为<code>s/（a+b)</code>那么它所飞行的路程=速度*时间=<code>c*[s/（a+b)]=cs/(a+b)</code></p></li></ol><hr><p>5月15日更。</p><p>正式批明明没有做笔试，结果居然还有电话面。。这个时候我已经没有在准备面试了，所以答得不是很好。。这次的面试官就没有上一次那么亲切了，有点咄咄逼人，不管怎样还是自己技术太菜了。</p><h3 id="正式批电话面"><a href="#正式批电话面" class="headerlink" title="正式批电话面"></a>正式批电话面</h3><ol><li>UDP和TCP  java怎么实现的？</li><li>现在for循环10词连接UDP，端口号是否会释放(SQL连接是否会释放)</li><li>如何实现共享内存？（内存淘汰机制，线程安全性）</li><li>大文件存放字符串，求出现次数最多的TOP5</li><li>一张表，时间，用户ID 奖品ID  班级 求 XX时间段中获奖次数最多的学生ID和领取次数最多的奖品ID</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT stuId,count(*) as count FROM (SELECT *  FROM tab WHERE time &lt; xxx AND time &gt; xxx)  GROUP BY stuid ORDER BY  count(*) LIMIT 5</span><br></pre></td></tr></table></figure><h2 id="蘑菇街"><a href="#蘑菇街" class="headerlink" title="蘑菇街"></a>蘑菇街</h2><p>蘑菇街是我面试了才知道的公司，确实公司现在的运营也不是很好，但不得不说还是一家标准的互联网公司，在后面也通过一些博客专栏作者比如敖丙了解到了公司的内部情况和未来的发展，不得不说对我的准备和未来规划还是起到了一定的影响。最后终止于二面（话说刚看到公司裁员就收到了感谢信…)倒也没什么遗憾的。</p><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>一面问基础问的有点偏。。</p><p><strong>Java基础</strong></p><ol><li><code>swap(Integer a,Ingteger b)</code>如何交换<ul><li>使用数组传参（这道题不允许）</li><li>使用自定义类，<code>set</code>、<code>get</code>（这道题不允许）</li><li>由于<code>java</code>中对于非原生类型都说传递引用，而对于原生数据类型都说通过传递值的方式传递参数的，如果仅仅通过传递值的方式来交换a,b的值，在<code>Java</code>中是不可能实现的</li><li><code>Integer</code>虽然不是原生类型，但是<code>jvm</code>对这种类型添加了缓冲池，每次</li></ul></li></ol><p><a href="https://www.teakki.com/p/57df75c01201d4c1629b8821" target="_blank" rel="noopener">Java 交换两个变量的数值实现方法 </a></p><p><a href="https://my.oschina.net/u/1031233/blog/707451" target="_blank" rel="noopener">这种方法理论上可行，但是实际操作行不通</a></p><p><strong>Mybatis使用原理</strong></p><ol><li>内部原理</li><li>${} 和 #{}的区别</li></ol><p>Spring</p><ol><li>事务</li></ol><p><strong>mysql</strong></p><ol><li><p>事务的实现原理</p><p>在事物进行过程中，未结束之前，<code>DML</code>语句是不会更改底层数据，只是将历史操作记录一下，在内存中完成记录。只有在事物结束的时候，而且是成功的结束的时候，才会修改底层硬盘文件中的数据</p><p><code>mysql</code>任意一条<code>DML</code>语句代表事务的开启，同时默认自动提交事务，如果要开启回滚，需要手动提交事务。</p></li><li><p>事务的提交和回滚是如何实现的</p><ul><li><code>begin</code>/<code>start transaction</code> 命令并不是一个事务的起点，在执行到它们之后的第一个操作<code>InnoDB</code>表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用<code>start transaction with consistent snapshot</code> 这个命令。</li></ul></li></ol><ol start="3"><li><p>已知索引<code>A(a,b,c)</code></p><p>现在有<code>sql</code>语句：<code>where b &gt; 1 and a = 1and c =1</code></p><p>请问是否能应用索引？</p><p>现在有<code>sql</code>语句：<code>where a = 1 and b &gt; 1 and c =1</code></p><p>请问是否能应用索引？</p><p>考的是最左匹配原则</p></li><li><p><code>sql</code>语句优化的过程</p></li></ol><p><strong>项目架构</strong></p><ol><li><p>介绍一下项目</p></li><li><p>多线程技术的考量</p></li><li><p>消息队列</p></li><li><p>如何防止消息被重复消费</p></li><li><p>如何防止消息被重复生产</p><p>仅考虑项目出现重复消息推送，可以加同步锁</p></li><li><p><code>Kafka</code>的消费机制</p><p>这个算给自己挖坑的。。明明不太熟悉还要提233</p></li></ol><p><strong>总结</strong></p><ul><li>基础知识掌握不牢，尤其是索引这块具体描述的时候无法清楚描述</li><li>讲解项目的时候给自己挖坑了</li><li>情景题的临场发挥能力，一些基础的讲述能力，MVCC完全没有讲好</li></ul><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>过了好久的二面。。</p><ol><li><p>问了项目应用</p></li><li><p><code>jwt</code>的原理</p></li><li><p>如何保证数据的一致性</p></li><li><p>结合应用场景谈谈<code>redis</code>如何保障数据一致性</p><p>我还是没答上来，注意这和重复提交、分布式锁是不同的</p></li><li><p>文件上传为什么不能放在本地（结合无状态考虑）</p></li><li><p>FTP协议上传文件</p><p>文件存放在本地的话无法通过用户登录知道用户信息（参照JWT）</p></li><li><p>线上出现数据缓存不一致问题怎么解决？</p></li></ol><p><a href="https://www.cnblogs.com/youngerchina/p/5624459.html" target="_blank" rel="noopener">分布式文件系统：原理、问题与方法</a></p><h2 id="作业帮"><a href="#作业帮" class="headerlink" title="作业帮"></a>作业帮</h2><p>作业帮面试体验还行吧，看的出来问的问题不是很深，和大厂果然没法比，最后收了offer，但是拒了</p><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p><strong>项目架构</strong></p><ol><li><p>简单讲讲你的项目架构、内容、负责部分</p></li><li><p>怎么实现的爬取</p></li><li><p>怎么实现的订阅服务</p></li></ol><p><strong>数据库</strong></p><ol><li><p><code>redis</code>的数据结构</p></li><li><p><code>redis</code>的分布式锁实现</p></li><li><p><code>redis</code>各种数据结构的应用场景</p></li><li><p><code>redis</code>自增如何保证原子性</p><p><code>redis</code>是单线程的</p></li><li><p><code>mysql</code>事务、<code>ACID</code></p></li><li><p>B+树的实现机制</p></li></ol><p><strong>web方面</strong></p><ol><li>怎么理解restful设计规范</li></ol><p><strong>代码</strong></p><ol><li>回型打印二维数组</li></ol><h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><ol><li>项目</li></ol><p><strong>分布式事务</strong></p><ol><li>分布式事务了解过吗？</li><li>分布式事务的特点</li><li>二段式提交  三段式提交</li></ol><p><strong>计算机基础</strong></p><p>…忘记了，比较常规</p><p><strong>算法</strong></p><ol><li>排序的时间复杂度</li><li>递归的时间复杂度</li></ol><h2 id="OPPO技术面"><a href="#OPPO技术面" class="headerlink" title="OPPO技术面"></a>OPPO技术面</h2><p>真不知道oppo光靠一面技术面还没有代码是怎么选人的。。</p><ol><li><p>数组和链表的底层区别</p></li><li><p>数组的查询和链表的内存查询有什么不同</p><p>在操作系统<strong>内存管理</strong>方面也有不同。正因为数组与链表的物理存储结构不同，在内存预读方面，内存管理会将连续的存储空间提前读入缓存（局部性原理），所以数组往往会被都读入到缓存中，这样进一步提高了访问的效率，而链表由于在内存中分布是分散的，往往不会都读入到缓存中，这样本来访问效率就低，这样效率反而更低了。在实际应用中，因为链表带来的动态扩容的便利性，在做为算法的容器方面，用的更普遍一点。</p></li></ol><p><strong>mysql</strong></p><ol><li><p>线程是异步的吗</p><ul><li>部分是部分不是</li><li>IO线程异步的原因是并行执行，同时可以刷新邻页</li></ul></li><li><p>异步通知会出现什么问题</p></li></ol><ol start="3"><li>如何保证断电后数据恢复</li></ol><p>数据一致性问题</p><ol><li><p>在<code>MySQL5.5</code>以及之前， <code>slave</code>的 <code>SQL</code>线程执行的<code>relay log</code> 的位置只能保存在文件（<code>relay-log.info</code>）里面，并且该文件默认每执行 <code>10000</code>次事务做一次同步到磁盘， 这意味着 <code>slave</code>意外 <code>crash</code>重启时， SQL 线程执行到的位置和数据库的数据是不一致的，将导致复制报错，如果不重搭复制，则有可能会导致数据不一致。</p></li><li><p><code>MySQL 5.6</code> 引入参数<code>relay_log_info_repository</code>，将该参数设置为 <code>TABLE</code>时， MySQL 将 SQL 线程执行到的位置存到<code>mysql.slave_relay_log_info</code> 表，这样更新该表的位置和 SQL 线程执行的用户事务绑定成一个事务，这样 slave 意外宕机后， slave 通过 innodb 的崩溃恢复可以把 SQL 线程执行到的位置和用户事务恢复到一致性的状态。</p></li><li><p><code>MySQL 5.6</code>引入 <code>GTID</code>复制，每个 <code>GTID</code>对应的事务在每个实例上面最多执行一次， 这极大地提高了复制的数据一致性；</p></li><li><p><code>MySQL 5.5</code>引入半同步复制， 用户安装半同步复制插件并且开启参数后，设置超时时间，可保证在超时时间内如果 <code>binlog</code>不传到 slave 上面，那么用户提交事务时不会返回，直到超时后切成异步复制，但是如果切成异步之前用户线程提交时在 master 上面等待的时候，事务已经提交，该事务对 master上面的其他 <code>session</code>是可见的，如果这时 master 宕机，那么到 slave 上面该事务又不可见了，该问题直到 5.7 才解决；</p></li><li><p><code>MySQL 5.7</code> 引入无损半同步复制，引入参 <code>rpl_semi_sync_master_wait_point</code>，该参数默认为 <code>after_sync</code>，指的是在切成半同步之前，事务不提交，而是接收到 slave 的 ACK 确认之后才提交该事务，从此，复制真正可以做到无损的了。</p></li></ol><p>延时性·</p><ul><li>5.5 是单线程复制， 5.6 是多库复制（对于单库或者单表的并发操作是没用的）， 5.7 是真正意义的多线程复制，它的原理是基于<code>group commit</code>， 只要master 上面的事务是 <code>group commit</code>的，那 slave 上面也可以通过多个 worker线程去并发执行。 和 MairaDB10.0.0.5 引入多线程复制的原理基本一样。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump用于备份，记录一下</span><br></pre></td></tr></table></figure><p><strong>redis</strong> </p><ol><li><p>锁提前释放了怎么办</p></li><li><p>主从同步怎么防止锁不丢失</p><p><code>redlock</code></p><p>实现分布式锁的一个非常重要的点就是set的value要具有唯一性，<code>redisson</code>的<code>value</code>是怎样保证<code>value</code>的唯一性呢?答案是<strong><code>UUID+threadId</code></strong></p></li><li><p>如果锁丢失了怎么解决</p></li><li><p><code>epoll</code>和<code>poll</code></p></li></ol><p><strong>多线程</strong></p><ol><li><p><code>volatile</code>和锁的区别</p></li><li><p>多线程中线程出现异常会怎样</p><ul><li>线程代码中产生异常的话，那么这个线程的生命周期就结束了，这种情况称为线程泄漏。</li><li>注意，只是这个线程的生命结束了，但其他的线程还是活着的。如果是代码有 BUG，那其他线程走到这一块估计也会挂掉的。</li></ul></li><li><p><code>FileStream</code></p></li></ol><h2 id="阿里电话面"><a href="#阿里电话面" class="headerlink" title="阿里电话面"></a>阿里电话面</h2><p>阿里确实要求很高，流程也很长，自己面的时候总归有点放弃的感觉。但是从电话面中我确实体验到了什么叫深挖项目，几乎对每一个细节都进行了深挖，只要自己稍微给自己挖坑就凉凉了。。这也算得到了一种经验吧</p><p>心得：主要在于对待架构的需求，为什么需要这样做</p><ol><li><p>做项目的时候遇到什么样的问题？答：跨域</p><ul><li>跨域问题怎么出现的协议 + 域名+ 端口</li><li>解决方法：<code>nginx</code>或者请求头添加允许跨域标识</li></ul></li><li><p>分布式锁。单机为什么要用分布式锁？</p></li><li><p>多个请求同时插入如何保证幂等性</p></li><li><p>不用<code>redis</code>防止重复请求数据库</p><p><strong>幂等（idempotent、idempotence）</strong></p><p>在编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“<code>getUsername()</code>和<code>setTrue()</code>”函数就是一个幂等函数. </p></li></ol><p><a href="https://my.oschina.net/vshcxl/blog/1841908" target="_blank" rel="noopener">高并发的核心技术-幂等的实现方案</a></p><p><a href="https://my.oschina.net/huangweiindex/blog/1843927" target="_blank" rel="noopener">分布式系统后台如何防止重复提交</a></p><ol start="5"><li><p>如何防止重复提交</p><ul><li><p><code>redis</code>+计数器，大于1表示重复，问题就转换成如何生成唯一ID的情景</p></li><li><p><code>mysql</code>的唯一索引，出现报错就处理返回</p></li><li><p><code>token</code>机制：防止页面重复提交。</p><p>原理上通过<code>session token</code>来实现的(<strong>也可以通过<code>redis</code>来实现</strong>)。当客户端请求页面时，服务器会生成一个随机数<code>Token</code>，并且将<code>Token</code>放置到<code>session</code>当中，然后将<code>Token</code>发给客户端（一般通过构造<code>hidden</code>表单）。<br>下次客户端提交请求时，Token会随着表单一起提交到服务器端。</p><p>服务器端第一次验证相同过后，会将<code>session</code>中的<code>Token</code>值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的<code>Token</code>没变，但服务器端<code>session</code>中<code>Token</code>已经改变了。</p></li></ul></li></ol><h2 id="字节一面"><a href="#字节一面" class="headerlink" title="字节一面"></a>字节一面</h2><p>字节确实面的很紧张。一来是因为字节的机遇确实大，只要搏一搏就有很大的希望进去，但另一方面，算法又是我的薄弱项，于是自己总是在不断的准备，犹豫，造成了直到面试也是出现了比以往还有激烈的兴趣反应。这就是自己的心态管理还不到位的缘故。最后期望越大，失望越大。</p><p><strong>项目</strong></p><ol><li>分布式锁实现</li></ol><p><strong>数据库</strong></p><ol><li><code>mysql</code>的事务特性和隔离级别</li></ol><p><strong>多线程</strong></p><ol><li>同步异步、阻塞非阻塞</li></ol><p><strong>git和maven</strong></p><ol><li><code>git</code>怎么修改已提交的文件</li><li><code>maven</code>的多模块是什么</li></ol><p><strong>设计模式</strong></p><ol><li>知道的设计模式</li><li>单例模式的写法(败笔！绝对的败笔，可见自己平时没有完全理解，一直以为自己能写出来结果在现场却掉链子了)</li></ol><p><strong>编程题</strong></p><ol><li>二叉树求和  回溯</li></ol><p><strong>智力题</strong></p><ol><li><p>单极管 两两触碰能指示对方的好坏，好的能指示正确结果，坏的指示结果不确定，现在好的数量大于<code>n/2</code>，问怎么将好的和坏的区分出来？时间复杂度多少？</p><p>只要 和所有比对，好的大于<code>1/2</code>就可以确定他是好的</p></li></ol><h2 id="美团一面"><a href="#美团一面" class="headerlink" title="美团一面"></a>美团一面</h2><p>美团是我期望最大的公司，我也为此做出了自以为最充足的准备。但是最后依然惨淡收场。虽然算法题没有写出来是最大的问题，但是这次给我最大的感悟是面试官在面试中指出了我的性格问题，这是第一次我被指出技术以外的问题，这个问题也是我一直不自知的。那就是我在面试中体现出来的强答，自以为是在赌运，但在面试官面前，不懂装懂是最大的无知。</p><p><strong>知之为知之，不知为不知，是智也</strong>。</p><p>这次面试是值得的。</p><ol><li><p><code>hashmap</code>负载因子？（这个我那时候想错了，是我的失误，但在面试官看来只是我的不懂装懂，因此给他留下了不好的印象）</p></li><li><p>B+树和红黑树的区别</p><p>红黑树性能稳定但为了维持稳定需要更多开销，不适合实现快速查找的功能</p></li></ol><p><strong>算法题</strong></p><ol><li>倒水问题： 10 7 3</li></ol><h2 id="头条一面"><a href="#头条一面" class="headerlink" title="头条一面"></a>头条一面</h2><p>字节过后的头条，这时的我对面试已经疲倦了，整体的面试状态非常不好，自然没有过</p><ol><li><p><code>linux</code>  保持后台运行的命令</p><ol><li>把程序放后台运行，简单的话，只要在命令后面加一个“<code>&amp;</code>”， 如：<code>php test.php &amp;</code></li><li>或者在运行命令后，按一下 <code>Ctrl+Z</code>，如运行<code>php test.php</code>后，按一下<code>Ctrl+Z</code></li><li>程序在后台运行了，但还是看到输出信息，可以用管道命令把输出定向到<code>/dev/null</code>，如：<code>php test.php &gt;/dev/null</code></li><li>普通的输出信息看不到了，但还是看到一些信息，如错误信息等，需要再添加<code>2&gt;&amp;1</code>命令，如：<code>php test.php &gt;/dev/null 2&gt;&amp;1</code></li><li>程序在后台运行了，但退出当前会话，发现程序还是停止了，此时要用<code>nohup</code>命令，如：<code>nohup php test.php &gt;/dev/null 2&gt;&amp;1</code></li><li>使用<code>nohup</code>后，应确保用<code>exit</code>命令退出当前账户，非常正常退出或结束当前会话，在后台运行的作业也会终止</li><li>命令在后台运行了，怎么查看？使用jobs命令可列出当前会话的后台任务，<code>jobs -l</code> 能查看到 <code>PID</code>，进而可以用<code>kill</code>终止某个任务</li><li>是终命令可能是：<code>nohup php test.php &gt;/dev/null 2&gt;&amp;1 &amp;</code></li></ol></li><li><p><code>linux</code>查看<code>cpu</code>使用率的命令</p></li><li><p><code>java</code>   查看<code>CPU</code>使用参数的命令</p></li><li><p><code>mysql</code>索引查询</p></li></ol><p><strong>算法</strong></p><ol><li><p>平方根 </p></li><li><p>跳台阶  动态规划！！</p></li></ol><h2 id="CVTE电话面"><a href="#CVTE电话面" class="headerlink" title="CVTE电话面"></a>CVTE电话面</h2><p>主要是数据库设计相关有点新意</p><h2 id="京东电话面"><a href="#京东电话面" class="headerlink" title="京东电话面"></a>京东电话面</h2><p>搞突袭，都5月了才开始，着实有点尴尬</p><ol><li><p>自动装箱拆箱</p></li><li><p><code>int</code>存放在哪里</p></li><li><p>常量池  基本数据类型l</p></li><li><p>创建线程有哪几种方法</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大道至简——virtualenv介绍</title>
      <link href="/2020/05/09/virtualenv/"/>
      <url>/2020/05/09/virtualenv/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>python</code>因为丰富的扩展库被大家所青睐，但是当开发环境中的第三方包越来越多的时候，基于该开发环境开发的应用越来越难以移植、迁移。像在操作系统中我们可以用容器（例如<code>docker</code>）将开发环境和生产环境分开，在做python的应用开发的时候，我们同样需要给每个应用提供一个隔离的运行环境，从而避免增加不必要的版本冲突和排查成本。</p><p>virtualenv就是干这行的。</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-ymlx8k.jpg" alt></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装其实非常简单。</p><p>首先你必须安装好<code>pip</code>(装python的时候没有人不装吧？)</p><p>然后输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>等待安装完成就大功告成了！</p><blockquote><p>注：Python3 已经内置了 venv 模块,实际上不需要手动安装即可。查看是否安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv --help</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>只要在自己希望创建虚拟环境的位置，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv test</span><br></pre></td></tr></table></figure><p>等待一段时间，即可创建一个名称为“test”的虚拟环境，以后，在这个虚拟环境下下载第三方的包都会被放在这个文件夹下面。</p><p>下图表示创建成功：</p><p><img src="http://cdn.zblade.top/qiniu_img/virtual_1.png" alt></p><p>然后你的虚拟环境的所有配置都存放在test文件夹中，</p><p>默认的目录结构如下（Windows 10 环境下）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>test</span><br><span class="line"><span class="bullet">- </span>Inculde</span><br><span class="line"><span class="bullet">- </span>Lib</span><br><span class="line"><span class="bullet">- </span>Script</span><br><span class="line"><span class="bullet">- </span>tcl</span><br><span class="line"><span class="bullet">- </span>LICENCE.txt</span><br></pre></td></tr></table></figure><blockquote><p>旧版命令创建的虚拟环境会默认继承实际环境存在的第三方包，如果需要创建一个干净的虚拟环境</p><p>输入：<code>virtualenv --no-site-packages test</code> </p><p>新版默认创建无第三方包的纯净环境</p></blockquote><h3 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><p><code>windows</code>系统进入<code>Script</code>文件夹，执行<code>activate.bat</code>文件</p><p><img src="http://cdn.zblade.top/qiniu_img/virtual_2.png" alt></p><p><code>linux</code>执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source test/bin/activate</span><br></pre></td></tr></table></figure><blockquote><p>test是你创建的虚拟环境所在的文件夹</p></blockquote><p>当命令行前面出现虚拟环境名说明已经切换到虚拟环境中，之后你安装的第三方依赖包都会下载到这个虚拟环境中，从而不影响本机实际的python运行环境。实际上也是将这些依赖下载到这个虚拟环境所在的文件夹中</p><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><p><code>windows</code>输入</p><p><img src="http://cdn.zblade.top/qiniu_img/virtual_3.png" alt></p><p><code>linux</code>系统执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source test/bin/deactive</span><br></pre></td></tr></table></figure><h3 id="交接环境"><a href="#交接环境" class="headerlink" title="交接环境"></a>交接环境</h3><p>这个做法比较常见，出现在你需要将自己的开发环境转移到另外一台电脑或移交给某人的时候，需要将自己的虚拟环境拷贝到另外的地方</p><p>做法是</p><ol><li>先冻结环境包，将包的版本信息保存在一个文本文件中</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip freeze &gt; requirements.txt</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在另外一个环境中直接下载所有依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv [OPTIONS] DEST_DIR</span><br></pre></td></tr></table></figure><p>选项: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">–version </span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前版本号。 </span></span><br><span class="line">-h, –help </span><br><span class="line"><span class="meta">#</span><span class="bash">显示帮助信息。 </span></span><br><span class="line">-v, –verbose </span><br><span class="line"><span class="meta">#</span><span class="bash">显示详细信息。 </span></span><br><span class="line">-q, –quiet </span><br><span class="line"><span class="meta">#</span><span class="bash">不显示详细信息。 </span></span><br><span class="line">-p PYTHON_EXE, –python=PYTHON_EXE </span><br><span class="line"><span class="meta">#</span><span class="bash">指定所用的python解析器的版本，比如 –python=python2.5 就使用2.5版本的解析器创建新的隔离环境。 默认使用的是当前系统安装(/usr/bin/python)的python解析器 </span></span><br><span class="line">–clear </span><br><span class="line"><span class="meta">#</span><span class="bash">清空非root用户的安装，并重头开始创建隔离环境。 </span></span><br><span class="line">–no-site-packages </span><br><span class="line"><span class="meta">#</span><span class="bash">令隔离环境不能访问系统全局的site-packages目录。 </span></span><br><span class="line">–system-site-packages </span><br><span class="line"><span class="meta">#</span><span class="bash">令隔离环境可以访问系统全局的site-packages目录。 </span></span><br><span class="line">–unzip-setuptools </span><br><span class="line"><span class="meta">#</span><span class="bash">安装时解压Setuptools或Distribute </span></span><br><span class="line">–relocatable </span><br><span class="line"><span class="meta">#</span><span class="bash">重定位某个已存在的隔离环境。使用该选项将修正脚本并令所有.pth文件使用相当路径。 </span></span><br><span class="line">–distribute </span><br><span class="line"><span class="meta">#</span><span class="bash">使用Distribute代替Setuptools，也可设置环境变量VIRTUALENV_DISTRIBUTE达到同样效要。 </span></span><br><span class="line">–extra-search-dir=SEARCH_DIRS </span><br><span class="line"><span class="meta">#</span><span class="bash">用于查找setuptools/distribute/pip发布包的目录。可以添加任意数量的–extra-search-dir路径。 </span></span><br><span class="line">–never-download </span><br><span class="line"><span class="meta">#</span><span class="bash">禁止从网上下载任何数据。此时，如果在本地搜索发布包失败，virtualenv就会报错。 </span></span><br><span class="line">–prompt==PROMPT </span><br><span class="line"><span class="meta">#</span><span class="bash">定义隔离环境的命令行前缀。</span></span><br></pre></td></tr></table></figure><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>再看一下virtual环境的目录（Windows 10环境下）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[虚拟环境名]</span><br><span class="line"><span class="bullet">- </span>Inculde</span><br><span class="line"><span class="bullet">- </span>Lib</span><br><span class="line"><span class="bullet">- </span>Script</span><br><span class="line"><span class="bullet">- </span>tcl</span><br><span class="line"><span class="bullet">- </span>LICENCE.txt</span><br></pre></td></tr></table></figure><ul><li>Include ： </li><li>Lib：库文件</li><li>Script： 脚本文件</li><li>tcl</li></ul><p>首先介绍一下python的运行环境。</p><h2 id="在VScode中愉快玩耍"><a href="#在VScode中愉快玩耍" class="headerlink" title="在VScode中愉快玩耍"></a>在VScode中愉快玩耍</h2><blockquote><p>如何在<code>VScode</code>中部署<code>virtual</code>环境</p></blockquote><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>在项目的<code>\.vscode\launch.json</code>文件里加了一句:<br><code>&quot;pythonPath&quot;: &quot;D:\\myproject\\venv\\Scripts\\python.exe&quot;,</code></p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><blockquote><p>本人亲测有效</p></blockquote><p>要在<code>VScode</code>中使用<code>Python</code>的<code>virtualenv</code>虚拟环境,首先在设置同添加虚拟环境所在目录和虚拟环境的识别规则:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "python.venvPath": "E:\\envs",</span><br><span class="line">  "python.venvFolders": [</span><br><span class="line">    "envs",</span><br><span class="line">    ".pyenv",</span><br><span class="line">    <span class="string">".direnv',</span></span><br><span class="line">    ".env"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后当你想要切换虚拟环境的时候只需要通过命令面板<code>Python: Select Interpreter</code>就会列出所有的虚拟环境.</p><blockquote><p>它其实是在你的项目根目录下新建了一个 <code>./.vscode/settings.json</code> 配置文件，将解释器路径选项写在里面了，该文件称为工作区设置，可以针对每个项目单独设置配置项。</p></blockquote><h3 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h3><p>在命令行激活虚拟环境后，直接用 <code>code</code>打开项目文件夹就行了。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">XXX&gt;</span><span class="bash">venv\scripts\activate</span></span><br><span class="line">(venv) XXX&gt;code project_name/</span><br></pre></td></tr></table></figure><p><a href="http://www.cppcns.com/jiaoben/python/247532.html" target="_blank" rel="noopener">使用 Visual Studio Code（VSCode）搭建简单的Python+Django开发环境的方法步骤</a></p><p><a href="https://www.cnblogs.com/thunderLL/p/8995466.html" target="_blank" rel="noopener">VScode中支持Python虚拟环境</a></p><p><a href="https://www.cnblogs.com/gotolearn/p/11050538.html" target="_blank" rel="noopener">在vscode中启用python的virtualenv</a></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="使用virtualenvwrapper管理虚拟环境"><a href="#使用virtualenvwrapper管理虚拟环境" class="headerlink" title="使用virtualenvwrapper管理虚拟环境"></a>使用virtualenvwrapper管理虚拟环境</h3>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合源码学习（1）</title>
      <link href="/2020/03/10/collection1/"/>
      <url>/2020/03/10/collection1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>map类相关知识点总结</p><p>主要关注map相关的源码</p><p>HashTable、HashMap、HashSet 、TreeMap…</p><p><img src="http://cdn.zblade.top/qiniu_img/09222021-e4539501a3234392b8769dc0202eb06a.jpg" alt></p><a id="more"></a><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><blockquote><p>基于位桶+链表实现。</p></blockquote><ul><li>继承Dictionary（陈旧）</li><li>实现Cloneable，可被克隆</li><li>实现Serializable，可被序列化</li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"><span class="comment">//0x7FFFFFFF转换为10进制之后是Intger.MAX_VALUE,也就是2^31 - 1</span></span><br><span class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br></pre></td></tr></table></figure><p>很容易看出<code>Hashtable</code>的<code>hash</code>算法首先使得<code>hash</code>的值小于等于整型数的最大值，再通过<code>%</code>运算实现均匀散射。</p><p>==<strong>由于计算机是底层的运算是基于2进制的，所以HashMap的hash算法使用&amp;运算代替%运算，在运算速度上明显HashMap的hash算法更优</strong>。==</p><p><a href="https://blog.csdn.net/liuqiyao_01/article/details/14475159" target="_blank" rel="noopener">为什么一般hashtable的桶数会取一个素数</a></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">        initialCapacity = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    table = <span class="keyword">new</span> Entry&lt;?,?&gt;[initialCapacity];</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hashtable</code>底层数组的长度可以为任意值，这就造成了当底层数组长度为合数的时候，<code>Hashtable</code>的hash算法散射不均匀，容易产生hash冲突。所以，可以清楚的看到<code>Hashtable</code>的默认构造函数底层数组长度为11（质数），至于为什么<code>Hashtable</code>的底层数组用质数较好，请<a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/liuqiyao_01/article/details/14475159" target="_blank" rel="noopener">参考博文</a>；</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><ul><li>value不能为null</li><li>线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            V old = entry.value;</span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab = table;</span><br><span class="line">        hash = key.hashCode();</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>HashTable</code>到了jdk1.8了内部结构并没有实质优化，继续使用<strong>数组+链表</strong>的方式实现。</p><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = table.length;</span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">            <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> Entry&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    table = newMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = old;</span><br><span class="line">            old = old.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">            <span class="comment">//使用头插法将链表反序</span></span><br><span class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hashtable</code>的扩容将先创建一个长度为原长度<code>2</code>倍的数组，<strong>再使用头插法将链表进行反序</strong>。</p><h3 id="和HashMap的不同之处"><a href="#和HashMap的不同之处" class="headerlink" title="和HashMap的不同之处"></a>和HashMap的不同之处</h3><table><thead><tr><th></th><th align="left">HashMap</th><th align="left">Hashtable</th></tr></thead><tbody><tr><td>继承机制</td><td align="left">继承AbstractMap</td><td align="left">继承Dictionary</td></tr><tr><td>线程安全</td><td align="left">线程不安全</td><td align="left">put、remove等方法均被synchronized修饰，同步，线程安全</td></tr><tr><td>参数设置</td><td align="left">key、value均可为null</td><td align="left">key、value均<strong>不可</strong>为null</td></tr><tr><td>结构</td><td align="left">由<strong>位桶+链表+红黑树</strong>构成</td><td align="left">由<strong>位桶+链表</strong>构成</td></tr><tr><td>添加entry</td><td align="left">添加新entry时，放置链表<strong>尾部</strong></td><td align="left">添加新entry时，放置链表<strong>头部</strong></td></tr><tr><td>构造上</td><td align="left">底层数组的长度必须为<code>2^n</code> ,默认长度16</td><td align="left">底层数组的长度可以为任意值，默认长度11</td></tr><tr><td>Hash算法上</td><td align="left">hash算法通过非常规的设计，将底层table长度设计为2^n（合数）并<strong>使用了&amp;运算来代替%运算以减少性能上面的损耗</strong></td><td align="left">hash算法首先使得hash的值小于等于整型数的最大值，再通过%运算实现均匀散射</td></tr><tr><td>扩容机制上</td><td align="left">扩容不需要链表反转，用hashCode新增的bit位查看是否插入旧数组还是插入新数组位置</td><td align="left">头插法扩容</td></tr></tbody></table><p><a href="https://zhuanlan.zhihu.com/p/37607299" target="_blank" rel="noopener">知乎：hashMap和hashTable的区别</a></p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>HashMap就是典型的拉链法哈希表结构。·</p><p><strong>他实际上是一个线性数组。</strong>他的静态内部类继承了一个<code>Entry</code>接口。这里注意，在jdk1.8中，在链表中加入了红黑树（平衡二分查找树）。所以1.8版本的<code>HashMap</code>是由<strong>数组+（链表+红黑树）</strong>实现的。</p><h3 id="hash-1"><a href="#hash-1" class="headerlink" title="hash"></a>hash</h3><p><strong>基本概念</strong></p><p>Hash，即散列，把任意长度的输入，通过散列算法变成固定长度的输出。由于是不定长到定长的压缩映射，输出值域小于输入值域，所以不同的输入可能有相同的输出，即hash碰撞。</p><p><strong>hash算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手写的，源码在不存在这一句，但是原理是类似的，详情可以去看putVal方法</span></span><br><span class="line"><span class="keyword">int</span> i = (table.length-<span class="number">1</span>) &amp; hash(key)</span><br></pre></td></tr></table></figure><p>这里Hash算法的本质是<strong>取key的hashCode值、高位运算、取模运算</strong>    ·</p><p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：<code>(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threshold;             <span class="comment">// 所能容纳的key-value对极限 </span></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    <span class="comment">// 负载因子</span></span><br><span class="line">    <span class="comment">//modCount字段主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如put新键值对，但是某个key对应的value值被覆盖不属于结构变化</span></span><br><span class="line">     <span class="keyword">int</span> modCount;  </span><br><span class="line">     <span class="keyword">int</span> size;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//hash code value for this map entry</span></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h3><p>可以看出<code>HashMap</code>的底层数组的长度必须为<code>2^n</code>，这样做的好处是为以后的<code>hash</code>算法做准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法返回大于等于cap的最小2次幂的整数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>所有方法集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">// 移除所有键值</span></span></span><br><span class="line"><span class="function">Object    <span class="title">clone</span><span class="params">()</span> <span class="comment">// 浅复制，键值本身不会复制</span></span></span><br><span class="line"><span class="function">V    <span class="title">compute</span><span class="params">(K key, BiFunction&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V,? extends V&gt; remappingFunction)</span> <span class="comment">// 尝试为指定的键和它当前映射的值计算一个映射（没有则返回null）</span></span></span><br><span class="line"><span class="function">V    <span class="title">computeIfAbsent</span><span class="params">(K key, Function&lt;? <span class="keyword">super</span> K,? extends V&gt; mappingFunction)</span> <span class="comment">// 如果指定的键没有关联值（或关联null），使用指定的映射函数计算值，非空则加入map</span></span></span><br><span class="line"><span class="function">V    <span class="title">computeIfPresent</span><span class="params">(K key, BiFunction&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V,? extends V&gt; remappingFunction)</span> <span class="comment">// 如果指定键关联了非空值，尝试用给定的键值计算一个映射</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">containsKey</span><span class="params">(Object key)</span> <span class="comment">// 是否包含某键</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">containsValue</span><span class="params">(Object value)</span> <span class="comment">// 是否包含某值</span></span></span><br><span class="line"><span class="function">Set&lt;Map.Entry&lt;K,V&gt;&gt;    <span class="title">entrySet</span><span class="params">()</span>  <span class="comment">// 键值对的Set集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V&gt; action)</span> <span class="comment">// 为每个键值对指定特定函数，抛出异常则中断</span></span></span><br><span class="line"><span class="function">V    <span class="title">get</span><span class="params">(Object key)</span> <span class="comment">// 获取某键的值</span></span></span><br><span class="line"><span class="function">V    <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> <span class="comment">// 获取某键的值，没有则返回默认值</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">isEmpty</span><span class="params">()</span> <span class="comment">// map是否为空容器</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt;    <span class="title">keySet</span><span class="params">()</span> <span class="comment">// 键的Set集合</span></span></span><br><span class="line"><span class="function">V    <span class="title">merge</span><span class="params">(K key, V value, BiFunction&lt;? <span class="keyword">super</span> V,? <span class="keyword">super</span> V,? extends V&gt; remappingFunction)</span> <span class="comment">// 如果指定的键没有关联值或关联null，则用给定的非空值关联它</span></span></span><br><span class="line"><span class="function">V    <span class="title">put</span><span class="params">(K key, V value)</span> <span class="comment">// 添加键值对</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">putAll</span><span class="params">(Map&lt;? extends K,? extends V&gt; m)</span> <span class="comment">// 添加给定map中所有键值对</span></span></span><br><span class="line"><span class="function">V    <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> <span class="comment">// 如果指定的键没有关联值或关联null，将它关联新值，并返回原值</span></span></span><br><span class="line"><span class="function">V    <span class="title">remove</span><span class="params">(Object key)</span> <span class="comment">// 移除某键</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">remove</span><span class="params">(Object key, Object value)</span> <span class="comment">// 移除某键值对</span></span></span><br><span class="line"><span class="function">V    <span class="title">replace</span><span class="params">(K key, V value)</span> <span class="comment">// 替换键值对</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> <span class="comment">// 原值相同则替换键值对</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V,? extends V&gt; function)</span> <span class="comment">// 调用函数替换每个键值对，抛出异常中断</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">size</span><span class="params">()</span> <span class="comment">// map大小</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt;    <span class="title">values</span><span class="params">()</span> <span class="comment">// map的值集合</span></span></span><br></pre></td></tr></table></figure><h4 id="get-getNode"><a href="#get-getNode" class="headerlink" title="get/getNode"></a><strong>get</strong>/getNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">//key是否存在，存在返回key的value值，不存在返回null </span></span><br><span class="line">    <span class="comment">//hash(key)获得key的hash值</span></span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="comment">//Entry数组</span></span><br><span class="line">        Node&lt;K,V&gt; first, e; </span><br><span class="line">        <span class="keyword">int</span> n; <span class="comment">//数组长度</span></span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">// 1. 定位键值对所在桶的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.判断键值的hashcode相等，对象相等</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 3..如果 first 是 TreeNode 类型，则调用黑红树查找方法</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体逻辑：</p><ol><li><p>计算桶在桶数组的位置<code>(first = tab[(n - 1) &amp; hash]) != null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a % b == (b-<span class="number">1</span>) &amp; a ,当b是<span class="number">2</span>的指数时，等式成立。</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>判断<code>hashcode</code>是否相等,对象是否相等</p></li><li><p>判断是否是TreeNode类型</p></li></ol><h4 id="put-putVal"><a href="#put-putVal" class="headerlink" title="put/putVal"></a>put/putVal</h4><img src="https://pic3.zhimg.com/80/58e67eae921e4b431782c07444af824e_hd.png" alt="img"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);<span class="comment">//1. onlyIfAbsent参数</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">final V <span class="title">putVal</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, boolean onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                  boolean evict</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">       <span class="comment">// 初始化桶数组 table</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//扩容方法</span></span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="comment">// 当前key不存在，新建键值对加入</span></span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">           tab[i] = newNode(hash, key, <span class="keyword">value</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.<span class="keyword">equals</span>(k))))</span><br><span class="line">               e = p;</span><br><span class="line">           <span class="comment">//如果节点下引用数据结构为红黑树，调用红黑树插入法</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p instanceof TreeNode)</span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, <span class="keyword">value</span>);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 链表结构，遍历</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="comment">//不存在当前需要插入的节点  </span></span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="comment">//新建一个节点插入</span></span><br><span class="line">                       p.next = newNode(hash, key, <span class="keyword">value</span>, <span class="literal">null</span>);</span><br><span class="line">                       <span class="comment">//链表长度超过或等于树化阙值（8），对链表进行树化</span></span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//需要插入的节点已经存在了</span></span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.<span class="keyword">equals</span>(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.<span class="keyword">value</span>;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)<span class="comment">//1.onlyIfAbsent 判断</span></span><br><span class="line">                   e.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>具体逻辑：</p><ol><li>初始化桶数组，判断是否需要扩容</li><li>判断key是否存在，若不存在就新创建一个 节点</li><li>若存在，首先判断键的值和节点的hash值是否是链表第一个节点，是则插入</li><li>其次判断是否是树节点，是则执行树的插入</li><li>如果都不是就遍历链表，插入节点，大于阙值就树化，遇到相等的节点就覆盖（hash相等，键相等）</li></ol><p><strong>onlyIfAbsent参数</strong></p><p><strong><code>put</code>的<code>onlyIfAbesent</code>的<code>false</code>，<code>putIfAbsent</code>的<code>onlyIfAbsent</code>是<code>true</code></strong></p><p>在放入数据时，如果存在重复的<code>key</code>，那么<code>putIfAbsent</code>不会放入值。<br> 如果传入<code>key</code>对应的<code>value</code>已经存在，就返回存在的<code>value</code>，不进行替换。如果不存在，就添加<code>key</code>和<code>value</code>，返回<code>null</code></p><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><p><code>resize()</code>只有<strong>在两种情况下</strong>会被调用：·</p><ul><li>由于<code>HashMap</code>实行了懒加载: 新建<code>HashMap</code>时不会对<code>table</code>进行赋值, 而是到第一次插入时, 进行<code>resize</code>时构建<code>table</code>;</li><li>当<code>HashMap</code>的<code>size</code>值大于 <code>threshold</code>时, 会进行<code>resize()</code>; 看一下<code>threshold</code>在源码中的注解:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;<span class="comment">//将当前table暂存到oldtab来操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//如果老容量大于最大容量</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;<span class="comment">//阈值设置为Integer的最大值，好像是2147483647，远大于默认的最大容量</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;<span class="comment">//直接返回当前table，不用扩容</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 双倍扩大老内存和老阈值并赋给新的table</span></span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// 初始化HashMap时添加了初始容量参数</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">//这种情况是初始化HashMap时啥参数都没加</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//当只满足老阈值大于0的条件时，新阈值等于新容量*默认扩容因子</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;<span class="comment">//把新的阈值赋给当前table</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];<span class="comment">//创建容量为newCap的新table</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;<span class="comment">//对老table进行遍历</span></span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;<span class="comment">//遍历到的赋给e进行暂存，同时将老table对应项赋值为null</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//将不为空的元素复制到新table中</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;<span class="comment">//只有一个节点时等于是创建一个新的空table然后重新进行元素的put，这里的table长度是原table的两倍</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)<span class="comment">// 红黑树进行旋转</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//HashMap在JDK1.8的时候改善了扩容机制，原数组索引i上的链表不需要再反转。</span></span><br><span class="line">                    <span class="comment">// 扩容之后的索引位置只能是i或者i+oldCap（原数组的长度）</span></span><br><span class="line">                    <span class="comment">// 所以我们只需要看hashcode新增的bit为0或者1。</span></span><br><span class="line">                   <span class="comment">// 假如是0扩容之后就在新数组索引i位置，新增为1，就在索引i+oldCap位置</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;<span class="comment">//用于保存put后不移位的链表</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;<span class="comment">//用于保存put后移位的链表</span></span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;<span class="comment">//如果与的结果为0，表示不移位，将桶中的头结点添加到lohead和lotail中，往后如果桶中还有不移位的结点，就向tail继续添加</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)<span class="comment">//在后面遍历lohead和lotail保存到table中时，lohead用于保存头结点的位置，lotail用于判断是否到了末尾</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//这是添加移位的结点，与不移位的类似</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                           hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;<span class="comment">//把不移位的结点添加到对应的链表数组中去</span></span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;<span class="comment">//把移位的结点添加到对应的链表数组中去</span></span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体逻辑</strong></p><ol><li>若table为null或容量为0，则使用默认值<code>16</code>扩容，临界值为<code>16*0.75</code>，否则2</li><li>若容量是否超过设定的最大容量，重置临界值不扩容返回，否则3</li><li>容器容量加倍，临界值加倍·</li><li>若容器原来不为空，则需迁移数据</li><li><code>oldTab[i]</code>链表中数据分别移至<code>newTab[i]</code>和<code>newTab[i+oldTab.length]</code>中</li></ol><p>经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置</p><p><strong>jdk1.8对扩容进行优化，使得扩容不再需要进行链表的反转，只需要知道hashcode新增的bit位为0还是1。如果是0就在原索引位置，新增索引是1就在oldIndex+oldCap位置。</strong></p><p>推荐看一下这篇<a href="https://zhuanlan.zhihu.com/p/21673805" target="_blank" rel="noopener">重新认识HashMap</a>，对扩容写的很清楚</p><h4 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h4><p>反例，会造成无限环</p><p>主要原因在于 并发下的<code>Rehash</code> 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 <code>HashMap</code>,因为多线程下使用 <code>HashMap</code>还是会存在其他问题比如数据丢失。并发环境下推荐使用 <code>ConcurrentHashMap</code>。·</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapInfiniteLoop</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;(<span class="number">2</span>，<span class="number">0.75f</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        map.put(<span class="number">5</span>， <span class="string">"C"</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread1"</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                map.put(<span class="number">7</span>, <span class="string">"B"</span>);  </span><br><span class="line">                System.out.println(map);  </span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;.start();  </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread2"</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                map.put(<span class="number">3</span>, <span class="string">"A);  </span></span><br><span class="line"><span class="string">                System.out.println(map);  </span></span><br><span class="line"><span class="string">            &#125;;  </span></span><br><span class="line"><span class="string">        &#125;.start();        </span></span><br><span class="line"><span class="string">    &#125;  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>简单介绍线程安全的<code>ConcurrentHashMap</code>·</strong></p></blockquote><p><strong>jdk1.7</strong></p><ul><li>底层采用<strong>分段的数组+链表</strong>实现，线程安全</li><li>通过把整个<code>Map</code>分为<code>N</code>个<code>Segment</code>，可以提供相同的线程安全，但是效率提升<code>N</code>倍，默认提升<code>16</code>倍。(<strong>读操作不加锁，由于<code>HashEntry</code>的<code>value</code>变量是 <code>volatile</code>的，也能保证读取到最新的值</strong>。)</li><li><code>Hashtable</code>的<code>synchronized</code>是针对整张<code>Hash</code>表的，即每次锁住整张表让线程独占，<strong><code>ConcurrentHashMap</code>允许多个修改操作并发进行，其关键在于使用了锁分离技术</strong></li><li>有些方法需要跨段，比如<code>size()</code>和<code>containsValue()</code>，它们<strong>可能需要锁定整个表</strong>而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁</li><li>扩容：<strong>段内扩容</strong>（段内元素超过该段对应Entry数组长度的75%触发扩容，不会对整个Map进行扩容），<strong>插入前检测需不需要扩容</strong>，有效避免无效扩容</li></ul><p><strong>jdk1.8</strong></p><ul><li><p><strong>底层数据结构：</strong> JDK1.7的 <code>ConcurrentHashMap</code>底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟<code>HashMap1.8</code>的结构一样，<strong>数组+链表/红黑二叉树</strong>。<code>Hashtable</code>和 JDK1.8 之前的 <code>HashMap</code>的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 <code>HashMap</code>的主体，链表则是主要为了解决哈希冲突而存在的；</p></li><li><p><strong>实现线程安全的方式（重要）：</strong> </p><p>① <strong>在JDK1.7的时候，<code>ConcurrentHashMap</code>（分段锁）</strong> 对整个桶数组进行了分割分段(<code>Segment</code>)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 <strong>到了 JDK1.8 的时候已经摒弃了<code>Segment</code>的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 <code>synchronized</code> 和 <code>CAS</code>来操作。（JDK1.6以后 对 <code>synchronized</code>锁做了很多优化）</strong> 整个看起来就像是优化过且线程安全的 <code>HashMap</code>，虽然在JDK1.8中还能看到 <code>Segment</code>的数据结构，但是已经简化了属性，只是为了兼容旧版本；</p><p>② <strong>Hashtable(同一把锁)</strong> :使用 <code>synchronized</code>来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</p></li></ul><h2 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h2><h3 id="HashMap和WeakHashMap的相同点"><a href="#HashMap和WeakHashMap的相同点" class="headerlink" title="HashMap和WeakHashMap的相同点"></a><strong>HashMap和WeakHashMap的相同点</strong></h3><ol><li>它们都是散列表，存储的是“键值对”映射。</li><li>它们都继承于<code>AbstractMap</code>，并且实现Map基础。</li><li>它们的构造函数都一样。<br>它们都包括4个构造函数，而且函数的参数都一样。</li><li>默认的容量大小是16，默认的加载因子是0.75。</li><li>它们的“键”和“值”都允许为<strong>null</strong>。</li><li>它们都是“<strong>非同步</strong>的”。</li></ol><h3 id="HashMap和WeakHashMap的不同点"><a href="#HashMap和WeakHashMap的不同点" class="headerlink" title="HashMap和WeakHashMap的不同点"></a><strong>HashMap和WeakHashMap的不同点</strong></h3><p><strong>HashMap实现了<code>Cloneable</code>和<code>Serializable</code>接口，而WeakHashMap没有。</strong><br>  HashMap实现Cloneable，意味着它能通过clone()克隆自己。<br>  HashMap实现Serializable，意味着它支持序列化，能通过序列化去传输。</p><p> <strong>HashMap的“键”是“强引用(<code>StrongReference</code>)”</strong>，而<strong>WeakHashMap的键是“弱引用(<code>WeakReference</code>)”。</strong><br><mark>  WeakReference的“弱键”能实现WeakReference对“键值对”的动态回收。当“弱键”不再被使用到时，GC会回收它，WeakReference也会将“弱键”对应的键值对删除。</mark></p><p>  这个“弱键”实现的动态回收“键值对”的原理呢？<strong>其实，通过WeakReference(弱引用)和ReferenceQueue(引用队列)实现的</strong>。 首先，我们需要了解WeakHashMap中：<br>  第一，“键”是WeakReference，即key是弱键。<br>  第二，ReferenceQueue是一个引用队列，它是和WeakHashMap联合使用的。当弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。 WeakHashMap中的ReferenceQueue是queue。<br>  第三，WeakHashMap是通过数组实现的，我们假设这个数组是table。</p><h3 id="动态回收步骤"><a href="#动态回收步骤" class="headerlink" title="动态回收步骤"></a>动态回收步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将WeakHashMap中的key设置null，并执行gc()。系统会回收key</span><br></pre></td></tr></table></figure><ol><li><strong>新建WeakHashMap，将“键值对”添加到WeakHashMap中。</strong><pre><code>将“键值对”添加到WeakHashMap中时，添加的键都是弱键。实际上，WeakHashMap是通过数组table保存Entry(键值对)；每一个Entry实际上是一个单向链表，即Entry是键值对链表。</code></pre></li><li><strong>当某“弱键”不再被其它对象引用，并被GC回收时。在GC回收该“弱键”时，这个“弱键”也同时会被添加到queue队列中。</strong><pre><code>例如，当我们在将“弱键”key添加到WeakHashMap之后；后来将key设为null。这时，便没有外部外部对象再引用该了key。接着，当Java虚拟机的GC回收内存时，会回收key的相关内存；同时，将key添加到queue队列中。</code></pre></li><li><strong>当下一次我们需要操作WeakHashMap时，会先同步table和queue。table中保存了全部的键值对，而queue中保存被GC回收的“弱键”；同步它们，就是删除table中被GC回收的“弱键”对应的键值对。</strong></li></ol><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><blockquote><p>HashSet基于HashMap来实现的，底层是使用HashMap的Key保存元素，Value统一为类的常量Object对象。</p></blockquote><p>继承AbstractCollection，实现Set、Serializable、Cloneable接口。</p><ul><li>Serializable：可被序列化</li><li>Cloneable：可被克隆</li></ul><p><strong>特性：</strong></p><ul><li>无序</li><li>唯一</li><li>可为null</li><li>不同步（非线程安全）</li></ul><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用map的Key保存元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap map;</span><br><span class="line"><span class="comment">// map的Value均指向PRESENT，不设置为null是为了防止NullPointerException</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h3 id="构造-2"><a href="#构造-2" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用HashMap的初始容量0和默认加载因子0.75f来初始化（JDK1.8）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容量为c的4/3倍和16的最大值</span></span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="comment">// 添加所有元素</span></span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定初始容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定初始容量，加载因子（dummy未使用）</span></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> <span class="comment">// 添加元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">// 清除</span></span></span><br><span class="line"><span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="comment">// 浅复制</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> <span class="comment">// 是否包含</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="comment">// 是否为空</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> <span class="comment">// 迭代器</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> <span class="comment">// 移除</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">// 集合大小</span></span></span><br><span class="line"><span class="function">Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用HashMap.put(key, value)方法（key=e，value=PRESENT）</span></span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法声明只有当元素尚未存在于集合中时才会添加元素。如果成功添加了元素，则该方法返回true，否则返回false。</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用HashMap.remove(key)方法</span></span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashSet如何保持唯一性？"><a href="#HashSet如何保持唯一性？" class="headerlink" title="HashSet如何保持唯一性？"></a>HashSet如何保持唯一性？</h3><p>当我们将一个对象放入一个<code>HashSet</code>时，它使用该对象的<code>hashcode</code>值来确定一个元素是否已经在该集合中。</p><p>每个散列码值对应于某个块位置，该块位置可以包含计算出的散列值相同的各种元素。但是具有相同<code>hashCode</code>的两个对象可能不相等。</p><p><strong>因此，将使用<code>equals（）</code>方法比较同一存储桶中的对象。</strong></p><p><strong>hashCode（）与equals（）的相关规定：</strong></p><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个equals方法返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li></ol><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><code>HashSet</code>的性能主要受两个参数影响 - <strong>初始容量和负载因子。</strong></p><ul><li><p>较低的初始容量<strong>降低了空间复杂性</strong>，但增加了<strong>重新散布的频率</strong>，这是一个昂贵的过程。</p></li><li><p>另一方面，高初始容量增<strong>加了迭代成本和初始内存消耗</strong>。</p></li></ul><h3 id="HashMap-和-HashSet区别"><a href="#HashMap-和-HashSet区别" class="headerlink" title="HashMap 和 HashSet区别"></a>HashMap 和 HashSet区别</h3><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><blockquote><p>TreeMap是基于红黑树（Red-Black Tree）</p><p>TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p></blockquote><img src="https://images0.cnblogs.com/blog/497634/201401/280031594068808.jpg" alt="img" style="zoom:50%;"><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line"><span class="comment">// 根节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"><span class="comment">// 树中键值对个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 树结构的修改次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="构造-3"><a href="#构造-3" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 比较器为null，使用key的自然顺序来维持TreeMap的顺序，Key要求实现Comparable接口</span></span><br><span class="line">    comparator = <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.comparator = comparator; <span class="comment">// 设置比较器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    comparator = <span class="keyword">null</span>; <span class="comment">// 比较器为null</span></span><br><span class="line">    putAll(m); <span class="comment">// 放置所有元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    comparator = m.comparator(); <span class="comment">// 根据SortedMap的比较器维持TreeMap的顺序</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span> <span class="comment">// 添加键值对</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K,? extends V&gt; map)</span> <span class="comment">// 添加map中所有</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key)</span> <span class="comment">// 根据key移除</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">// 移除所有键值对</span></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">pollFirstEntry</span><span class="params">()</span> <span class="comment">// 移除并返回最小key的键值对</span></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">pollLastEntry</span><span class="params">()</span> <span class="comment">// 移除并返回最大key的键值对</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">V <span class="title">replace</span><span class="params">(K key, V value)</span> <span class="comment">// 替换某key的value</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> <span class="comment">// 替换某键值对的value</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">// 键值对个数</span></span></span><br><span class="line"><span class="function">Comparator&lt;? <span class="keyword">super</span> K&gt; <span class="title">comparator</span><span class="params">()</span> <span class="comment">// 返回比较器，根据key的自然排序则返回null</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key)</span> <span class="comment">// 指定key的value</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> <span class="comment">// key集合</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;K&gt; <span class="title">navigableKeySet</span><span class="params">()</span> <span class="comment">// 和keySet()一样</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> <span class="comment">// 值集合</span></span></span><br><span class="line"><span class="function">Set&lt;Map.Entry&lt;K,V&gt;&gt; <span class="title">entrySet</span><span class="params">()</span> <span class="comment">// 映射的键值对集合</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> <span class="comment">// 是否包含某键</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> <span class="comment">// 是否包含某值</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">NavigableSet&lt;K&gt; <span class="title">descendingKeySet</span><span class="params">()</span> <span class="comment">// key的降序集合</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K,V&gt; <span class="title">descendingMap</span><span class="params">()</span> <span class="comment">// 键值对的降序映射</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">ceilingEntry</span><span class="params">(K key)</span> <span class="comment">// key的上限（&gt;=）键值对</span></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">floorEntry</span><span class="params">(K key)</span> <span class="comment">// key的下限（&lt;=）键值对</span></span></span><br><span class="line"><span class="function">K <span class="title">ceilingKey</span><span class="params">(K key)</span> <span class="comment">// key的上限（&gt;=）键</span></span></span><br><span class="line"><span class="function">K <span class="title">floorKey</span><span class="params">(K key)</span> <span class="comment">// key的下限（&lt;=）键</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">firstEntry</span><span class="params">()</span> <span class="comment">// 最小的键值对</span></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">lastEntry</span><span class="params">()</span> <span class="comment">// 最大的键值对</span></span></span><br><span class="line"><span class="function">K <span class="title">firstKey</span><span class="params">()</span> <span class="comment">// 最小的key</span></span></span><br><span class="line"><span class="function">K <span class="title">lastKey</span><span class="params">()</span> <span class="comment">// 最大的key</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">higherEntry</span><span class="params">(K key)</span> <span class="comment">// 大于key的第一个键值对</span></span></span><br><span class="line"><span class="function">K <span class="title">higherKey</span><span class="params">(K key)</span> <span class="comment">// 大于key的第一个键</span></span></span><br><span class="line"><span class="function">Map.Entry&lt;K,V&gt; <span class="title">lowerEntry</span><span class="params">(K key)</span> <span class="comment">// 小于key的第一个键值对</span></span></span><br><span class="line"><span class="function">K <span class="title">lowerKey</span><span class="params">(K key)</span> <span class="comment">// 小于key的第一个键</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">SortedMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey)</span> <span class="comment">// portion &lt; tokey 的部分</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span> <span class="comment">// portion &lt; tokey 的部分（inclusive是否包含边界）</span></span></span><br><span class="line"><span class="function">SortedMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span> <span class="comment">// fromKey &lt;= portion &lt; toKey 的部分</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive, K toKey, <span class="keyword">boolean</span> toInclusive)</span> <span class="comment">// fromKey &lt; portion &lt; toKey 的部分（inclusive是否包含边界）</span></span></span><br><span class="line"><span class="function">SortedMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey)</span> <span class="comment">// portion &gt;= tokey 的部分</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span> <span class="comment">// portion &gt; tokey 的部分（inclusive是否包含边界）</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V&gt; action)</span> <span class="comment">// 对每个键值对执行相同操作，异常中断</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V,? extends V&gt; function)</span> <span class="comment">// 对每个键值对执行相同的替换操作，异常中断</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="comment">// 浅复制TreeMap实例</span></span></span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历treeMap</span></span><br><span class="line">treeMap.forEach(<span class="keyword">new</span> BiConsumer&lt;Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer, String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(integer+<span class="string">"-&gt;"</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 替换treeMap所有元素</span></span><br><span class="line">treeMap.replaceAll(<span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s+<span class="string">"...."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="put-1"><a href="#put-1" class="headerlink" title="put"></a><strong>put</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="comment">// 根节点为null，直接创建一个节点返回</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        compare(key, key); <span class="comment">// 类型校验，是否为null</span></span><br><span class="line">        root = <span class="keyword">new</span> Entry&lt;&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="comment">// 比较器不为null，使用比较器维持TreeMap的元素顺序</span></span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 循环，获取插入后的父节点</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 记录父节点</span></span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="comment">// key&lt;t.key，插入到节点的左边</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="comment">// key&gt;t.key，插入到节点的右边</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="comment">// key==t.key，覆盖原值即可，并返回原值</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 比较器为null，使用key作为比较器进行比较，key需实现Comparable接口</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">        <span class="comment">// 同上面一样，获取插入后的父节点</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// key小于父节点，插入到左侧</span></span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// key大于父节点，插入到右侧</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    <span class="comment">// 插入后，保持红黑树平衡进行调整</span></span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rotateLeft"><a href="#rotateLeft" class="headerlink" title="rotateLeft"></a>rotateLeft</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左旋</span></span><br><span class="line"><span class="comment">// 重置三个父子节点</span></span><br><span class="line"><span class="comment">// 1. p 和 r.left</span></span><br><span class="line"><span class="comment">// 2. p.parent 和 r</span></span><br><span class="line"><span class="comment">// 3. r 和 p</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; r = p.right;</span><br><span class="line">        <span class="comment">// 1. p 和 r.left 建立父子节点关系</span></span><br><span class="line">        p.right = r.left;</span><br><span class="line">        <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</span><br><span class="line">            r.left.parent = p;</span><br><span class="line">        <span class="comment">// 2. p.parent 和 r 建立父子节点关系</span></span><br><span class="line">        r.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">            root = r;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.left == p)</span><br><span class="line">            p.parent.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p.parent.right = r;</span><br><span class="line">        <span class="comment">// 3. r 和 p 建立父子节点关系</span></span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rotateRight"><a href="#rotateRight" class="headerlink" title="rotateRight"></a>rotateRight</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右旋</span></span><br><span class="line"><span class="comment">// 重置三个父子节点</span></span><br><span class="line"><span class="comment">// 1. p 和 l.right</span></span><br><span class="line"><span class="comment">// 2. p.parent 和 l</span></span><br><span class="line"><span class="comment">// 3. l 和 p</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; l = p.left;</span><br><span class="line">        <span class="comment">// 1. p 和 l.right 建立父子节点关系</span></span><br><span class="line">        p.left = l.right;</span><br><span class="line">        <span class="keyword">if</span> (l.right != <span class="keyword">null</span>)</span><br><span class="line">            l.right.parent = p;</span><br><span class="line">        <span class="comment">// 2. p.parent 和 l 建立父子节点关系</span></span><br><span class="line">        l.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">            root = l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</span><br><span class="line">            p.parent.right = l;</span><br><span class="line">        <span class="keyword">else</span> p.parent.left = l;</span><br><span class="line">        <span class="comment">// 3. l 和 p 建立父子节点关系</span></span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据key查找键值对</span></span><br><span class="line">    Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 保存原值</span></span><br><span class="line">    V oldValue = p.value;</span><br><span class="line">    <span class="comment">// 删除键值对</span></span><br><span class="line">    deleteEntry(p);</span><br><span class="line">    <span class="comment">// 返回原值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对equal的几点补充"><a href="#对equal的几点补充" class="headerlink" title="对equal的几点补充"></a>对equal的几点补充</h2><blockquote><p>集合中大量使用equals方法，实际上，该方法如果没有被重写，则就比较两个对象是否完全相等。</p></blockquote><p><strong>java对equals()的要求</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 对称性：如果x.equals(y)返回是&quot;true&quot;，那么y.equals(x)也应该返回是&quot;true&quot;。</span><br><span class="line">2. 反射性：x.equals(x)必须返回是&quot;true&quot;。</span><br><span class="line">3. 类推性：如果x.equals(y)返回是&quot;true&quot;，而且y.equals(z)返回是&quot;true&quot;，那么z.equals(x)也应该返回是&quot;true&quot;。</span><br><span class="line">4. 一致性：如果x.equals(y)返回是&quot;true&quot;，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是&quot;true&quot;。</span><br><span class="line">5. 非空性，x.equals(null)，永远返回是&quot;false&quot;；x.equals(和x不同类型的对象)永远返回是&quot;false&quot;。</span><br></pre></td></tr></table></figure><p><strong>equals() 与 == 的区别是什么？</strong></p><p>没有被复写的时候等价</p><p><strong>hashCode() 的作用</strong></p><p>本质作用是确定该对象在哈希表中的索引位置</p><p>在散列表中可以判断对象的大小关系</p><p><strong>hashCode() 和 equals() 的关系</strong></p><p>在<strong>会创建“类对应的散列表”</strong>的情况下</p><p> 1)、如果两个对象相等，那么它们的hashCode()值一定相同。<br>       这里的相等是指，通过equals()比较两个对象时返回true。<br> 2)、如果两个对象hashCode()相等，它们并不一定相等。<br>        因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等，并不一定能得出键值对相等。补充说一句：“两个不同的键值对，哈希值相等”，这就是哈希冲突。</p><h2 id="对conparable和comparator的几点补充"><a href="#对conparable和comparator的几点补充" class="headerlink" title="对conparable和comparator的几点补充"></a>对conparable和comparator的几点补充</h2><p><a href="https://www.cnblogs.com/skywang12345/p/3324788.html" target="_blank" rel="noopener">Java 中 Comparable 和 Comparator 比较</a></p><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>Comparable 是排序接口。</p><p>若一个类实现了<code>Comparable</code>接口，就意味着“<strong>该类支持排序</strong>”。  即然实现<code>Comparable</code>接口的类支持排序，假设现在存在“实现Comparable接口的类的对象的List列表(或数组)”，则该List列表(或数组)可以通过 <code>Collections.sort</code>（或 <code>Arrays.sort</code>）进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>假设我们通过 x.compareTo(y) 来“比较x和y的大小”。若返回“负数”，意味着“x比y小”；返回“零”，意味着“x等于y”；返回“正数”，意味着“x大于y”。</p><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>Comparator 是比较器接口。</p><p>我们若需要控制某个类的次序，而该类本身不支持排序(即没有实现<code>Comparable</code>接口)；那么，我们可以建立一个“该类的比较器”来进行排序。这个“比较器”只需要实现<code>Comparator</code>接口即可。</p><p>也就是说，我们可以通过“<strong>实现Comparator类来新建一个比较器</strong>”，然后通过该比较器对类进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p>若一个类要实现<code>Comparator</code>接口：它一定要实现<code>compareTo(T o1, T o2)</code> 函数，但可以不实现 <code>equals(Object obj)</code> 函数。</p><p>为什么可以不实现 <code>equals(Object obj)</code> 函数呢？ 因为任何类，默认都是已经实现了<code>equals(Object obj)</code>的。 Java中的一切类都是继承于<code>java.lang.Object</code>，在<code>Object.java</code>中实现了<code>equals(Object obj)</code>函数；所以，其它所有的类也相当于都实现了该函数。</p></li><li><p><code>int compare(T o1, T o2)</code>是“比较o1和o2的大小”。返回“负数”，意味着“o1比o2小”；返回“零”，意味着“o1等于o2”；返回“正数”，意味着“o1大于o2”。</p></li></ol><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p><code>Comparable</code>是排序接口；若一个类实现了<code>Comparable</code>接口，就意味着“<strong>该类支持排序</strong>”。<br>而<code>Comparator</code>是比较器；我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。</p><p>我们不难发现：<code>Comparable</code>相当于“内部比较器”，而<code>Comparator</code>相当于“外部比较器”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个类本身实现了Comparable比较器，就意味着它本身支持排序；若它本身没实现Comparable，也可以通过外部比较器Comparator进行排序。</span><br></pre></td></tr></table></figure><h2 id="ConcurrentHashMap-jdk1-7"><a href="#ConcurrentHashMap-jdk1-7" class="headerlink" title="ConcurrentHashMap(jdk1.7)"></a>ConcurrentHashMap(jdk1.7)</h2><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V value;</span><br><span class="line">        <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">        <span class="comment">//其他省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Segment</code>继承了<code>ReentrantLock</code>，所以它就是一种可重入锁（<code>ReentrantLock</code>)。在<code>ConcurrentHashMap</code>，一个<code>Segment</code>就是一个子哈希表，<code>Segment</code>里维护了一个<code>HashEntry</code>数组，并发环境下，对于不同Segment的数据进行操作是不用考虑锁竞争的。（就按默认的<code>ConcurrentLevel</code>为16来讲，理论上就允许16个线程并发执行）</p><h3 id="构造-4"><a href="#构造-4" class="headerlink" title="构造"></a>构造</h3><p><code>segment</code>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Segment(<span class="keyword">float</span> lf, <span class="keyword">int</span> threshold, HashEntry&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            <span class="keyword">this</span>.loadFactor = lf;<span class="comment">//负载因子</span></span><br><span class="line">            <span class="keyword">this</span>.threshold = threshold;<span class="comment">//阈值</span></span><br><span class="line">            <span class="keyword">this</span>.table = tab;<span class="comment">//主干数组即HashEntry数组</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>ConcurrentHashMap</code>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方法有三个参数，如果用户不指定则会使用默认值，initialCapacity为16，loadFactor为0.75（负载因子，扩容时需要参考），concurrentLevel为16。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">          <span class="comment">//MAX_SEGMENTS 为1&lt;&lt;16=65536，也就是最大并发数为65536</span></span><br><span class="line">          <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">              concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">          <span class="comment">//2的sshif次方等于ssize，例:ssize=16,sshift=4;ssize=32,sshif=5</span></span><br><span class="line">         <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">//ssize 为segments数组长度，根据concurrentLevel计算得出</span></span><br><span class="line">         <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">             ++sshift;</span><br><span class="line">             ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//segmentShift和segmentMask这两个变量在定位segment时会用到</span></span><br><span class="line">         <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">         <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">             initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">         <span class="comment">//计算cap的大小，即Segment中HashEntry的数组长度，cap也一定为2的n次方.</span></span><br><span class="line">         <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">         <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">             ++c;</span><br><span class="line">        <span class="comment">// 默认 MIN_SEGMENT_TABLE_CAPACITY 是 2，这个值也是有讲究的，因为这样的话，对于具体的槽上，</span></span><br><span class="line">    <span class="comment">// 插入一个元素不至于扩容，插入第二个的时候才会扩容</span></span><br><span class="line">         <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">         <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">             cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">         <span class="comment">//创建segments数组并初始化第一个Segment，其余的Segment延迟初始化</span></span><br><span class="line">         Segment&lt;K,V&gt; s0 =</span><br><span class="line">             <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</span><br><span class="line">                              (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line">         Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</span><br><span class="line">         UNSAFE.putOrderedObject(ss, SBASE, s0); </span><br><span class="line">         <span class="keyword">this</span>.segments = ss;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>初始化完成，我们得到了一个 Segment 数组。我们就当是用 new ConcurrentHashMap() 无参构造函数进行初始化的，那么初始化完成后：</p><ul><li><code>Segment</code>数组长度为 16，不可以扩容.<strong>Segment数组的大小ssize是由concurrentLevel来决定的，但是却不一定等于concurrentLevel，ssize一定是大于或等于concurrentLevel的最小的2的次幂</strong></li><li>Segment[i] 的默认大小为 2，负载因子是 0.75，得出初始阈值为 1.5，也就是以后插入第一个元素不会触发扩容，插入第二个会进行第一次扩容</li><li>这里初始化了 segment[0]，其他位置还是 null，至于为什么要初始化 segment[0]，后面的代码会介绍</li><li>当前 <code>segmentShift</code>的值为 32 - 4 = 28，<code>segmentMask</code> 为 16 - 1 = 15，姑且把它们简单翻译为移位数和掩码，这两个值马上就会用到</li></ul><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><h4 id="put-2"><a href="#put-2" class="headerlink" title="put"></a>put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       Segment&lt;K,V&gt; s;</span><br><span class="line">       <span class="comment">//concurrentHashMap不允许key/value为空</span></span><br><span class="line">       <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="comment">// 1. 计算 key 的 hash 值</span></span><br><span class="line">       <span class="comment">//hash函数对key的hashCode重新散列，避免差劲的不合理的hashcode，保证散列均匀</span></span><br><span class="line">       <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">   <span class="comment">// 2. 根据 hash 值找到 Segment 数组中的位置 j</span></span><br><span class="line">       <span class="comment">//返回的hash值无符号右移segmentShift位与段掩码进行位运算，定位segment</span></span><br><span class="line">       <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">       <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">            (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">           s = ensureSegment(j);</span><br><span class="line">   <span class="comment">// 3. 插入新值到槽 s 中 </span></span><br><span class="line">    <span class="comment">//调用代理到segment上的put方法</span></span><br><span class="line">       <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从源码看出，put的主要逻辑也就两步：</p><p><strong>1. 定位segment并确保定位的Segment已初始化</strong></p><p><strong>2. 调用Segment的put方法</strong></p><p><strong>关于<code>segmentShift</code>和<code>segmentMask</code></strong>·</p><p><code>segmentShift</code>和<code>segmentMask</code>这两个全局变量的主要作用是用来定位<code>Segment</code>，<code>int j =(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask</code>。</p><p><strong>segmentMask</strong>：段掩码，假如<code>segments</code>数组长度为16，则段掩码为16-1=15；<code>segments</code>长度为32，段掩码为32-1=31。<mark>这样得到的所有bit位都为1，可以更好地保证散列的均匀性</mark></p><p><strong>segmentShift</strong>：2的<code>sshift</code>次方等于<code>ssize</code>，<code>segmentShift</code>=32-sshift。若<code>segments</code>长度为16，<code>segmentShift</code>=32-4=28;若<code>segments</code>长度为32，<code>segmentShift</code>=32-5=27。<mark>而计算得出的hash值最大为32位，无符号右移segmentShift，则意味着只保留高几位（其余位是没用的），然后与段掩码segmentMask位运算来定位Segment。</mark></p><p>*<em>concurrentHashMap代理到Segment上的put方法，Segment中的put方法是要加锁的。只不过是锁粒度细了而已: *</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</span><br><span class="line">                scanAndLockForPut(key, hash, value);<span class="comment">//tryLock不成功时会遍历定位到的HashEnry位置的链表（遍历主要是为了使CPU缓存链表），若找不到，则创建HashEntry。tryLock一定次数后（MAX_SCAN_RETRIES变量决定），则lock。若遍历过程中，由于其他线程的操作导致链表头结点变化，则需要重新遍历。</span></span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">                <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;<span class="comment">//定位HashEntry，可以看到，这个hash值在定位Segment时和在Segment中定位HashEntry都会用到，只不过定位Segment时只用到高几位。</span></span><br><span class="line">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        K k;</span><br><span class="line">                        <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                            oldValue = e.value;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                e.value = value;</span><br><span class="line">                                ++modCount;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// node 到底是不是 null，这个要看获取锁的过程，不过和这里都没有关系。</span></span><br><span class="line"><span class="comment">// 如果不为 null，那就直接将它设置为链表表头；如果是null，初始化并设置为链表表头。</span></span><br><span class="line">                        <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                            node.setNext(first);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                        <span class="keyword">int</span> c = count + <span class="number">1</span>;　　　　　　　　　　　　　　<span class="comment">//若c超出阈值threshold，需要扩容并rehash。扩容后的容量是当前容量的2倍。这样可以最大程度避免之前散列好的entry重新散列，具体在另一篇文章中有详细分析，不赘述。扩容并rehash的这个过程是比较消耗资源的。</span></span><br><span class="line">                        <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                            rehash(node);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            setEntryAt(tab, index, node);</span><br><span class="line">                        ++modCount;</span><br><span class="line">                        count = c;</span><br><span class="line">                        oldValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>初始化槽: <code>ensureSegment</code></strong></p><p>ConcurrentHashMap 初始化的时候会初始化第一个槽 segment[0]，对于其他槽来说，在插入第一个值的时候进行初始化。这里需要考虑并发，因为很可能会有多个线程同时进来初始化同一个槽 segment[k]，不过只要有一个成功了就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Segment&lt;K,V&gt; <span class="title">ensureSegment</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] ss = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">long</span> u = (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line">    Segment&lt;K,V&gt; seg;</span><br><span class="line">    <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里看到为什么之前要初始化 segment[0] 了，</span></span><br><span class="line">        <span class="comment">// 使用当前 segment[0] 处的数组长度和负载因子来初始化 segment[k]</span></span><br><span class="line">        <span class="comment">// 为什么要用“当前”，因为 segment[0] 可能早就扩容过了</span></span><br><span class="line">        Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cap = proto.table.length;</span><br><span class="line">        <span class="keyword">float</span> lf = proto.loadFactor;</span><br><span class="line">        <span class="keyword">int</span> threshold = (<span class="keyword">int</span>)(cap * lf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 segment[k] 内部的数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap];</span><br><span class="line">        <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">            == <span class="keyword">null</span>) &#123; <span class="comment">// 再次检查一遍该槽是否被其他线程初始化了。</span></span><br><span class="line"></span><br><span class="line">            Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">            <span class="comment">// 使用 while 循环，内部用 CAS，当前线程成功设值或其他线程成功设值后，退出</span></span><br><span class="line">            <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                   == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> seg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，<code>ensureSegment(int k)</code>比较简单，对于并发操作使用 CAS 进行控制。如果当前线程 CAS 失败，这里的 while 循环是为了将 seg 赋值返回。</p><p><strong>获取写入锁: scanAndLockForPut</strong></p><p>往某个 segment 中 put 的时候，首先会调用 <code>node = tryLock() ? null : scanAndLockForPut(key, hash, value)</code>，也就是说先进行一次 tryLock() 快速获取该 segment 的独占锁，如果失败，那么进入到 scanAndLockForPut 这个方法来获取锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环获取锁</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                    <span class="comment">// 进到这里说明数组该位置的链表是空的，没有任何元素</span></span><br><span class="line">                    <span class="comment">// 当然，进到这里的另一个原因是 tryLock() 失败，所以该槽存在并发，不一定是该位置</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 顺着链表往下走</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重试次数如果超过 MAX_SCAN_RETRIES（单核1多核64），那么不抢了，进入到阻塞队列等待锁</span></span><br><span class="line">        <span class="comment">//    lock() 是阻塞方法，直到获取锁后返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                 <span class="comment">// 这个时候是有大问题了，那就是有新的元素进到了链表，成为了新的表头</span></span><br><span class="line">                 <span class="comment">//     所以这边的策略是，相当于重新走一遍这个 scanAndLockForPut 方法</span></span><br><span class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有两个出口，一个是 tryLock() 成功了，循环终止，另一个就是重试次数超过了 MAX_SCAN_RETRIES，进到 lock() 方法，此方法会阻塞等待，直到成功拿到独占锁。<br>这个方法就是看似复杂，但是其实就是做了一件事，那就是<strong>获取该segment的独占锁</strong>，如果需要的话顺便实例化了一下 node。</p><p><strong>rehash</strong></p><p><strong>segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry[] 进行扩容</strong>，扩容后，容量为原来的 2 倍。</p><p>首先，我们要回顾一下触发扩容的地方，put 的时候，如果判断该值的插入会导致该 segment 的元素个数超过阈值，那么先进行扩容，再插值</p><p>该方法不需要考虑并发，因为到这里的时候，是持有该 segment 的独占锁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法参数上的 node 是这次扩容后，需要添加到新的数组中的数据。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 2 倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">        (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">    <span class="comment">// 新的掩码，如从 16 扩容到 32，那么 sizeMask 为 31，对应二进制 ‘000...00011111’</span></span><br><span class="line">    <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历原数组，老套路，将原数组位置 i 处的链表拆分到 新数组位置 i 和 i+oldCap 两个位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        <span class="comment">// e 是链表的第一个元素</span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">// 计算应该放置在新数组中的位置，</span></span><br><span class="line">            <span class="comment">// 假设原数组长度为 16，e 在 oldTable[3] 处，那么 idx 只可能是 3 或者是 3 + 16 = 19</span></span><br><span class="line">            <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>)   <span class="comment">// 该位置处只有一个元素，那比较好办</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                <span class="comment">// e 是链表表头</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="comment">// idx 是当前链表的头结点 e 的新位置</span></span><br><span class="line">                <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 下面这个 for 循环会找到一个 lastRun 节点，这个节点之后的所有元素是将要放到一起的</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                     last != <span class="keyword">null</span>;</span><br><span class="line">                     last = last.next) &#123;</span><br><span class="line">                    <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 lastRun 及其之后的所有节点组成的这个链表放到 lastIdx 这个位置</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// 下面的操作是处理 lastRun 之前的节点，</span></span><br><span class="line">                <span class="comment">//    这些节点可能分配在另一个链表中，也可能分配到上面的那个链表中</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    V v = p.value;</span><br><span class="line">                    <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                    <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将新来的 node 放到新数组中刚刚的 两个链表之一 的 头部</span></span><br><span class="line">    <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的扩容比之前的 HashMap 要复杂一些，代码难懂一点。上面有两个挨着的 for 循环，第一个 for 有什么用呢？如果没有第一个 for 循环，也是可以工作的，但是，这个 for 循环下来，如果 lastRun 的后面还有比较多的节点，那么这次就是值得的。因为我们只需要克隆 lastRun 前面的节点，后面的一串节点跟着 lastRun 走就是了，不需要做任何操作。我觉得 Doug Lea 的这个想法也是挺有意思的，不过比较坏的情况就是每次 lastRun 都是链表的最后一个元素或者很靠后的元素，那么这次遍历就有点浪费了。不过 Doug Lea 也说了，根据统计，如果使用默认的阈值，大约只有 1/6 的节点需要克隆。</p></blockquote><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Segment&lt;K,V&gt; s; </span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">int</span> h = hash(key);</span><br><span class="line">        <span class="keyword">long</span> u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;        <span class="comment">//先定位Segment，再定位HashEntry</span></span><br><span class="line">        <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            (tab = s.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">                     (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">                 e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                    <span class="keyword">return</span> e.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>get方法无需加锁，由于其中涉及到的共享变量都使用volatile修饰，volatile可以保证内存可见性，所以不会读取到过期数据。</strong></p><ol><li>计算 hash 值，找到 segment 数组中的具体位置，或我们前面用的“槽”</li><li>槽中也是一个数组，根据 hash 找到数组中具体的位置</li><li>到这里是链表了，顺着链表进行查找即可</li></ol><h3 id="并发分析"><a href="#并发分析" class="headerlink" title="并发分析"></a>并发分析</h3><p><strong>put 操作的线程安全性</strong></p><ol><li>初始化槽，这个我们之前就说过了，使用了 CAS 来初始化 Segment 中的数组。</li><li>添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。</li><li>扩容。扩容是新创建了数组，然后进行迁移数据，最后面将 newTable 设置给属性 table。所以，如果 get 操作此时也在进行，那么也没关系，如果 get 先行，那么就是在旧的 table 上做查询操作；而 put 先行，那么 put 操作的可见性保证就是 table 使用了 volatile 关键字。</li></ol><p><strong>remove 操作的线程安全性</strong><br>get 操作需要遍历链表，但是 remove 操作会”破坏”链表。如果 remove 破坏的节点 get 操作已经过去了，那么这里不存在任何问题。如果 remove 先破坏了一个节点，分两种情况考虑。 1、如果此节点是头结点，那么需要将头结点的 next 设置为数组该位置的元素，table 虽然使用了 volatile 修饰，但是 volatile 并不能提供数组内部操作的可见性保证，所以源码中使用了 UNSAFE 来操作数组，请看方法 setEntryAt。2、如果要删除的节点不是头结点，它会将要删除节点的后继节点接到前驱节点中，这里的并发保证就是 next 属性是 volatile 的。</p><h2 id="ConcurrentHashMap-1-8"><a href="#ConcurrentHashMap-1-8" class="headerlink" title="ConcurrentHashMap(1.8)"></a>ConcurrentHashMap(1.8)</h2><h3 id="构造-5"><a href="#构造-5" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这构造函数里，什么都不干</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><h4 id="put-3"><a href="#put-3" class="headerlink" title="put"></a>put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 得到 hash 值</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="comment">// 用于记录相应链表的长度</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">// 如果数组"空"，进行数组初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 初始化数组，后面会详细介绍</span></span><br><span class="line">            tab = initTable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找该 hash 值对应的数组下标，得到第一个节点 f</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果数组该位置为空，</span></span><br><span class="line">            <span class="comment">//    用一次 CAS 操作将这个新值放入其中即可，这个 put 操作差不多就结束了，可以拉到最后面了</span></span><br><span class="line">            <span class="comment">//          如果 CAS 失败，那就是有并发操作，进到下一个循环就好了</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// hash 居然可以等于 MOVED，这个需要到后面才能看明白，不过从名字上也能猜到，肯定是因为在扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            <span class="comment">// 帮助数据迁移，这个等到看完数据迁移部分的介绍后，再理解这个就很简单了</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 到这里就是说，f 是该位置的头结点，而且不为空</span></span><br><span class="line"></span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 获取数组该位置的头结点的监视器锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 头结点的 hash 值大于 0，说明是链表</span></span><br><span class="line">                        <span class="comment">// 用于累加，记录链表的长度</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 遍历链表</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">// 如果发现了"相等"的 key，判断是否要进行值覆盖，然后也就可以 break 了</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 到了链表的最末端，将这个新值放到链表的最后面</span></span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123; <span class="comment">// 红黑树</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="comment">// 调用红黑树的插值方法插入新节点</span></span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// binCount != 0 说明上面在做链表操作</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 判断是否要将链表转换为红黑树，临界值和 HashMap 一样，也是 8</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    <span class="comment">// 这个方法和 HashMap 中稍微有一点点不同，那就是它不是一定会进行红黑树转换，</span></span><br><span class="line">                    <span class="comment">// 如果当前数组的长度小于 64，那么会选择进行数组扩容，而不是转换为红黑树</span></span><br><span class="line">                    <span class="comment">//    具体源码我们就不看了，扩容部分后面说</span></span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化数组 initTable()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化的"功劳"被其他线程"抢去"了</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">// CAS 一下，将 sizeCtl 设置为 -1，代表抢到了锁</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// DEFAULT_CAPACITY 默认初始容量是 16</span></span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="comment">// 初始化数组，长度为 16 或初始化时提供的长度</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    <span class="comment">// 将这个数组赋值给 table，table 是 volatile 的</span></span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">// 如果 n 为 16 的话，那么这里 sc = 12</span></span><br><span class="line">                    <span class="comment">// 其实就是 0.75 * n</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 设置 sizeCtl 为 sc，我们就当是 12 吧</span></span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表转红黑树-treeifyBin"><a href="#链表转红黑树-treeifyBin" class="headerlink" title="链表转红黑树: treeifyBin"></a>链表转红黑树: treeifyBin</h4><p>前面我们在 put 源码分析也说过，treeifyBin 不一定就会进行红黑树转换，也可能是仅仅做数组扩容。我们还是进行源码分析吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// MIN_TREEIFY_CAPACITY 为 64</span></span><br><span class="line">        <span class="comment">// 所以，如果数组长度小于 64 的时候，其实也就是 32 或者 16 或者更小的时候，会进行数组扩容</span></span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            <span class="comment">// 后面我们再详细分析这个方法</span></span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// b 是头结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    <span class="comment">// 下面就是遍历链表，建立一颗红黑树</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                            hd = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将红黑树设置到数组相应位置中</span></span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩容：tryPresize"><a href="#扩容：tryPresize" class="headerlink" title="扩容：tryPresize"></a>扩容：tryPresize</h4><p>如果说 Java8 ConcurrentHashMap 的源码不简单，那么说的就是扩容操作和迁移操作。这个方法要完完全全看懂还需要看之后的 transfer 方法，读者应该提前知道这点。这里的扩容也是做翻倍扩容的，扩容后数组容量为原来的 2 倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先要说明的是，方法参数 size 传进来的时候就已经翻了倍了</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// c：size 的 1.5 倍，再加 1，再往上取最近的 2 的 n 次方。</span></span><br><span class="line">    <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">        tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个 if 分支和之前说的初始化数组的代码基本上是一样的，在这里，我们可以不用管这块代码</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            n = (sc &gt; c) ? sc : c;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">// 0.75 * n</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">            <span class="comment">// 我没看懂 rs 的真正含义是什么，不过也关系不大</span></span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] nt;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 2. 用 CAS 将 sizeCtl 加 1，然后执行 transfer 方法</span></span><br><span class="line">                <span class="comment">//    此时 nextTab 不为 null</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 1. 将 sizeCtl 设置为 (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></span><br><span class="line">            <span class="comment">//     我是没看懂这个值真正的意义是什么？不过可以计算出来的是，结果是一个比较大的负数</span></span><br><span class="line">            <span class="comment">//  调用 transfer 方法，此时 nextTab 参数为 null</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个方法的核心在于 sizeCtl 值的操作，首先将其设置为一个负数，然后执行 transfer(tab, null)，再下一个循环将 sizeCtl 加 1，并执行 transfer(tab, nt)，之后可能是继续 sizeCtl 加 1，并执行 transfer(tab, nt)。所以，可能的操作就是执行 1 次 transfer(tab, null) + 多次 transfer(tab, nt)，这里怎么结束循环的需要看完 transfer 源码才清楚</p><p><a href="https://blog.csdn.net/u013256816/article/details/84113163" target="_blank" rel="noopener">HashMap和ConcurrentHashMap源码jkd7~8全解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表问题整理</title>
      <link href="/2020/02/23/linkedList/"/>
      <url>/2020/02/23/linkedList/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>链表可以说是最常见的数据结构之一。看似简单但是真正应用起来有很强的灵活性，现在将链表问题归纳一下，从链表的常见变式到具体应用，争取对链表问题一网打尽！</p><p><img src="http://cdn.zblade.top/qiniu_img/spider-man-into-the-spider-verse-animation-jump-artwork-32846.jpeg" alt></p><a id="more"></a><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><blockquote><p>相比于数组插入删除时O(n)的时间复杂度，链表的时间复杂度只要O(1)</p><p>但是链表随机访问的性能没有数组好，需要 O(n) 的时间复杂度</p></blockquote><h3 id="尾部插入"><a href="#尾部插入" class="headerlink" title="尾部插入"></a>尾部插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertToTail</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Node node =  <span class="keyword">new</span> Node(value,<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">null</span> == head)&#123;</span><br><span class="line">             head = node;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           Node q = head;</span><br><span class="line">           <span class="keyword">while</span>(q.next!= <span class="keyword">null</span> )&#123;</span><br><span class="line">                 q = q.next;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//关键步骤，不能调换顺序</span></span><br><span class="line">           node.next = q.next;</span><br><span class="line">           q.next = node;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="索引插入"><a href="#索引插入" class="headerlink" title="索引插入"></a>索引插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">       Node node = head;</span><br><span class="line">       Node preNode  = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(node != <span class="keyword">null</span> &amp;&amp; index != pos)&#123;</span><br><span class="line">          preNode = node;</span><br><span class="line">           node = node.next;</span><br><span class="line">           pos++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Node newNode= <span class="keyword">new</span> Node(value,node.next);</span><br><span class="line">       <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(preNode ==<span class="keyword">null</span>)&#123;</span><br><span class="line">           newNode.next = head;</span><br><span class="line">           head = newNode;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           newNode.next = preNode.next;</span><br><span class="line">           preNode.next = newNode;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="通过值删除节点"><a href="#通过值删除节点" class="headerlink" title="通过值删除节点"></a>通过值删除节点</h3><p>注意头节点的特殊处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteByNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       Node node = head;</span><br><span class="line">       <span class="comment">//应该是保存插入节点的上一个节点</span></span><br><span class="line">       Node q = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">while</span>(node!= <span class="keyword">null</span> &amp;&amp; node.data != data)&#123;</span><br><span class="line">           <span class="comment">//保存上一个节点</span></span><br><span class="line">           q = node;</span><br><span class="line">           <span class="comment">//使得循环继续下去</span></span><br><span class="line">           node = node.next;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//说明没有找到节点</span></span><br><span class="line">       <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//删除head头节点的时候，此时q依然为null(没有进入循环)，必须特殊处理，精髓所在</span></span><br><span class="line">       <span class="keyword">if</span>(q == <span class="keyword">null</span>)&#123;</span><br><span class="line">           head = head.next;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           q.next = q.next.next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="通过值查找"><a href="#通过值查找" class="headerlink" title="通过值查找"></a>通过值查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">findByValue</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">       Node node = head;</span><br><span class="line">       <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">           node = node.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p><p>比如，删除操作的情况存在两种情况：</p><ul><li>删除结点中“值等于某个给定值”的结点 </li><li>删除给定指针指向的结点。</li></ul><p><strong>第一种情况链表的时间复杂度都是O(n)，第二种情况双链表无需查找，O(1)时间复杂度删除节点</strong></p><p><mark><strong>LinkedHashMap用的就是双向链表</strong></mark></p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>以尾部插入举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertToTail</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        DuoNode node = <span class="keyword">new</span> DuoNode(data);</span><br><span class="line">        DuoNode last = tail;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next = node;</span><br><span class="line">            node.prev = last;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除头部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> DuoNode <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DuoNode h = head;</span><br><span class="line">        <span class="keyword">if</span>(count &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//两句话最好不要反着来</span></span><br><span class="line">            head = h.next;</span><br><span class="line">            head.prev = <span class="keyword">null</span>;</span><br><span class="line">            --count;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>删除尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> DuoNode <span class="title">deleteTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DuoNode q = tail;</span><br><span class="line">       <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           tail = tail.prev;</span><br><span class="line">           tail.next = <span class="keyword">null</span>;</span><br><span class="line">           --count;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> q;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> DuoNode <span class="title">findIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DuoNode node = head;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num &lt; index) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表</p><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    CircleLinkedList()&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        tail = <span class="keyword">null</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入操作-1"><a href="#插入操作-1" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertHead</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Node node = <span class="keyword">new</span> Node(data,<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">if</span>(count== <span class="number">0</span>)&#123;</span><br><span class="line">           head = node;</span><br><span class="line">           tail = node;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           node.next = head;</span><br><span class="line">           tail.next = node;</span><br><span class="line">           head = node;</span><br><span class="line">           count++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="LRU缓存淘汰算法"><a href="#LRU缓存淘汰算法" class="headerlink" title="LRU缓存淘汰算法"></a>LRU缓存淘汰算法</h3><p><strong>思路</strong>：维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p><ol><li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li><li>如果此数据没有在缓存链表中，又可以分为两种情况：<ul><li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li><li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li></ul></li></ol><p><strong>构造方法</strong></p><p>比起普通链表多维护一个容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUByLinkedList</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">//已存储容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUByLinkedList</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        size = capacity;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        Node preNode = findNode(data);</span><br><span class="line">    <span class="comment">//更新缓存，旧缓存清除</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != preNode)&#123;</span><br><span class="line">            delete(preNode);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= size)&#123;</span><br><span class="line">                <span class="comment">//如果缓存溢出，删除最早的缓存</span></span><br><span class="line">                deleteToTail();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        insertToHead(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查找缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">findNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != node &amp;&amp; <span class="keyword">null</span> != node.next)&#123;</span><br><span class="line">            Node nextNode = node.next;</span><br><span class="line">            <span class="keyword">if</span>(data == nextNode.data)&#123;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">            node = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/bladedragon/Algorithm_practice/blob/master/src/main/java/dataStruct/LRU/LRUByLinkedList.java" target="_blank" rel="noopener">详细代码</a></p><h3 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h3><p><strong>递归法</strong></p><ul><li><p>注意开始边界条件</p></li><li><p>当递归的最后节点的时候将最后第二个节点的next节点指向最后第二个节点，然后最后一个节点成为了头节点</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表反转  ——递归法（精髓）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">reverseList</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span> || node.next == <span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">        Node p = reverseList(node.next);</span><br><span class="line">        node.next.next = node;</span><br><span class="line">        node.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>非递归法</strong></p><p>要点：1. 必须维护前驱节点  2. 反转将后继指针指向前驱节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Node <span class="title">reserve</span><span class="params">(Node list)</span></span>&#123;</span><br><span class="line">    Node cur = list;</span><br><span class="line">    <span class="comment">//存储链表的上一个节点，遍历完之后变成头节点</span></span><br><span class="line">    Node pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//暂存指向下一个节点的引用</span></span><br><span class="line">        Node next = cur.next;</span><br><span class="line">        <span class="comment">//反转，将存储的下一个节点指向上一个节点</span></span><br><span class="line">        cur.next = pre;</span><br><span class="line">        <span class="comment">//下面两部将链表向下移动</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历完之后pre变成头节点</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环的检测"><a href="#环的检测" class="headerlink" title="环的检测"></a>环的检测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用快慢指针法。追及问题，只要慢指针追上快指针，说明存在环路</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCircle</span><span class="params">(Node list)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(list== <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node fast = list.next;</span><br><span class="line">        Node slow = list;</span><br><span class="line">        <span class="comment">//注意截止条件</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="两个有序链表的合并"><a href="#两个有序链表的合并" class="headerlink" title="两个有序链表的合并"></a>两个有序链表的合并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeSortList</span><span class="params">(Node la,Node lb)</span></span>&#123;</span><br><span class="line">            Node  p = la;</span><br><span class="line">            Node q  =lb;</span><br><span class="line">            Node head ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理头部的特殊情况</span></span><br><span class="line">       <span class="keyword">if</span>(p.data&lt;q.data)&#123;</span><br><span class="line">                head = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                head = q;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            Node r = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span> &amp;&amp; p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.data &lt; p.data) &#123;</span><br><span class="line">                r.next = q;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.next = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            r.next = q;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(q.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            r.next =p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以通过维护一个哨兵让代码更加简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有序合并（哨兵机制优化）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> la</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeTwoListsA</span><span class="params">(Node la,Node lb)</span></span>&#123;</span><br><span class="line">    Node soldier =  <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="keyword">null</span>);</span><br><span class="line">    Node p = soldier;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常的合并逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归合并链表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> l2</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Node <span class="title">mergeTwoLists</span><span class="params">(Node l1, Node l2)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> l2;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> l1;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (l1.data &lt; l2.data) &#123;</span><br><span class="line">              l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">              <span class="keyword">return</span> l1;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">              <span class="keyword">return</span> l2;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表的倒数n个节点"><a href="#删除链表的倒数n个节点" class="headerlink" title="删除链表的倒数n个节点"></a>删除链表的倒数n个节点</h3><p>快指针比慢指针前k个节点，然后快指针遍历到尾部的时候慢指针刚刚好到删除节点，注意保存删除节点的上一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">deleteLastKth</span><span class="params">(Node list,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        Node fast = list;</span><br><span class="line">        <span class="comment">//注意这里的i！！！！</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; i&lt;index)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Node slow = list;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//遍历到最后fast指针指向最后一个节点，注意快慢指针之间的间隔</span></span><br><span class="line">        <span class="comment">//因为选择使用prev作为删除节点，所以next !=null</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            prev = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prev != <span class="keyword">null</span>)&#123;</span><br><span class="line">            prev.next = prev.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list = list.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="求链表的中间节点"><a href="#求链表的中间节点" class="headerlink" title="求链表的中间节点"></a>求链表的中间节点</h3><p>快慢指针法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">fndMiddleNode</span><span class="params">(Node list )</span></span>&#123;</span><br><span class="line">       Node fast = list;</span><br><span class="line">       Node slow = list;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//第一个条件是防止head为null，第二个是为了使得fast指针遍历到最后一个节点</span></span><br><span class="line">       <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">           fast = fast.next.next;</span><br><span class="line">           slow = slow.next;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> slow;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否回文串"><a href="#判断是否回文串" class="headerlink" title="判断是否回文串"></a>判断是否回文串</h3><p><strong>思路</strong>：</p><p>使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(Node list)</span></span>&#123;</span><br><span class="line">        Node slow = list;</span><br><span class="line">        Node fast = list;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            Node next = slow.next;</span><br><span class="line"><span class="comment">//链表反向</span></span><br><span class="line">            slow.next = prev;</span><br><span class="line">            <span class="comment">//前驱指针后移</span></span><br><span class="line">            prev = slow;</span><br><span class="line">            <span class="comment">//慢指针后移</span></span><br><span class="line">            slow = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跨过中点，使得prev和slow同步，这里存在节点数是奇数还是偶数的情况</span></span><br><span class="line">        <span class="keyword">if</span>(fast != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(slow != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slow.data != prev.data)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章攻略ARP协议</title>
      <link href="/2020/02/15/arp/"/>
      <url>/2020/02/15/arp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ARP协议全称地址解析协议（ Address Resolution Protocol），即通过IP地址解析MAC地址的协议。</p><p><img src="http://cdn.zblade.top/qiniu_img/65966314_p2.jpg" alt></p><a id="more"></a><p>当主机之间需要相互通信，并且已经获取到对方主机的IP地址后，处于三层的数据包要向下封装，为了能让数据通过物理链路传输到对方，需要知道对方的MAC地址。ARP协议就是通过目的IP地址去寻找目的MAC地址的协议。</p><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a><strong>报文格式</strong></h3><p>首先查看一下ARP协议的报文格式</p><p><img src="http://cdn.zblade.top/qiniu_img/1571137607504.png" alt></p><p><strong>Source/Destination Hardware/Protocol Address</strong>: 从之前所述可以得知ARP协议通过IP地址去查找MAC地址，因此报文中必定含有源目IP地址和源目MAC地址。同时据此也可以看出ARP协议是工作在网络层的。除此之外，还有一些其他字段</p><p><strong>Hardware/Protocol Type</strong>：MAC地址/IP地址类型，一般硬件地址类型是以太网，三层协议类型是IP</p><p><strong>Hardware/Protocol Length</strong>:MAC地址/IP地址长度，单位是字节</p><h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><p>看完了ARP报文的基本结构，接下来就让我们看看ARP协议是如何具体工作的吧</p><h4 id="动态ARP"><a href="#动态ARP" class="headerlink" title="动态ARP"></a>动态ARP</h4><p>ARP协议最常见的应用就是动态ARP</p><p><img src="http://cdn.zblade.top/qiniu_img/1571139914913.png" alt></p><p>如图，假设新加入的一台主机Host_1想要向Host_3发送数据，此时Host_1已经拥有了Host_3的IP地址</p><p><strong>1.ARP请求</strong></p><p>ARP协议会维护ARP表，里面存放着IP地址和MAC地址的映射关系。Host_1会查找自己的ARP表项，如果找到，直接单播发送到目的主机；如果没有，全网段广播IP地址</p><p><strong>2.ARP响应</strong></p><p>收到ARP请求的主机都会查看请求报文的目的IP地址是不是自己的，如果不是，直接丢弃；如果是，因为知道报文发送方的IP地址和MAC地址，所以将发送单播ARP响应到Host_1；同时将该ARP报文中源IP地址和源MAC地址缓存在自己的ARP表中</p><p><strong>3.ARP缓存</strong></p><p>收到响应后主机Host_1将检查自己的IP地址和响应的IP地址是否匹配，如果匹配成功，将该映射关系缓存在ARP表中，并封装数据传输到对端主机</p><h4 id="静态ARP"><a href="#静态ARP" class="headerlink" title="静态ARP"></a>静态ARP</h4><p>相比较动态ARP自动获取MAC地址，静态ARP需要网络管理员手动将IP地址和MAC地址的映射关系写入到ARP表中，静态的ARP表项不会老化</p><p>有两种静态表项</p><ol><li>短静态表项：只绑定IP地址和MAC地址，不绑定VLAN和接口。此时该表项不能直接用于数据转发，需要发起ARP请求并收到ARP响应后，匹配响应的映射关系和静态表项相同后，将VLAN和接口填入ARP表项后，该表项才能正式生效</li><li>长静态表项：不仅绑定IP地址和MAC地址，同时绑定VLAN和接口，此时该表项直接生效.</li></ol><p><strong>配置静态ARP的场景</strong></p><p>静态ARP虽然配置繁琐，不灵活，但是不会老化，也不会被动态ARP表项覆盖，因此在特定场景下有特殊的用途，下面介绍几种典型应用</p><ol><li>动态ARP容易被攻击，同时也可能会出现老化而消失的现象，因此为了确保某台重要设备的稳定性和安全性，可以选择配置相对安全可靠的静态ARP。</li><li>当网络中用户设备的MAC地址为组播MAC地址时，可以在路由器上配置静态ARP表项。缺省情况下，设备收到源MAC地址为组播MAC地址的ARP报文时不会进行ARP学习。  </li><li>当需要禁止某个IP地址访问设备时，可以将该IP地址和一个不存在的MAC地址绑定。</li></ol><h4 id="老化机制"><a href="#老化机制" class="headerlink" title="老化机制"></a><strong>老化机制</strong></h4><p>存在在ARP表中的动态ARP表项存在有效时间，过期将删除该表项，从而释放ARP表的容量，提高设备的性能</p><p> 动态ARP表项的老化参数有：<mark>老化超时时间</mark>、<mark>老化探测次数</mark>和<mark>老化探测模式</mark> </p><ul><li>老化超时时间：ARP达到超时时间后会发送老化探测报文（其实就是ARP请求），如果收到响应，更新ARP表项，如果没有，探测结束</li><li>老化探测次数：到达一定老化探测次数未收到响应，删除该表项</li><li>老化探测模式：探测报文支持广播和单播</li></ul><p>注：当接口down掉后，该接口相关的所有动态ARP表项将全部删除</p><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h4><p><strong>可用于主机IP冲突检测</strong>：当主机的IP地址发生变更后或者链路刚刚UP后，为了防止和已存在的IP地址冲突，ARP协议将主动广播包含主机IP地址的ARP请求，如果收到ARP响应，说明该IP地址已经被使用，则存在冲突。</p><p><strong>通告新的MAC地址</strong>：由于设备新换了网卡等情况导致MAC地址发生变更，此时可以发送免费ARP来让其它主机更新表项</p><p><strong>用于VRRP组主备模式之间切换</strong>： 发生主备变换后，MASTER设备会广播发送一个免费ARP报文来通告发生了主备变换 </p><h4 id="代理ARP"><a href="#代理ARP" class="headerlink" title="代理ARP"></a>代理ARP</h4><p>如果ARP报文需要发往同一网段但不同物理网络的主机时，就需要通过代理ARP来实现请求的代理。开启代理ARP的设备将接受本网段的ARP请求，同时查找路由表，如果路由表中有相应的IP地址，说明通过该设备可以通往目的设备，则代理ARP设备会以自己的MAC地址发送ARP响应，之后便通过该设备进行数据转发。</p><p>代理ARP共有三种模式</p><ul><li>路由式代理： 需要互通的主机（主机上没有配置缺省网关，无法知道）处于相同的网段但不在同一物理网络（即不在同一广播域）的场景 </li><li>VLAN内代理： 需要互通的主机处于相同网段，并且属于相同VLAN，但是VLAN内配置了端口隔离的场景。 </li><li>VLAN间代理： 需要互通的主机处于相同网段，但属于不同VLAN的场景 </li></ul><p><img src="http://cdn.zblade.top/qiniu_img/1571145761403.png" alt></p><p>代理ARP功能强大，一般用于网关路由器，可以防止用户配置错误网关地址依然可以通信，但是由于代理ARP对通信无感知，因此可能被黑客利用实施ARP欺骗等攻击，对网络安全造成风险。同时，在配置静态路由时如果使用错误使用代理ARP也会导致学习到错误的MAC地址。</p><h4 id="RARP"><a href="#RARP" class="headerlink" title="RARP"></a>RARP</h4><p>属于ARP的逆向协议， 可以将MAC地址解析为IP地址的协议。</p><p>一般会在无盘工作站、帧中继协议中出现，但是现在使用较少。</p><p>that ’s all~</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类源码学习</title>
      <link href="/2020/02/12/stringBuilder/"/>
      <url>/2020/02/12/stringBuilder/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>恰好最近项目做到了string类相关的问题，就借着网上的分析，较深入地比较了一下stringBuilder类和String类的源码，本来还应该有一个Stringbuffer类，因为时间原因所以只能下次补上了。</p><a id="more"></a><h2 id="StringBuilder类和string类的区别"><a href="#StringBuilder类和string类的区别" class="headerlink" title="StringBuilder类和string类的区别"></a>StringBuilder类和string类的区别</h2><p><strong>相同</strong>：底层均采用字符数组<code>value</code>来保存字符串</p><p><strong>区别</strong>：<code>String</code>类的<code>value</code>数组有<code>final</code>修饰，指向不可改，同时<code>private</code>未提供修改<code>value</code>数组的方法，==因此String类一旦赋值即不可变==。<code>StringBuilder</code>类的<code>value</code>数组没有<code>final</code>修饰，可以改变指向，==且可以扩容，扩容通过新建字符数组完成==。</p><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="1-默认的无参和含参构造函数"><a href="#1-默认的无参和含参构造函数" class="headerlink" title="1.默认的无参和含参构造函数"></a>1.默认的无参和含参构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = original.value;</span><br><span class="line">        <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>都是直接在现有常量上进行赋值（将常量的指针指向参数）</p><h4 id="2-参数是数组的构造函数"><a href="#2-参数是数组的构造函数" class="headerlink" title="2.参数是数组的构造函数"></a>2.参数是数组的构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Array类</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用Arrays的copyOf方法，返回复制完的新数组。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><p>返回的是字符数组value的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h4><p>判断字符数组长度是否为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回value对象的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>重写equals()方法,判断为真的情况是：两个对象相同，同时对应的value字符数组内容也相同</p><p><mark>其中：可能是同一对象也可能是内容相同的不同String</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是不是同一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//判断是不是String对象，强转String类型</span></span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo()"></a>compareTo()</h4><p>返回：如果第一个不相同字符之差，如果一个字符串是另一个的子串（前lim个字符相同），返回两个字符串长度之差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h4><p>1.substring(int)</p><p>该函数返回从给定参数位置起到字符串结束的新字符串。如果给定从0开始，<mark>则返回原本的String对象，否则返回一个新的String对象。</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">        <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.substring(int, int)</p><p>如果要获取的子串是从0到最后，则返回原本的String对象，否则返回一个新的String对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">        <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">                : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>返回：如果是相同则返回原来的String对象，不同则先找到第一个不同的字符然后将字符复制到新的字符数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = value.length;</span><br><span class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到第一个不同的索引下标</span></span><br><span class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    buf[j] = val[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = val[i];</span><br><span class="line">                    buf[i] = (c == oldChar) ? newChar : c;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><mark>可见，<strong>String是依赖字符常量表实现的</strong>； 同时<strong>所有对String发生修改的方法返回值都是一个新的String对象，没有修改原有对象</strong>； 因此是线程安全的</mark></p><h2 id="StringBuilder类源码"><a href="#StringBuilder类源码" class="headerlink" title="StringBuilder类源码"></a>StringBuilder类源码</h2><h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><p>1 .默认构造函数</p><p><code>Stringbuilder</code>使用了父类<code>AbstractStringBuilder</code>构造，默认长度<code>16</code>.<mark>注意这里的value没有final修饰，权限为默认，因此内部数值可以改变·</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父类*/</span>    </span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.传入字符串·</p><p>会设置初始容量为传入字符串长度加上<code>16</code>，再通过<code>append</code>函数将<code>str</code>写入，<code>append</code>函数见常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">        append(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h3><p>append函数调用时会首先查看是否超出容量上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> append(String.valueOf(obj));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//调用父类</span></span><br><span class="line">       <span class="keyword">super</span>.append(str);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>容量检查函数</strong></p><p>参数是当前对象的<code>value</code>中字符长度与传入字符串长度之和，也即是<code>value</code>的容量最小值。</p><p>如果需要的容量最小值大于目前<code>value</code>容量，新申请一块内存复制进去</p><p>扩容的新容量为当前<code>value</code>的容量<code>2</code>倍加<code>2</code>，如果扩容后的容量还是比需要的最小容量小，则直接扩容为需要的最小容量，再将当前value内容复制给一个新的长度为<code>newCapacity</code>的字符数组，再将value<code>指向</code>这个扩容后的新数组。即扩容是通过开辟新数组完成的，返回的也是新创建的新数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            value = Arrays.copyOf(value,</span><br><span class="line">                    newCapacity(minimumCapacity));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------中间省去很多函数...---------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = (value.length &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (newCapacity &lt;= <span class="number">0</span> || MAX_ARRAY_SIZE - newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            ? hugeCapacity(minCapacity)</span><br><span class="line">            : newCapacity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行完<code>ensureCapacityInternal</code>函数后，<code>this</code>对象的<code>value</code>数组已经指向一个扩容后的新数组，并且之前的<code>value</code>数组里的值也复制到新的<code>value</code>数组中，接下来执行<code>getChars</code>函数</p><p><strong>复制字符函数</strong></p><p>该函数是将调用的<code>string</code>对象的<code>value</code>数组从<code>srcBegin</code>到<code>srcEnd</code>复制给目标数组<code>dst</code>，从<code>dst</code>数组的第<code>dstBegin</code>位置开始。</p><p><code>append</code>函数中执行完<code>str.getChars</code>函数后就将参数<code>str</code>的内容追加到<code>StringBuilder</code>对象的<code>value</code>数组后面，再更新<code>count</code>值，返回调用对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> srcBegin, <span class="keyword">int</span> srcEnd, <span class="keyword">char</span> dst[], <span class="keyword">int</span> dstBegin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (srcBegin &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcEnd &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(srcEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcBegin &gt; srcEnd) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(srcEnd - srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.delete(start, end);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.deleteCharAt(index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>delete</code>()函数通过覆盖原理，将删除的元素覆盖掉·</p><p><code>deleteCharAt</code>()删除索引为<code>index</code>处的字符。通过调用数组复制函数来完成，将索引后面的内容依次复制到从索引开始的位置上，即通过覆盖的原理完成，更新count。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父类调用函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(start);</span><br><span class="line">        <span class="keyword">if</span> (end &gt; count)</span><br><span class="line">            end = count;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException();</span><br><span class="line">        <span class="keyword">int</span> len = end - start;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.arraycopy(value, start+len, value, start, count-end);</span><br><span class="line">            count -= len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= count))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">        System.arraycopy(value, index+<span class="number">1</span>, value, index, count-index-<span class="number">1</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span>[] str, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.insert(index, str, offset, len);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*简单拿这个举例子，后面char类型可以换成其他类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.insert(offset, c);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先确保<code>value</code>数组容量足够，然后通过数组复制，将索引位置开始全部向后移一位，再将索引位置赋值c，更新<code>count</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类调用函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(count + <span class="number">1</span>);</span><br><span class="line">        System.arraycopy(value, offset, value, offset + <span class="number">1</span>, count - offset);</span><br><span class="line">        value[offset] = c;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><code>StringBuffer</code>以后有机会在写吧。。。</p><p><a href="https://www.cnblogs.com/snifferhu/p/5903958.html" target="_blank" rel="noopener">对比来源</a></p><table><thead><tr><th>差别</th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>常量 / 变量</td><td>常量</td><td>变量</td><td>变量</td></tr><tr><td>线程是否安全</td><td>安全</td><td>安全</td><td>非安全</td></tr><tr><td>所在内存区域</td><td>Constant String Pool(常量池)</td><td>heap</td><td>heap</td></tr><tr><td>是否能被继承</td><td>否</td><td>否</td><td>否</td></tr><tr><td>代码行数</td><td>3157</td><td>718</td><td>448</td></tr><tr><td>使用场景</td><td>在字符串不经常变化的场景</td><td>在频繁进行字符串运算（如拼接、替换、删除等）， 并且运行在多线程环境</td><td>在频繁进行字符串运算（如拼接、替换、和删除等）， 并且运行在单线程的环境</td></tr><tr><td>场景举例</td><td>常量的声明、少量的变量运算</td><td>XML 解析、HTTP 参数解析和封装</td><td>SQL 语句的拼装、JSON 封装</td></tr></tbody></table><p><code>AbstractStringBuilder</code>：<code>StringBuffer</code>类与<code>StringBuilder</code>类都继承了<code>AbstractStringBuilder</code>，抽象父类里实现了除<code>toString</code>以外的所有方法。<br><code>StringBuilder</code>：自己重写了方法之后，全都在方法内<code>super.function()</code>，未做任何扩展。同时从类名语义上来说<code>String</code>构建者，所以没有<code>subString</code>方法看来也合情合理；<br><code>StringBuffer</code>：在重写方法的同时，几乎所有方法都添加了<code>synchronized</code>同步关键字；</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis基础特性和sqlsession原理</title>
      <link href="/2020/01/20/mybatis/"/>
      <url>/2020/01/20/mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要总结一下mybaitis的基础配置，基本特性，最后简单分析一下sqlsession的原理，了解了运行过程。</p>        <div id="aplayer-gzuKHzLT" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-gzuKHzLT"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "漂流",              author: "菅原纱由理（THE SxPLAY）",              url: "http://music.163.com/song/media/outer/url?id=1397665609.mp3",              pic: "http://p2.music.126.net/DpcMK6vdj7vD-yY3QUHwng==/109951164433935873.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><a id="more"></a><h2 id="简单配置介绍"><a href="#简单配置介绍" class="headerlink" title="简单配置介绍"></a>简单配置介绍</h2><p>简单来说，Mybatis的配置主要分为以下几步：</p><ul><li><strong>编写POJO即JavaBean，最终的目的是将数据库中的查询结果映射到JavaBean上；</strong></li><li><strong>配置与POJO对应的Mapper接口：里面有各种方法，对应mapper.xml中的查询语句；</strong></li><li><strong>配置与POJO对应的XML映射：编写缓存，SQL查询等；</strong></li><li><strong>配置mybatis-config.xml主要的Mybatis配置文件：配置数据源、扫描mapper.xml等。</strong></li></ul><p>　　注意：以上的配置并没有严格的前后顺序；</p><p>借用一个比较清晰的配置流程图</p><p><img src="/2020/01/20/mybatis/1566090966352.png" alt="1566090966352"></p><blockquote><p>可以看出mapper接口实现类的获得是通过mybatis-config.xml-&gt;SqlSessionFactoryBuilder-&gt;SqlSessionFacotry-&gt;SqlSession-&gt;mapper</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h3><ol><li><strong>SqlSessionFactoryBuilder</strong>：作用就是创建一个构建器，一旦创建了<code>SqlSessionFactory</code>，它的任务就算完成了，可以回收。</li><li><strong>SqlSessionFactory</strong>：作用是创建<code>SqlSession</code>，而<code>SqlSession</code>相当于JDBC的一个<code>Connection</code>对象，每次应用程序需要访问数据库，我们就要通过<code>SqlSessionFactory</code>创建一个<code>SqlSession</code>，所以<code>SqlSessionFactory</code>在Mybatis整个生命周期中存在（每个数据库对应一个<code>SqlSessionFactory</code>，是单例产生的）。</li><li><strong>SqlSession</strong>：生命周期是存在于请求数据库处理事务的过程中，是一个线程不安全的对象（在多线程的情况下，需要特别注意），即存活于一个应用的请求和申请，可以执行多条SQL保证事务的一致性。</li><li><strong>Mapper</strong>：是一个接口，并没有实现类。它的作用是发送SQL，返回我们需要的结果或者发送SQL修改数据库表，所以它存活于一个<code>SqlSession</code>内，是一个方法级别的东西。当<code>SqlSession</code>销毁的时候，Mapper也会销毁。</li></ol><h3 id="基础特性"><a href="#基础特性" class="headerlink" title="基础特性"></a>基础特性</h3><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>即系统延迟执行查询，一般用于嵌套查询的时候，嵌套在内的SQL查询会延迟加载，等到真正需要使用该查询的时候才加载。就像懒人你说一下，他动一下，绝不会多执行半步，因此该特性也称之为懒加载。</p><p>懒加载必须配置<code>config.xml</code>，并且只能通过<code>association</code>或<code>collection</code>实现，毕竟只有在存在映射关系的业务场景里你需要使用懒加载</p><p>配置语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用时需要注意延迟加载必须使用resultMap，resultType不具有延迟加载功能。</p><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul><li>系统默认开启,缓存的范围为一个<code>SqlSession</code></li><li>只有一个SqlSession下的相同查询才会应用缓存，不同sqlSession下的即使查询相同一级缓存也不会生效</li></ul><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><ul><li><p>解决<code>SqlSession</code>相互隔离的情况，缓存范围为一个<code>Mapper</code>接口</p></li><li><p>二级缓存默认是不开启的，需要进行配置，Mybatis要求返回的POJO必须是可序列化的，即POJO实现Serializable接口。</p></li><li><p>缓存的配置只需要在<code>XML</code>配置<code>&lt;cache/&gt;</code>即可，或者指定算法，刷新时间间隔，缓存状态，大小等</p><blockquote><p>例：</p></blockquote></li></ul><p><img src="/2020/01/20/mybatis/1566093841325.png" alt="1566093841325"></p><ul><li>映射语句文件中所有select语句将会被缓存；</li><li>映射语句文件中所有insert、update和delete语句会被刷新缓存；</li><li>缓存使用默认的LRU最近最少使用算法回收；</li><li>根据时间表，缓存不会任何时间顺序刷新</li><li>缓存会存储列表集合或对象的1024个引用</li><li>缓存被视为可read/write的缓存，意味着是不可以被共享的，而可以被安全地修改。</li></ul><h4 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h4><p>通过Mybatis实现的接口，使用redis等进行缓存</p><h3 id="实践配置"><a href="#实践配置" class="headerlink" title="实践配置"></a>实践配置</h3><p>待补充</p><h2 id="SqlSession原理"><a href="#SqlSession原理" class="headerlink" title="SqlSession原理"></a>SqlSession原理</h2><p><code>SqlSession</code>提供select/insert/update/delete方法</p><p>映射器（<code>Mapper</code>）其实就是一个动态代理对象，进入到<code>MapperMethod</code>的<code>execute</code>方法就能简单找到<code>SqlSession</code>的删除、更新、查询、选择方法.</p><p>从底层实现来说：通过动态代理技术，让接口跑起来，之后采用命令模式，最后还是采用了<code>SqlSession</code>的接口方法（<code>getMapper()</code>方法等到<code>Mapper</code>）执行SQL查询（也就是说Mapper接口方法的实现底层还是采用<code>SqlSession</code>接口方法实现的）。</p><p><strong>SqlSession重要的四个对象</strong></p><ol><li><strong>Execute</strong>：调度执行<code>StatementHandler</code>、<code>ParmmeterHandler</code>、<code>ResultHandler</code>执行相应的SQL语句；</li><li><strong>StatementHandler</strong>：使用数据库中<code>Statement（PrepareStatement）</code>执行操作，即底层是封装好了的<code>prepareStatement</code></li><li><strong>ParammeterHandler</strong>：处理SQL参数</li><li><strong>ResultHandler</strong>：结果集ResultSet封装处理返回。</li></ol><h3 id="SqlSession的四大对象"><a href="#SqlSession的四大对象" class="headerlink" title="SqlSession的四大对象"></a>SqlSession的四大对象</h3><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><p>起java和数据库交互桥梁的作用，参与整个SQL执行过程。<strong>分类</strong></p><ol><li>SIMPLE简易执行器（默认）</li><li>REUSE重用预处理执行器</li><li>BATCH批量更新、批量专用处理器</li></ol><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExecutorType &#123;  SIMPLE, REUSE, BATCH&#125;</span><br></pre></td></tr></table></figure><p><strong>作用</strong></p><p>调度其他对象，完成预编译、配置参数和返回结果集</p><h4 id="StatementHanlde"><a href="#StatementHanlde" class="headerlink" title="StatementHanlde"></a>StatementHanlde</h4><p><strong>分类</strong>(分别对应不同执行器)</p><ul><li>SimpleStatementHandler</li><li>PrepareStatementHandler</li><li>CallableStatementHandler</li></ul><p><strong>作用</strong></p><p>专门处理数据库会话。进行预编译并调用ParameterHandler配置参数。大致来讲只是对数据库的连接做了封装</p><p><strong>工作流程</strong></p><ol><li>通过调用<strong>RoutingStatementHandler</strong>对象生成StatemenetHandler</li><li>RoutingStatementHandler查找相应的statementHandler对象</li><li>statementHandler调用数据库的方法</li></ol><h4 id="ParameterHandler"><a href="#ParameterHandler" class="headerlink" title="ParameterHandler"></a>ParameterHandler</h4><p><strong>作用</strong></p><p>对预编译的参数进行设置</p><p><strong>工作流程</strong></p><ol><li>从parameterObject中取到参数，然后使用typeHandler（注册在Configuration中）进行参数处理</li></ol><h4 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h4><p><strong>作用</strong></p><p>组装结果返回结果集</p><h3 id="运行过程总结"><a href="#运行过程总结" class="headerlink" title="运行过程总结"></a>运行过程总结</h3><ol><li><strong>prepare预编译</strong></li><li><strong>parameterize设置参数</strong></li><li><strong>doUpdate/doQuery执行SQL</strong></li></ol><p>神人的总结</p><p><img src="/2020/01/20/mybatis/1566098446042.png" alt="1566098446042"></p><p>参考链接</p><p><a href="https://www.cnblogs.com/jian0110/p/9387941.html" target="_blank" rel="noopener">Mybatis缓存（1）——–系统缓存及简单配置介绍</a></p><p><a href="https://www.cnblogs.com/jian0110/p/9452592.html" target="_blank" rel="noopener">Mybatis的SqlSession运行原理</a></p><p><a href="https://www.cnblogs.com/sword-successful/p/7400685.html" target="_blank" rel="noopener">MyBatis从入门到放弃六：延迟加载、一级缓存、二级缓存</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的锁</title>
      <link href="/2020/01/09/concurrent5/"/>
      <url>/2020/01/09/concurrent5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《并发编程的艺术》阅读笔记第五章，图文绝配</p><p>你锁我，我锁你，两者互不相让，然后就进入了死局，这像极了爱情。</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-lqz9jr.jpg" alt></p><a id="more"></a><h2 id="一、Lock接口"><a href="#一、Lock接口" class="headerlink" title="一、Lock接口"></a>一、Lock接口</h2><p>提供了synchronized不具有的特性：</p><ol><li>尝试非阻塞地获取锁：<code>tryLock()</code>，调用方法后立刻返回</li><li>能被中断地获取锁：<code>lockInterruptibly()</code>:在锁的获取中可以中断当前线程</li><li>超时获取锁:<code>tryLock(time,unit)</code>，超时返回</li></ol><p>Lock接口的实现基本都是通过==聚合了一个同步器的子类来完成线程访问控制的。==</p><p> <strong>使用注意事项</strong>   </p><ul><li><code>unlock</code>方法要在<code>finally</code>中使用，目的保证在获取到锁之后，最终能被释放</li><li><code>lock</code>方法不能放在<code>try</code>块中，因为如果<code>try catch</code>抛出异常，会导致锁无故释放</li></ul><p><img src="/2020/01/09/concurrent5/image-20200108213701147.png" alt="image-20200108213701147"></p><h2 id="二、队列同步器"><a href="#二、队列同步器" class="headerlink" title="二、队列同步器"></a>二、队列同步器</h2><blockquote><p>队列同步器<code>AbstractQueuedSynchronizer</code>是用来构建锁或其他同步组件的基础框架。<br>它使用一个<code>int</code>成员变量表示同步状态，通过内置的<code>FIFO</code>队列来完成资源获取线程的排队工作。</p><p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。同步器既可以支持独占式地获取同步状态，也可以支持共享式地获取同步状态,这样就可以方便实现不同类型的同步组件（<code>ReentrantLock</code>、<br><code>ReentrantReadWriteLock</code>和<code>CountDownLatch</code>等）</p></blockquote><p>==<strong>同步器</strong>==是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。<br>理解两者的关系：</p><ul><li>锁是面向使用者的，它定义了使用者与锁交互的接口，隐藏了实现细节；</li><li>同步器是面向锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待和唤醒等底层操作。</li></ul><h3 id="队列同步器的接口与示例"><a href="#队列同步器的接口与示例" class="headerlink" title="队列同步器的接口与示例"></a><strong>队列同步器的接口与示例</strong></h3><blockquote><p>同步器的设计是基于模板方法模式的，也就是说，使用者需要继承同步器并重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，而这些模板方法将会调用使用者重写的方法。</p></blockquote><p>重写同步器指定的方法时，需要使用同步器提供的如下3个方法来<strong>访问或修改同步状态</strong></p><ul><li><code>getState</code>()：获取当前同步状态。</li><li><code>setState(int newState)</code>：设置当前同步状态。</li><li><code>compareAndSetState(int expect,int update)</code>：使用CAS设置当前状态，该方法能够保证状态设置的原子性。</li></ul><p><img src="/2020/01/09/concurrent5/image-20200108214810059.png" alt="image-20200108214810059"></p><p><img src="/2020/01/09/concurrent5/image-20200108214826047.png" alt="image-20200108214826047"></p><p>同步器提供的模板方法基本上分为3类：==<strong>独占式获取与释放同步状态</strong>==、==<strong>共享式获取与释放同步状态</strong>==和==<strong>查询同步队列中的等待线程情况</strong>==。自定义同步组件将使用同步器提供的模板方法来实现自己的同步语义。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MUtux源代码略</span><br></pre></td></tr></table></figure><h3 id="队列同步器的实现分析"><a href="#队列同步器的实现分析" class="headerlink" title="队列同步器的实现分析"></a>队列同步器的实现分析</h3><h4 id="1-同步队列"><a href="#1-同步队列" class="headerlink" title="1.同步队列"></a>1.同步队列</h4><p>通过一个<code>FIFO双向队列</code>来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成一个<code>Node</code>并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。</p><p>首节点是获取同步状态成功的节点，首节点在释放同步状态时，会唤醒后继节点，而后继节点在获取同步状态成功时将自己设置为首节点。</p><p><strong>节点的属性类型与名称以及描述</strong></p><h4 id><a href="#" class="headerlink" title></a><img src="/2020/01/09/concurrent5/image-20200108221052601.png" alt="image-20200108221052601"></h4><p><img src="/2020/01/09/concurrent5/image-20200108221142725.png" alt="image-20200108221142725"></p><h4 id="2-独占式同步状态获取和释放"><a href="#2-独占式同步状态获取和释放" class="headerlink" title="2.独占式同步状态获取和释放"></a>2.独占式同步状态获取和释放</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            <span class="comment">//如果上述操作失败，则阻塞线程</span></span><br><span class="line">            selfInterrupt();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//上述代码主要完成了同步状态获取、节点构造、加入同步队列以及在同步队列中自旋等待的相关工作，</span></span><br></pre></td></tr></table></figure><p><strong>代码分析：</strong><br>首先尝试获取同步状态，如果获取失败，构造独占式同步节点(<code>独占式Node.EXCLUSIVE</code>)并将其加入到节点的尾部，然后调用<code>acquireQueued</code>，使节点一死循环的方式去获取同步状态，如果获取不到就阻塞节点中的线程。</p><p><strong>两个死循环：入队、入队后</strong></p><ol><li><p><code>addWaiter</code>和<code>enq</code>方法·</p><p>在“死循环”中只有通过<code>CAS</code>将节点设置成为尾节点之后，当前线程才能从该方法返回，否则，当前线程不断地尝试设置。可以看出，<code>enq(final Node node)</code>方法将并发添加节点的请求通过CAS变得“串行化”了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWaiter方法尝试快速添加，但是存在出现并发导致节点无法正常添加成功（获取尾节点==null），因此enq方法无限循环添加节点，将节点加入到尾部</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><code>acquireQueued</code>方法</p><p>·==只有前驱节点是头结点才能尝试获取同步状态==，原因：</p></li><li><p>头结点是成功获取到同步状态的节点，而头结点的线程释放了同步状态后，将会唤醒其后继节点，后继节点的线程被唤醒后需要检查自己的前驱节点是否为头节点。</p></li><li><p>维护同步队列的FIFO原则。节点之间互不通信，便于对过早通知的处理（过早通知是指前驱节点不是头节点的线程<br>由于中断而被唤醒）</p></li></ol><p>释放同步状态使用<code>release</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">Node h = head;</span><br><span class="line"><span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span></span><br><span class="line">            <span class="comment">//unparkSuccessor(Node node)方法使用LockSupport（在后面的章节会专门介绍）来唤醒处于等待状态的线程</span></span><br><span class="line">unparkSuccessor(h);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>总结：在获取同步状态时，同步器维护一个同步队列，获取状态失败的线程都会被加入到队列中并在队列中进行自旋，移出队列（停止自旋）的条件是前驱节点是头结点且成功获取了同步状态。在释放同步状态时，同步器调用tryRelease方法释放同步状态，然后唤醒头结点的后继节点</code></pre><p><img src="/2020/01/09/concurrent5/image-20200109142300387.png" alt="image-20200109142300387"></p><h4 id="3-共享式同步状态获取和释放"><a href="#3-共享式同步状态获取和释放" class="headerlink" title="3.共享式同步状态获取和释放"></a>3.共享式同步状态获取和释放</h4><p>主要区别：同一时刻是否有多个线程同时获取到同步状态</p><pre><code>共享式访问资源时，其他共享式的访问均被允许，而独占式访问被阻塞。独占式访问资源时，同一时刻其他访问均被阻塞。</code></pre><ul><li><code>tryAcquireShared(int arg)</code>方法返回值为<code>int</code>类型，当返回值大于等于<code>0</code>时，表示能够获取到同步状态</li><li><code>releaseShared</code>·方法和独占式主要区别在于<code>tryReleaseShared(int arg)</code>方法必须确保同步状态（或者资源数）线程安全释放，一般是通过循环和<code>CAS</code>来保证的，因为释放同步状态的操作会同时来自多个线程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">源码细节还是有很多没有看懂</span><br><span class="line">比如interrupt的放置时机，如何保证共享的时候线程安全性、共享获取同步状态中的传播和信号都是什么意思。。。</span><br></pre></td></tr></table></figure><h4 id="4-独占式超时获取同步状态"><a href="#4-独占式超时获取同步状态" class="headerlink" title="4.独占式超时获取同步状态"></a>4.独占式超时获取同步状态</h4><blockquote><p>通过调用同步器的<code>doAcquireNanos(int arg,long nanosTimeout)</code>方法可以超时获取同步状态，即在指定的时间段内获取同步状态，如果获取到同步状态则返回<code>true</code>，否则，返回<code>false</code>。该方法提供了传统<code>Java</code>同步操作（比如<code>synchronized</code>关键字）所不具备的特性。</p></blockquote><p><strong>响应中断的同步状态获取过程</strong></p><p>在Java 5中，同步器提供了<code>acquireInterruptibly(int arg)</code>方法，这个方法在等待获取同步状态时，如果当前线程被中断，会立刻返回，并抛出<code>InterruptedException</code>。</p><p><code>doAcquireNanos(int arg,long nanosTimeout)</code>方法在支持响应中断的基础上，增加了超时获取的特性。针对超时获取，主要需要计算出需要睡眠的时间间隔<code>nanosTimeout</code>，为了防止过早通知，<code>nanosTimeout</code>计算公式为：<code>nanosTimeout-=now-lastTime</code>，其中<code>now</code>为当前唤醒时间，<code>lastTime</code>为上次唤醒时间，如果<code>nanosTimeout</code>大于<code>0</code>则表示超时时间未到，需要继续睡眠<code>nanosTimeout</code>纳秒，反之，表示已经超时·</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">独占式超时获取同步状态和独占式获取同步状态流程上非常相似</span><br><span class="line"></span><br><span class="line">主要区别在于未获取到同步状态时的处理逻辑。acquire(int args)在未获取到同步状态时，将会使当前线程一直处于等待状态，而doAcquireNanos(int arg,long nanosTimeout)会使当前线程等待nanosTimeout纳秒，如果当前线程在nanosTimeout纳秒内没有获取到同步状态，将会从等待逻辑中自动返回</span><br><span class="line"></span><br><span class="line">当时间小于等于一个超时自旋门限时则不再进行超时等待，而是进入快速的自旋过程</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/concurrent5/image-20200109152737429.png" alt="image-20200109152737429"></p><h2 id="三、重入锁（ReentrantLock）"><a href="#三、重入锁（ReentrantLock）" class="headerlink" title="三、重入锁（ReentrantLock）"></a>三、重入锁（ReentrantLock）</h2><blockquote><p>synchronized关键字隐式地支持重入</p><p>ReentrantLock不像synchronized隐式支持，在调用lock方法时，已经获取到锁的线程，能够再次调用lock方法获取锁而不被阻塞。</p></blockquote><p>公平的获取锁，也就是等待时间最长的线程最优先获取锁，也可以说锁获取是顺序的</p><p>事实上，公平的锁机制往往没有非公平的效率高，但是公平锁的好处在于：公平锁能够减少“饥饿”发生的概率，等待越久的请求越是能够得到优先满足。</p><h3 id="1-重入的实现"><a href="#1-重入的实现" class="headerlink" title="1.重入的实现"></a>1.重入的实现</h3><p>两个问题：</p><ol><li><p>再次获取锁</p><p>锁需要识别获取锁的线程是否为当前占据锁的线程，如果时，再次成功获取</p></li><li><p>最终释放</p><p>要求锁对于获取进行自增计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">问题：意义何在？</span><br><span class="line">防止出现循环获取锁影响性能或者造成死锁</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可重入获取锁的机制，在获取的时候如果不是第一次获取，状态加一，实际上没有进行CAS操作，因此在释放锁的时候要求state为0，才能彻底释放锁</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-公平锁与非公平锁的区别："><a href="#2-公平锁与非公平锁的区别：" class="headerlink" title="2.公平锁与非公平锁的区别："></a>2.公平锁与非公平锁的区别：</h3><p>如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO</p><pre><code>公平锁：CAS成功，且是队列的首节点（判断多了一层对前去前驱节点的判断）非公平锁：CAS成功即可</code></pre><p>重入锁的默认实现是非公平锁，原因：虽然会导致饥饿，但是非公平锁的的开销少（线程切换次数少），从而可以有更高的吞吐量。</p><h2 id="四、读写锁（ReentrantReadWriteLock）"><a href="#四、读写锁（ReentrantReadWriteLock）" class="headerlink" title="四、读写锁（ReentrantReadWriteLock）"></a>四、读写锁（ReentrantReadWriteLock）</h2><blockquote><p>前文中的锁基本都是排他锁，在同一时刻只允许一个线程访问。</p><p>读写所在同一时刻可以允许多个读线程访问，但在写线程访问时，所有读线程和其他写线程均被阻塞。（保证了写操作的可见性）</p><p>读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升。</p></blockquote><h3 id="读写锁的实现分析"><a href="#读写锁的实现分析" class="headerlink" title="读写锁的实现分析"></a>读写锁的实现分析</h3><h4 id="1-读写状态的设计"><a href="#1-读写状态的设计" class="headerlink" title="1.读写状态的设计"></a>1.读写状态的设计</h4><p>依赖自定义同步器，读写锁的自定义同步器需要在同步状态（一个int值）上维护多个读线程和一个写线程的状态，高16位表示读，低16位表示写。</p><p><img src="/2020/01/09/concurrent5/image-20200109181223912.png" alt="image-20200109181223912"></p><pre><code>位运算当前同步状态表示一个线程已经获取了写锁，且重进入了两次，同时也连续获取了两次读锁。读写锁是如何迅速确定读和写各自的状态呢？答案是通过位运算。假设当前同步状态值为S，写状态等于S&amp;0x0000FFFF（将高16位全部抹去），读状态等于S&gt;&gt;&gt;16（无符号补0右移16位）。当写状态增加1时，等于S+1，当读状态增加1时，等于S+(1&lt;&lt;16)，也就是S+0x00010000。</code></pre><h4 id="2-写锁的获取与释放"><a href="#2-写锁的获取与释放" class="headerlink" title="2.写锁的获取与释放"></a>2.写锁的获取与释放</h4><p><img src="/2020/01/09/concurrent5/image-20200109170244571.png" alt="image-20200109170244571"></p><p>写锁是一个支持重入的排他锁，如果当前线程已经获取了写锁，则增加写状态。<br>如果当前线程在获取写锁时，读锁已经被获取或者该线程不是已经获取写锁的线程，则当前线程进入等待状态。</p><p>==<strong>读锁存在，写锁不能获取：</strong>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读写锁要确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。</span><br></pre></td></tr></table></figure><h4 id="3-读锁的获取与释放"><a href="#3-读锁的获取与释放" class="headerlink" title="3.读锁的获取与释放"></a>3.读锁的获取与释放</h4><p>在没有其他写线程访问时，读锁总会被成功地获取。如果写锁已经被其他线程获取，则进入等待状态。</p><p>读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是<code>（1&lt;&lt;16）</code>。</p><p>==读状态的线程安全由CAS保证==</p><h4 id="4-锁降级（写锁降级成为读锁）"><a href="#4-锁降级（写锁降级成为读锁）" class="headerlink" title="4.锁降级（写锁降级成为读锁）"></a>4.锁降级（写锁降级成为读锁）</h4><p>定义：==把持住写锁==，再获取到读锁，随后释放写锁的过程</p><pre><code>writeLock.lock();readLock.lock();writeLock.unlock();</code></pre><blockquote><p>这边不是很理解。。。。</p></blockquote><blockquote><p>锁降级的前提是所有线程都希望对数据变化敏感，但是因为写锁只有一个，所以会发生降级。如果先释放写锁，再获取读锁，可能在获取之前，会有其他线程获取到写锁，阻塞读锁的获取，就无法感知数据变化了。所以需要先hold住写锁，保证数据无变化，获取读锁，然后再释放写锁。锁降级中读锁获取的必要性：</p></blockquote><pre><code>为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程获取了写锁并修改了数据，那么当前线程无法感知到数据的更新.如果当前线程获取读锁，则另一个线程会被阻塞，直到当前线程使用数据并释放锁之后，另一个线程才能获取写锁进行数据更新。</code></pre><h2 id="五、LockSupport工具"><a href="#五、LockSupport工具" class="headerlink" title="五、LockSupport工具"></a>五、LockSupport工具</h2><blockquote><p>LockSupport定义了一组的公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能，而LockSupport也成为构建同步组件的基础工具</p></blockquote><p><img src="/2020/01/09/concurrent5/image-20200109183846583.png" alt="image-20200109183846583"></p><p>在Java 6中，LockSupport增加了park(Object blocker)、parkNanos(Object blocker,long nanos)和parkUntil(Object blocker,long deadline)3个方法，用于实现阻塞当前线程的功能，其中参数blocker是用来标识当前线程在等待的对象（以下称为阻塞对象），该对象主要用于问题排查和系统监控。</p><h2 id="六、Condition接口"><a href="#六、Condition接口" class="headerlink" title="六、Condition接口"></a>六、Condition接口</h2><blockquote><p>Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式，但是这两者在使用方式以及功能特性上还是有差别的</p></blockquote><h3 id="1-Condition接口和示例"><a href="#1-Condition接口和示例" class="headerlink" title="1.Condition接口和示例"></a>1.Condition接口和示例</h3><p><img src="/2020/01/09/concurrent5/image-20200109185111173.png" alt="image-20200109185111173"></p><p>Condition在调用方法之前先获取锁</p><p><img src="/2020/01/09/concurrent5/image-20200109190057594.png" alt="image-20200109190057594"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在添加和删除方法中使用while循环而非if判断，目的是防止过早或意外的通知，只有条件</span><br><span class="line">符合才能够退出循环。回想之前提到的等待/通知的经典范式，二者是非常类似的。</span><br></pre></td></tr></table></figure><h3 id="2-Condition的实现分析"><a href="#2-Condition的实现分析" class="headerlink" title="2.Condition的实现分析"></a>2.Condition的实现分析</h3><blockquote><p><code>ConditionObject</code>是同步器<code>AbstractQueuedSynchronizer</code>的内部类，因为<code>Condition</code>的操作需要获取相关联的锁，所以作为同步器的内部类也较为合理。每个<code>Condition</code>对象都包含着一个队列（以下称为等待队列），该队列是<code>Condition</code>对象实现等待/通知功能的关键。</p></blockquote><p><strong>等待队列</strong></p><p>等待队列是一个FIFO的队列，在队列中的每个节点都包含了一个线程引用，该线程就是<br>在Condition对象上等待的线程，如果一个线程调用了Condition.await()方法，那么该线程将会释放锁、构造成节点加入等待队列并进入等待状态（和同步队列类似）</p><p><img src="/2020/01/09/concurrent5/image-20200109190800698.png" alt="image-20200109190800698"></p><blockquote><p>在Object的监视器模型上，一个对象拥有一个同步队列和等待队列，而并发包中的<br>Lock（更确切地说是同步器）拥有一个同步队列和多个等待队列</p><p>上述节点引用更新的过程并没有使用CAS保证，原因在于调用await()方法的线程必定是获取了锁的线程，也就是说该过程是由锁来保证线程安全</p></blockquote><p><strong>等待</strong></p><p>调用Condition的signal()方法，将会唤醒在等待队列中等待时间最长的节点（首节点），在<br>唤醒节点之前，会将节点移到同步队列中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">源码略</span><br><span class="line">1. 使用locksupport中的park()方法进入等待状态，判断是否唤醒节点的标志是查看节点是否在同步队列上，因为通知condition在唤醒节点之前后将节点转移到同步队列上</span><br><span class="line">唤醒后注意还有判断唤醒方式是通知还是中断</span><br><span class="line">2. 从队列角度，线程加入Condition的等待队列实质是构造了新的节点加入等待队列</span><br></pre></td></tr></table></figure><p><strong>通知</strong></p><p>调用Condition的signal()方法，将会唤醒在等待队列中等待时间最长的节点（首节点），在<br>唤醒节点之前，会将节点移到同步队列中。</p><p><img src="/2020/01/09/concurrent5/image-20200109192336832.png" alt="image-20200109192336832"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程间通信</title>
      <link href="/2020/01/07/concurrent4/"/>
      <url>/2020/01/07/concurrent4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java并发编程基础"><a href="#Java并发编程基础" class="headerlink" title="Java并发编程基础"></a>Java并发编程基础</h1><p>《并发编程的艺术》阅读笔记第四章，重点在于线程间的通信</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-lqz9jr.jpg" alt></p><a id="more"></a><h2 id="一、线程简介"><a href="#一、线程简介" class="headerlink" title="一、线程简介"></a>一、线程简介</h2><p>首先对线程做一个简单的介绍</p><p>使用多线程的原因：</p><pre><code>1.更多的处理器核心：一个线程在一个时刻只能运行在一个处理器核心上2.更快的响应时间3.更好的编程模型</code></pre><p>JAVA程序运行所需线程（jdk1.8）</p><p><img src="/2020/01/07/concurrent4/image-20200107210932356.png" alt="JAVA程序运行所需线程（jdk1.8）"></p><p><strong>线程优先级</strong></p><blockquote><p>操作系统基本采用<strong>时分</strong>的形式调度运行的线程，操作系统会分出一个个时间片，线程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下次分配，线程分配到的时间片多少就决定了线程使用处理器资源的多少。</p><p><strong>有些操作系统会忽略对线程优先级的设定</strong></p></blockquote><p>在Java线程中，通过一个整型成员变量<code>priority</code>来控制优先级，优先级的范围从<code>1~10</code>，在线程构建的时候可以通过<code>setPriority(int)</code>方法来修改优先级，默认优先级是<code>5</code>，优先级高的线程分配时间片的数量要多于优先级低的线程</p><p><strong>线程的状态</strong></p><p><code>6</code>种，在给定的时刻只能处于一种状态</p><ul><li><code>NEW</code>：初始状态，线程被构建，但还没有调用start方法</li><li><code>RUNNABLE</code>：运行状态，java线程将==就绪和运行==两种状态统称为运行状态</li><li>``BLOCKED`：阻塞状态，表明线程阻塞于锁</li><li><code>WAITING</code>：等待状态，等待其他线程的通知或中断</li><li><code>TIME_WAITING</code>：超时等待状态，可以在指定的时间自行返回</li><li><code>TERMINATED</code>：终止状态，表示当前线程已经执行完毕</li></ul><p><img src="/2020/01/07/concurrent4/image-20200107211424804.png" alt="image-20200107211424804"></p><p><strong>线程状态变迁</strong></p><p><img src="/2020/01/07/concurrent4/image-20200108101032180.png" alt="image-20200108101032180"></p><blockquote><p>Java将操作系统中的运行和就绪两个状态合并称为==运行状态==。</p><p>==阻塞状态==是线程阻塞在进入<code>synchronized</code>关键字修饰的方法或代码块（获取锁）时的状态</p><p>但是==阻塞==在<code>java.concurrent</code>包中Lock接口的线程状态却是等待状态，因为<code>java.concurrent</code>包中Lock接口对于阻塞的实现均使用了<code>LockSupport</code>类中的相关方法</p></blockquote><p><strong>Daemon线程（守护线程）</strong></p><blockquote><p>指在程序运行的时候在后台提供一种通用服务的线程，比如垃圾回收线程。不属于程序中不可或缺的部分。</p></blockquote><p>当一个java虚拟机中不存在非守护线程时，虚拟机将会退出。可以通过设置<code>Thread.setDaemon(true)</code>将线程设置为daemon线程，<strong>必须在线程启动前设置</strong></p><p>ps. 在构建Daemon线程时，不能依靠finally块中的内容来确保执行关闭或清理资源的逻辑,可能不执行</p><h2 id="二、启动和终止线程"><a href="#二、启动和终止线程" class="headerlink" title="二、启动和终止线程"></a>二、启动和终止线程</h2><p>一个新构造的线程对象是==由其父线程==来进行空间分配的，而子线程的各种属性==继承自父线程，同时还会分配一个唯一的ID。==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">看Thread.init()源码</span><br><span class="line">jdk1.8的源码中添加了很多关于ThreadGroup的判断操作</span><br><span class="line">估计是对线程的安全性和异常情况做了更完善的区分</span><br></pre></td></tr></table></figure><p><strong>启动线程：</strong>start方法：当前线程同步告知虚拟机：只要线程规划器空闲，应立即启动调用start方法的线程，==最好在线程创建之前设置线程名称，有利于排查错误==</p><p><strong>中断：</strong></p><p>可以理解为线程的一个标识符属性，它标识一个运行中的线程是否被其他线程进行了中断操作。是一种简便的线程间交互方式。<br>线程通过<code>isInterrupted（）</code>方法判断是否被中断，也可以调用静态方法<code>Thread.interrupted()</code>对当前的线程中断标识位进行复位。</p><pre><code>从java的API可以看出，许多声明抛出InterruptedException的方法在抛出这个异常前，java虚拟机会先将该线程的中断标志位清除，然后再抛异常。此时调用isInterrupted返回false</code></pre><ul><li>当线程处于等待状态或者有超时的等待状态时（<code>TIMED_WAITING</code>，<code>WAITING</code>）我们可以通过调用线程的<code>·interrupt()</code>方法来中断线程的等待，此时线程会抛<code>InterruptedException</code>异常。</li><li>但是当线程处于<code>BLOCKED</code>状态或者<code>RUNNABLE</code>（<code>RUNNING</code>）状态时，调用线程的<code>interrupt()</code>方法也只能将线程的状态位设置为<code>true</code>。停止线程的逻辑需要我们自己去实现。</li></ul><p><strong>过期API</strong>:<code>suspend()</code>,<code>resume()</code>,<code>stop()</code></p><p>原因：占有资源的时候容易发生死锁问题，让线程共工作在不确定状态下</p><p><strong>终止线程的做法</strong>:一种方法可以使用<code>interrupt()</code>方法，或者利用一个boolean变量将线程终止，使线程在终止时有机会去清理资源</p><h2 id="三、线程间通信（重点）"><a href="#三、线程间通信（重点）" class="headerlink" title="三、线程间通信（重点）"></a>三、线程间通信（重点）</h2><h3 id="1、volatile和synchronized关键字"><a href="#1、volatile和synchronized关键字" class="headerlink" title="1、volatile和synchronized关键字"></a>1、volatile和synchronized关键字</h3><pre><code>volatile:告知程序任何对该变量的访问均需要从共享内存中获取，而对他的改变必须同步刷新回主内存，他能保证所有线程对变量访问的可见性。synchronized：确保多个线程在同一个时刻，只能有一个线程处于方法或同步块中，保证了线程对变量访问的可见性和排他性。不能保证重排序</code></pre><p>关于<code>synchronized</code>：本质是对一个对象的监视器（<code>monitor</code>）的获取，而这个获取过程是<strong>排他</strong>的，也就是同一时刻只能有一个线程获取到有<code>synchronized</code>所保护对象的监视器。任意一个对象都拥有自己的监视器。</p><p><img src="/2020/01/07/concurrent4/image-20200108120155233.png" alt="image-20200108120155233"></p><blockquote><p>任意线程对Object的访问，首先要获得Object的监视器。如果获取失败，线程进入同步队列，线程状态变为<code>BLOCKED</code>。当访问Object的前驱（获得了锁的线程）释放了锁，则该释放操作唤醒阻塞在同步队列中的线程，使其重新尝试对监视器的获取。</p></blockquote><h3 id="2、等待-通知机制（生产者-消费者模型）"><a href="#2、等待-通知机制（生产者-消费者模型）" class="headerlink" title="2、等待/通知机制（生产者-消费者模型）"></a>2、等待/通知机制（生产者-消费者模型）</h3><blockquote><p>等待/通知机制，是指一个线程A调用了对象O的<code>wait</code>方法进入等待状态，而另一个线程B调用了对象O的<code>notify</code>或<code>notifyall</code>方法，线程A收到通知后从对象O的<code>wait</code>方法返回，进而执行后续操作。</p></blockquote><p><img src="/2020/01/07/concurrent4/image-20200108120905668.png" alt="image-20200108120905668"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">此处的代码示例失效，wait线程没有正常被唤醒，也没有发生重排序</span><br><span class="line">原因时因为获取的锁不是同一个锁，因此导致无法正常解锁和加锁，需要把同步的对象设置为public static确保获得对象是同一个</span><br><span class="line">///示例不是这个问题，是因为一开始没有wait...、😂</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/xssl_CSDN/article/details/78822868" target="_blank" rel="noopener">notify无法正常唤醒wait方法的问题</a></p><p><strong>注意：</strong> </p><p>（1）使用<code>wait</code>、<code>notify</code>、<code>notifyAll</code>时需要先对调用对象加锁</p><p>（2）调用wait方法后，线程状态由<code>RUNNING</code>变为<code>WAITING</code>，并将当前线程防止到对象的等待队列</p><p>（3）<code>notify</code>或<code>notifyAll</code>方法调用后，等待线程依旧不会从<code>wait</code>返回，需要调用<code>notify</code>或<code>notifyAll</code>的线程释放锁之后，等待线程才有机会从<code>wait</code>返回</p><p>（4）<code>notify</code>方法将等待队列中的等待线程从等待队列中移到同步队列中，被移动的线程从<code>WAITING</code>变为<code>BLOCKED</code></p><p>（5）从<code>wait</code>方法返回的前提是获得了调用对象的锁</p><p><img src="/2020/01/07/concurrent4/image-20200108155848206.png" alt="image-20200108155848206"></p><h3 id="3、等待-通知经典范式"><a href="#3、等待-通知经典范式" class="headerlink" title="3、等待/通知经典范式"></a>3、等待/通知经典范式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">等待方：1.获取对象的锁</span><br><span class="line">       2.如果条件不满足，那么调用对象的wait方法，被通知后仍要检查条件</span><br><span class="line">       3.条件满足则执行对应的逻辑</span><br><span class="line">        伪代码：</span><br><span class="line">               synchronized(对象)&#123;</span><br><span class="line">                    while(条件不满足)&#123;</span><br><span class="line">                        对象.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                    对应的处理逻辑</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">通知方：1.获得对象的锁</span><br><span class="line">        2.改变条件</span><br><span class="line">       3.通知所有等待在对象上的线程</span><br><span class="line">       伪代码：</span><br><span class="line">               synchronized(对象)&#123;</span><br><span class="line">                    改变条件</span><br><span class="line">                    对象.notify();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h3 id="4、管道输入输出流"><a href="#4、管道输入输出流" class="headerlink" title="4、管道输入输出流"></a>4、管道输入输出流</h3><blockquote><p>管道输入/输出流和 普通的文件输入/输出流 或者 网络输入/输出流 不同之处在于，<strong>它主要用于线程之间的数据传输，而传输的媒介为内存</strong></p></blockquote><p><code>PipedOutputStream</code>、<code>PipedInputStream</code>(面向字节数据)</p><p><code>PipedReader</code>、<code>PipedWriter</code>(面向字符)</p><p>对于<code>piped</code>类型的流，使用时必须先调用<code>connect</code>方法进行绑定，否则会抛出异常</p><p>管道输入缓冲区大小默认1024字节</p><p><a href="https://www.cnblogs.com/skywang12345/p/io_04.html" target="_blank" rel="noopener">管道的详细解析</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写示例代码的注意事项：</span><br><span class="line">1. write写入 read读出</span><br><span class="line">2. 打印的时候用的是System.out.print 而不是 System.out.prineln.后者会最后加回车</span><br></pre></td></tr></table></figure><h3 id="5、Thread-join"><a href="#5、Thread-join" class="headerlink" title="5、Thread.join()"></a>5、Thread.join()</h3><p>含义：当前线程等待thread线程终止之后才从<code>thread.join</code>返回。<br>另外还有两个<code>join(long millis)</code>和<code>join(long millis,int nanos)</code>具备==超时特性==的方法（如果线程在给定的时间内没有终止，那么将会从该超时方法返回）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">join()等价于wait(0)，只要等指定线程锁释放就可以抢占锁</span><br><span class="line">如果指定时间后，就需要指定时间之后才能重新拥有锁（wait加参数本质上还是定时调用notify()方法，只是这段代码在JVM里面，比较底层）</span><br><span class="line">join如果加参数，第一次代表按照参数设置wait唤醒时间，之后循环检测线程活性，如果线程始终存活，才开始传入设置值和当前时间的差值</span><br></pre></td></tr></table></figure><h3 id="6、ThreadLocal"><a href="#6、ThreadLocal" class="headerlink" title="6、ThreadLocal"></a>6、ThreadLocal</h3><blockquote><p>ThreadLocal，即线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。</p></blockquote><p>是一个线程安全的局部变量</p><h2 id="四、应用实例"><a href="#四、应用实例" class="headerlink" title="四、应用实例"></a>四、应用实例</h2><h3 id="一、等待超时模式"><a href="#一、等待超时模式" class="headerlink" title="一、等待超时模式"></a>一、等待超时模式</h3><blockquote><p>调用一个方法时等待一段时间（一般来说是给定一个时间段），如果该方法能够在给定的时间段之内得到结果，那么将结果立刻返回，反之，超时返回默认结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">get</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line"><span class="keyword">long</span> remaining = mills;</span><br><span class="line"><span class="comment">// 当超时大于0并且result返回值不满足要求</span></span><br><span class="line"><span class="keyword">while</span> ((result == <span class="keyword">null</span>) &amp;&amp; remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">wait(remaining);</span><br><span class="line">    remaining = future - System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型案例：数据库连接池模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源码略</span><br></pre></td></tr></table></figure><p>CountDownLatch：</p><ul><li>countDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。</li><li>是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。</li></ul><h4 id="二、线程池技术"><a href="#二、线程池技术" class="headerlink" title="二、线程池技术"></a>二、线程池技术</h4><blockquote><p>客户端可以通过execute(Job)方法将Job提交入线程池执行，而客户端自身不用等待Job的执行完成。除了execute(Job)方法以外，线程池接口提供了增大/减少工作者线程以及关闭线程池的方法。</p><p>这里工作者线程代表着一个重复执行Job的线程，而每个由客户端提交的Job都将进入到一个工作队列中等待工作者线程的处理。</p><p>线程池的本质就是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出工作并执行</p></blockquote><p>典型案例：实现一个web服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源码略</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2020/01/05/year-end-summery/"/>
      <url>/2020/01/05/year-end-summery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-MQCkSiyz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-MQCkSiyz"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Love Yourself",              author: "J R Price",              url: "http://music.163.com/song/media/outer/url?id=1381583209.mp3",              pic: "http://p2.music.126.net/wR8cPX0w4gj179SCzUHI6A==/109951164258264118.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>9102年….然而已经是2020年了，我还是没有养成周记月记的习惯。。本来以为只会拖几天的十月总结拖到了十一月，又从十一月拖到了十二月…最终顺利跨过新年，从月度总结上升成了年度总结。。。约定好的事情一定要做到，这是我要说的第一件事，也是2020年我的第一个FLAG。</p><a id="more"></a><p>时间过的太快的了，尽管我每天都在感叹时间的飞逝，但还是眼睁睁地看着时间一点点从我手中流走。确实，我心太大了，想了太多事情但是完成的却寥寥无几，以为2019年世界会发生翻天覆地的变化，但实际上，自己还是那个自己，没有什么突飞猛进的成就，也没有脱胎换骨的改变，只能说在人生的轨迹上又向前滑行了一年。似水流年，一如既往，直至今日我依然在为自己的选择而犹豫，年初的豪言壮语好像也成为了自我吹嘘的空言，但是平淡归平淡，对我而言。依然是极其重要和充满意义的一年。</p><h3 id="2019の生活"><a href="#2019の生活" class="headerlink" title="2019の生活"></a>2019の生活</h3><p>年初,我上大二下，寒假还在ICT进行学习，当时的我刚刚从组织部离职中解脱出来，经历了一系列的心理问题，最终还是学会了勇敢面对，并决定要往技术方向发展（尽管那个时候对到底走什么技术还是没有很明确的概念）</p><img src="/2020/01/05/year-end-summery/Screenshot_20200105_213632.png" alt="Screenshot_20200105_213632" style="zoom:33%;"><p>​                                                                                                                                                                                                           </p><p>四月，第二次参加校运会，这次的状态大不如前，完全没有了大一时候的斗志，无论从增重十斤的身体还是从抗拒跑步的心态都已经显示了自己对求胜欲望的衰退，最后的结果可想而知，自己在成绩上大幅退步，我们学院也是七年来第一次没有拿到第一。</p><p><img src="/2020/01/05/year-end-summery/1555093568298.jpeg" alt="1555093568298"></p><p>最后还是和大一期望的一样参加了市级的大学生运动会，但是意料之中没有取得名次，一来是自己的身体素质确实不比大一的时候，二来是自己抗拒跑步的情绪在训练中得到了最大的释放，训练能不去就不去，就算去了也没有很认真的训练，因此成绩始终没有得到提高。大运会也是我目前为止运动的顶点，之后的生活虽然和田径队依然有交集，但是自己的训练量还是因为自己的学习重心和目标的设定慢慢下降，2020年的大运会大概率就不会去了，所以，最后的辉煌，依然值得纪念。（平常依然要锻炼啊喂！！）</p><p><img src="/2020/01/05/year-end-summery/IMG_20190510_171041.jpg" alt="IMG_20190510_171041"></p><p>五月劳动节假期，父母自从把我送到重庆后第一次来看我，这一次，我做了充足的计划，虽然最后很多安排还是没有实现，但总体还是过的非常开心。</p><p><img src="/2020/01/05/year-end-summery/IMG_20190503_223557-01.jpeg" alt="IMG_20190503_223557-01"></p><p>大学室友，一辈子都不会忘记的朋友。尽管有的时候还是会嫉妒他们的才能，但正是这种”妒忌心”督促着我追赶他们的脚步</p><p><img src="/2020/01/05/year-end-summery/-24591badc6d020dd_mix01-01.jpeg" alt="-24591badc6d020dd_mix01-01"></p><p>暑假刚回来，成为了班学长，大学里二度体会到初入大学的青涩时光。</p><p><img src="/2020/01/05/year-end-summery/IMG_20190908_162415.jpg" alt="IMG_20190908_162415"></p><p>记录一次5G进校园，宣传噱头大于实际效果。</p><p><img src="/2020/01/05/year-end-summery/IMG_20190909_174836.jpg" alt="IMG_20190909_174836"></p><p>大三上才体会到了电影进校园的“大学生待遇”，看了罗小黑</p><p><img src="/2020/01/05/year-end-summery/IMG_20190920_231743.jpg" alt="IMG_20190920_231743"></p><p>ICT战队举办了一次近乎成功的招新会，从此从学员角度看问题上升到了管理者角度看问题，其中给我最大启示的是青松，作为我们之中的核心，凝聚了我们管理团队，同时在能力上做了表率，平时看他专注学习，还以为他会不闻窗外事，事实上，他知道的，了解的，认识的比我们之中任何人都广泛，深刻。这是我所要学习的东西</p><p><img src="/2020/01/05/year-end-summery/IMG_20190927_185102.jpg" alt="IMG_20190927_185102"></p><p>225一次任性的出行，体验了我2019最完美的一天（或半天）</p><p><img src="/2020/01/05/year-end-summery/IMG_20191003_214148.jpg" alt="IMG_20191003_214148"></p><p><img src="/2020/01/05/year-end-summery/IMG_20191003_190517.jpg" alt="IMG_20191003_190517"></p><p>ict管理组团建</p><p><img src="/2020/01/05/year-end-summery/7e1392affc8f6087.jpg" alt="7e1392affc8f6087"></p><p>第一次参加异地比赛，虽然奖小比赛规模小，但是还是很有意义（形式大于内容）</p><p><img src="http://cdn.zblade.top/qiniu_img/mmexport1576315894411.jpeg" alt></p><p>第一次参加大厂宣讲会，遗憾没有体验大厂笔试题，虽然我一直想表示自己对这些的漠视，但内心深处还是非常渴望（尽管知道自己就算拥有这次机会，凭现在的能力依然无法应试）所以，加油吧！！</p><p><img src="/2020/01/05/year-end-summery/IMG_20191227_193728.jpg" alt="IMG_20191227_193728"></p><p>此外还有就业中心助理团，匆匆走来又匆匆离去，是对自己选择不慎重的回应，好在算是和平分手，没有给双方带来更大的遗憾。</p><h3 id="2019の学习"><a href="#2019の学习" class="headerlink" title="2019の学习"></a>2019の学习</h3><p>大二下依然在红岩做项目，但是却因为自己意志不坚定导致工作的投入不够。当时的我迷茫于自己的未来方向，自卑于自己的逻辑能力不足从而开始抗拒深入学习计算机能力，一个领奖工具，一个啦啦队投票都没有得到完美稳定实现。</p><p>暑假包括大三前半段全身心投入ICT学习，但是学习的进度依然不达标，一来是自己的态度有点松懈，导致学习的进度放缓，另外则是学习的方法上，死钻一点不懂变通导致时间大把浪费。最后一个暑假的最大成果就是考过了一个HCNP</p><p>什么时候开始决定想走开发方向的?大概是加入冷刃的时候，那个时候其实已经有了相关的念头，但是决心不够，直到冷刃的创始人啸凡学长画了“大饼”才让我最后下定决心。什么是最完美的大饼？就是别人知道这个是大饼还吃得津津有味，这大概就是营销的最高境界了吧，不得不说这次我是真的上头了。</p><p>但是尽管到2019结束，我在这方面所做的努力依然有限，虽然一直以自己课多，内容难做借口，但是自己清楚，其实还是有很多零散时间可以利用起来学习。。。不管怎样，现在所有阻碍已经几乎消失了，你没有理由了吧？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2019有很多难忘的经历，但是更多暴露的是心态，选择上的缺点，致使在这关键的一年里仍然遗憾多多，但我不希求命运，一切靠自己争取。只要你拼了，机会就会出现。</p>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="/2019/12/29/concurrent3/"/>
      <url>/2019/12/29/concurrent3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《并发编程的艺术》阅读笔记第三章,先从底层讲起。</p><p>基础不牢，地动山摇。</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-lqz9jr.jpg" alt></p><a id="more"></a><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1、并发的两个关键问题"><a href="#1、并发的两个关键问题" class="headerlink" title="1、并发的两个关键问题"></a>1、并发的两个关键问题</h3><p>线程间通信和线程间同步</p><p>线程通信机制：</p><ul><li><strong>==共享内存==：隐式通信，显式同步</strong></li><li><strong>==消息传递==：显式通信，隐式同步</strong></li></ul><p>Java的并发采用的是共享内存模型。</p><h3 id="2、java内存结构"><a href="#2、java内存结构" class="headerlink" title="2、java内存结构"></a>2、java内存结构</h3><blockquote><p>java中所有的实例域、静态域和数组元素都存储在堆内存中；局部变量、方法定义参数、异常处理器参数不会在线程之间共享</p></blockquote><p>JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在<strong>主内存</strong>中，每个线程都有一个私有<strong>的本地内存</strong>，本地内存中存储了该线程<strong>读/写共享变量的副本</strong>。</p><blockquote><p>本地内存是JMM的一个抽象概念，并不真实存在，涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化</p></blockquote><img src="/2019/12/29/concurrent3/../../ZZZ_files/学习/JAVA/并发编程/java_concurrent_art-master/java_concurrent_art-master/src/chapter3/chapter3/image-20200107100818113.png" alt="image-20200107100818113" style="zoom:50%;"><p>线程A与线程B之间要通信必须经过两个步骤：</p><ol><li>线程A把本地内存A中更新过的共享变量刷新到主内存中去</li><li>线程B到主内存中去读取A之前已更新过的共享变量</li></ol><p><strong>JMM通过控制主内存与每个线程的本地内存之间的交互来为java程序员提供内存可见性保证</strong></p><h3 id="3、指令重排序"><a href="#3、指令重排序" class="headerlink" title="3、指令重排序"></a>3、指令重排序</h3><ol><li><strong>编译器优化的重排序</strong>。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li><strong>指令级并行的重排序</strong>。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li><strong>内存系统的重排序</strong>。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ol><blockquote><p>java最终执行的指令序列:</p><p>源码——–》编译器优化重排序——-》指令级并行重排序———-》内存系统重排序———》最终的指令序列</p></blockquote><p>第一个属于==编译器重排序==，后面两个属于==处理器的重排序==,JMM通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证</p><p>对于编译器，JMM的编译器会禁止特定类型的编译器重排序。==对于处理器重排序，JMM的处理器重排序规则会要求Java编译器在生成指令序列时，插入特定的内存屏障指令==，从而禁止特定类型的处理器重排序。</p><h3 id="4、内存屏障分类"><a href="#4、内存屏障分类" class="headerlink" title="4、内存屏障分类"></a>4、内存屏障分类</h3><p><strong>load：读缓冲区</strong></p><p><strong>store：写缓冲区</strong></p><p>四种内存屏障：</p><ul><li><code>LoadLoad Barriers</code>：确保load1的数据先于laod2及后续所有load指令进行装载</li><li><code>StoreStore Barriers</code>：确保store1的数据对其他处理器的可见性先于store2及后续所有存储指令</li><li><code>LoadStore Barriers</code>：确保load装载先于store的存储刷新到内存</li><li><code>StoreLoad Barriers</code>：该屏障前的指令全部完成之后才会执行后面的指令（开销大）</li></ul><p><img src="/2019/12/29/concurrent3/image-20200107102759253-1578457897461.png" alt="image-20200107102759253"></p><h3 id="5、先行发生（happens-before）"><a href="#5、先行发生（happens-before）" class="headerlink" title="5、先行发生（happens-before）"></a>5、先行发生（happens-before）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序员必须遵循的编程原则</span><br></pre></td></tr></table></figure><p>==JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。==</p><p>其中一些顺序规则（针对程序员）：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li></ul><blockquote><p>happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前，，并不意味着前一个操作必须要在后一个操作之前执行！</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前一个要求对后一个操纵可见不是意味着前一个操作必须在后一个操作之前执行？</span><br><span class="line"></span><br><span class="line">JMM要求如果A happens-before B那么首先必须保证执行结果（A的执行结果对B <span class="strong">**不一定可见**</span> ）必须和逻辑中的happens-before相同，其次，A的排序顺序在B之前（这里是指重排序之前的顺序，后期允许通过重排序调整A和B的操作顺序），但是最终结果必须和逻辑上的保持一致，因此从表面上看是按序执行了</span><br></pre></td></tr></table></figure><h2 id="二、重排序"><a href="#二、重排序" class="headerlink" title="二、重排序"></a>二、重排序</h2><p><strong>数据依赖性</strong></p><p>在单线程程序中，对存在控制依赖的操作重排序不会改变执行结果；但在多线程程序中，对存在控制依赖的操作重排序，可能会改变程序的执行结果。</p><pre><code>详见30页的例子</code></pre><p><strong>as-if-serial</strong></p><blockquote><p>不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义</p></blockquote><h2 id="三、顺序一致性内存模型"><a href="#三、顺序一致性内存模型" class="headerlink" title="三、顺序一致性内存模型"></a>三、顺序一致性内存模型</h2><blockquote><p>如果程序是正确同步的，程序的执行将具有顺序一致性（Sequentially Consistent）——即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同</p></blockquote><ul><li>一个线程中的所有操作必须按照程序的顺序来执行。</li><li>（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。</li></ul><img src="/2019/12/29/concurrent3/../../ZZZ_files/学习/JAVA/并发编程/java_concurrent_art-master/java_concurrent_art-master/src/chapter3/chapter3/image-20200107111012661.png" alt="image-20200107111012661" style="zoom:50%;"><img src="/2019/12/29/concurrent3/../../ZZZ_files/学习/JAVA/并发编程/java_concurrent_art-master/java_concurrent_art-master/src/chapter3/chapter3/image-20200107111032356.png" alt="image-20200107111032356" style="zoom:50%;"><p><strong>未同步程序在顺序一致性模型中给虽然整体执行顺序是无序的但是所有线程都只能看见一个一致的的整体执行顺序。</strong>之所以能得到这个保证是因为顺序一致性内存模型中的每个操作必须立即对任意线程可见</p><blockquote><p>JMM就没有这个保证。因为只有当前线程把本地内存中写过的数据刷新到主内存之后，这个写操作才能对其他线程可见。</p><p>JMM的处理逻辑：<strong>临界区内的代码可以重排序；JMM会在退出临界区和进入临界区这两个关键时间点做一些特别处理，使得线程在这两个时间点具有与顺序一致性模型相同的内存视图</strong></p><p>JMM的具体实现的基本方针：在不改变（正确同步的）程序执行结果的前提下，尽可能地为编译器和处理器的优化打开方便之门</p></blockquote><p>顺序一致性内存模型和JMM区别</p><ol><li>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而JMM不保证单线程内的操作会按程序的顺序执行（比如上面正确同步的多线程程序在临界区内的重排序）。这一点前面已经讲过了，这里就不再赘述。</li><li>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。这一点前面也已经讲过，这里就不再赘述。</li><li>==JMM不保证对64位的long型和double型变量的写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。==</li></ol><p><strong>处理器总线工作机制</strong></p><blockquote><p>在计算机中，数据通过总线在处理器和内存之间传递。每次处理器和内存之间的数据传递都是通过一系列步骤来完成的</p><p>总线事务包括<strong>读事务（Read Transaction）</strong>和<strong>写事务（Write Transaction）</strong>。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会读/写内存中一个或多个物理上连续的字</p></blockquote><ul><li>总线会同步试图并发使用总线的事务。在一个处理器执行总线事务期间，总线会禁止其他的处理器和I/O设备执行内存的读/写 (从而保证当单个总线事务之中的内存读写具有原子性)</li><li>在一些32位的处理器上，如果要求对64位数据的写操作具有原子性，会有比较大的开销。==当JVM在这种处理器上运行时，可能会把一个64位long/double型变量的写<br>操作拆分为两个32位的写操作来执行==</li></ul><blockquote><p>注意，在JSR-133之前的旧内存模型中，一个64位long/double型变量的读/写操作可以被拆分为两个32位的读/写操作来执行。从JSR-133内存模型开始（即从JDK5开始），<strong>仅仅只允许把一个64位long/double型变量的写操作拆分为两个32位的写操作来执行，任意的读操作在JSR-133中都必须具有原子性</strong>（即任意读操作必须要在单个读事务中执行）。</p></blockquote><h2 id="四、volatile内存语义"><a href="#四、volatile内存语义" class="headerlink" title="四、volatile内存语义"></a>四、volatile内存语义</h2><p>volatile变量特性：</p><pre><code>可见性：对一个volatile变量的读，总是能看到（任意线程）对这个变量最后的写入原子性：对任意单个volatile变量的读、写具有原子性（包括long、double），但类似volatile++这种复合操作不具有原子性。</code></pre><p>volatile写-读的内存语义：</p><p>写：当写一个volatile变量时，JMM会把线程对应的==本地内存中的共享变量值刷新到主内存==</p><p>读：当读一个volatile变量时，JMM会把该线程==对应的本地内存置为无效==。线程接下来从主内存中读取共享变量</p><p><img src="/2019/12/29/concurrent3/image-20200107144910441-1578457897461.png" alt="image-20200107144910441"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">volatile读的时候必须保证主内存中的数据不会更改，因此volatile读如果是第一个操作怎不能实现重排序</span><br><span class="line">volatile写的时候必须保证之前的数据能正常写入主内存，因此volatile写如果是第二个操作的话不能实现重排序</span><br><span class="line">普通读写是在本地内存，但是有概率会写入主内存，因此具有随机性</span><br></pre></td></tr></table></figure><h3 id="volatile内存语义的实现"><a href="#volatile内存语义的实现" class="headerlink" title="volatile内存语义的实现"></a>volatile内存语义的实现</h3><p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p>JMM内存屏障插入策略(保守!)：</p><ul><li>在每个<code>volatile写操作</code><strong>前面</strong>插入<code>StoreStore</code>屏障</li><li>在每个<code>volatile写操作</code><strong>后面</strong>插入<code>StoreLoad</code>屏障</li><li>在每个<code>volatile读操作</code><strong>后面</strong>插入一个<code>LoadLoad</code>、一个<code>LoadStore</code></li></ul><p><img src="/2019/12/29/concurrent3/image-20200107102759253.png" alt="image-20200107102759253"></p><img src="/2019/12/29/concurrent3/image-20200107152436294.png" alt="image-20200107152436294" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为什么volatile写操作之前不用插入loadstore来避免普通读和volatile写之间的重排序？</span><br><span class="line">猜测：内存屏障之间存在包含关系，比如storeload就可以实现其他三个所有功能</span><br></pre></td></tr></table></figure><blockquote><p>volatile写-读内存语义的常见使用模式是：一个写线程写volatile变量，多个读线程读同一个volatile变量。当读线程的数量大大超过写线程时，选择在volatile写之后插入StoreLoad屏障将带来可观的执行效率的提升</p></blockquote><img src="/2019/12/29/concurrent3/image-20200107152444982.png" alt="image-20200107152444982" style="zoom: 50%;"><blockquote><p>实际情况编译器在生成字节码的时候可以优化选择是否添加内存屏障，但是注意一般最后一个storelaod不能省略，因为无法判断return后是否还会有下一个volatile读/写出现</p><p>不同的处理器平台也会对内存屏障做出优化</p></blockquote><p><strong>在功能上，锁比volatile更强大；在可伸缩性和执行性能上，volatile更有优势</strong></p><h2 id="五、锁的内存语义"><a href="#五、锁的内存语义" class="headerlink" title="五、锁的内存语义"></a>五、锁的内存语义</h2><p><strong>锁的释放和获取的内存语义</strong>（和volatile一样）</p><ul><li>线程释放锁时，会把本地内存中的共享变量刷新到主内存中（对应volatile写）</li><li>线程获取锁时，会将线程对应的本地内存置为无效，从而临界区代码必须从主内存读取共享变量（对应volatile读）</li></ul><p><strong>锁内存语义的实现</strong>：</p><h5 id="分析ReentrantLock源码"><a href="#分析ReentrantLock源码" class="headerlink" title="分析ReentrantLock源码"></a>分析ReentrantLock源码</h5><blockquote><p><code>ReentrantLock</code>的实现依赖于Java同步器框架<code>AbstractQueuedSynchronizer</code>（本文简称之为<code>AQS</code>）。<code>AQS</code>使用一个整型的<code>volatile</code>变量（命名为<code>state</code>）来维护同步状态，这个<code>volatile</code>变量是<code>ReentrantLock</code>内存语义实现的关键。</p></blockquote><p>ReentrantLock锁分为公平锁和非公平锁</p><p>公平锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">现在tryAcqyuire方法有点变化，在查看是不是第一个获取锁的对象处添加了hasQueuedPredecessors()方法，一个用来查询是否有线程比现在线程等待时间更长</span><br></pre></td></tr></table></figure><p>非公平锁<br>调用CAS：如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。</p><p><strong>公平锁和非公平锁语义总结：</strong></p><ul><li>公平锁和非公平锁释放时，==最后都要写一个volatile变量state==</li><li>公平锁获取时，==首先会去读volatile变量==</li><li>非公平锁获取时，首先会==用CAS更新volatile变量，这个操作同时具有volatile读和volatile写的内存语义==</li></ul><p>可以看出：<strong>锁释放-获取的内存语义的实现至少有下面两种方式</strong></p><ol><li>利用volatile变量的写-读所具有的内存语义</li><li>利用CAS所附带的volatile读和volatile写的内存语义</li></ol><p><strong>CAS是如何同时具有volatile读和volatile写的内存语义的？</strong></p><blockquote><p>多处理器环境，会为cmpxchg指令加上lock前缀，单处理器不用加（单处理器会维护自身的顺序一致性）</p></blockquote><ul><li>原先使用总线锁定，后来考虑开销使用缓存锁定，大大降低lock前缀指令的执行开销</li><li>lock指令能防止重排序</li><li>把写缓冲区中的所有数据刷新到内存中</li></ul><p>上面2、3两点具有的内存屏障效果，足以同时实现volatile读和volatile写的内存语义</p><h3 id="concurrent包的通用实现模式"><a href="#concurrent包的通用实现模式" class="headerlink" title="concurrent包的通用实现模式"></a>concurrent包的通用实现模式</h3><ol><li>==<strong>首先，声明共享变量为<code>volatile</code></strong>==</li><li>==<strong>然后，使用<code>CAS</code>的原子条件更新来实现线程之间的同步</strong>==</li><li>==<strong>同时，配合以<code>volatile</code>的读、写和<code>CAS</code>所具有的<code>volatile</code>读和写的内存语义来实现线程之间的通信</strong>==</li></ol><p><img src="/2019/12/29/concurrent3/image-20200107174616024-1578457897461.png" alt="image-20200107174616024"></p><h2 id="六、final域的内存语义"><a href="#六、final域的内存语义" class="headerlink" title="六、final域的内存语义"></a>六、final域的内存语义</h2><h3 id="1、final域的重排序规则"><a href="#1、final域的重排序规则" class="headerlink" title="1、final域的重排序规则"></a>1、final域的重排序规则</h3><p>（1）写：在==构造函数内对==一个final域的写入，与==随后把这个被构造对象的引用赋值给一个引用变量==，这两个操作不能重排序</p><p>（2）读：初次读一个包含final域的对象的引用，与==随后初次读这个final域==，这两个操作不能重排序。</p><h3 id="2、写final域的重排序规则"><a href="#2、写final域的重排序规则" class="headerlink" title="2、写final域的重排序规则"></a>2、写final域的重排序规则</h3><p>==禁止把final域的写重排序到构造函数之外==包含两方面：</p><pre><code>1、编译器： JMM禁止编译器把final域的写重排序到构造函数之外2、处理器： 编译器会在final域的写之后，构造函数return之前，插入一个StoreStore屏障。这个屏障禁止处理器把final域的写重排序到构造函数之外</code></pre><p>上述规则可以确保：</p><p>在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域不具有这个保障。</p><h3 id="3、读final域的重排序规则"><a href="#3、读final域的重排序规则" class="headerlink" title="3、读final域的重排序规则"></a>3、读final域的重排序规则</h3><p>处理器：在一个线程中，初次读对象引用与初次读该对象所包含的final域，JMM禁止处理器重排序这两个操作</p><p>编译器：编译器会在读final域操作的前面插入一个<code>LoadLoad</code>屏障·</p><p>上述重排序规则可以确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用（针对少数处理器存在间接依赖关系的操作做重排序）</p><h3 id="4、当final域为引用类型"><a href="#4、当final域为引用类型" class="headerlink" title="4、当final域为引用类型"></a>4、当final域为引用类型</h3><p>对于引用类型，写final域的重排序规则增加下面的约束：</p><pre><code>在构造函数内对一个final引用对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作不能重排序。</code></pre><p>对于存在数据竞争的线程无法保证可见性</p><h3 id="5、为什么final域不能从构造函数内溢出"><a href="#5、为什么final域不能从构造函数内溢出" class="headerlink" title="5、为什么final域不能从构造函数内溢出"></a>5、为什么final域不能从构造函数内溢出</h3><p>在构造函数返回前，被构造对象的引用不能为其他线程所见，因为此时的final域可能还没有初始化  (构造函数内可能发生重排序)。</p><p>==(在引用变量为任意线程和可见之前，引用变量所指向的对象的final域必须要正确初始化,这是写final域的重排序规则)==</p><h2 id="七、happens-before"><a href="#七、happens-before" class="headerlink" title="七、happens-before"></a>七、happens-before</h2><p>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：<strong>单线程程序是按程序的顺序执行的。</strong></p><p>happens-before关系给编写正确同步的多线程程序员创造了一个幻境：<strong>正确同步的多线程程序是按happens-before指定的顺序执行的。</strong></p><p>这么做的目的：为了在不改变程序的执行结果的前提下，尽可能地提高程序执行的并行度。</p><p><strong>完整hgappen-before规则</strong></p><ul><li><strong>程序顺序规则</strong>：一个线程中的每个操作，happens-before于该线程中的任意后续操作</li><li><strong>监视器锁规则</strong>：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li><strong>volatile变量规则</strong>：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li><strong>传递性</strong>：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li><strong>start()规则</strong>：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li><li><strong>join()规则</strong>：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回</li></ul><h2 id="八、双重检查锁定与延迟初始化"><a href="#八、双重检查锁定与延迟初始化" class="headerlink" title="八、双重检查锁定与延迟初始化"></a>八、双重检查锁定与延迟初始化</h2><p><strong>双重检查锁定</strong></p><p>问题描述：(一般是单例模式)在上锁之前加一个非空判断，上锁后再次非空判断，实现双重检查锁定</p><p>原因：在构造实例时，对象引用指针的操作和初始化操作可能会被重排序，这就导致在if(instance==null)的时候认为对象已经创建，但这个时候还没有进行初始化</p><pre><code>1.分配对象的内存空间2.初始化对象3.设置instance指向内存空间4.初次访问对象3和2可能会被重排序，导致1342这样的问题</code></pre><blockquote><p>一开始单例模式一旦出现并发，就可能出现初始化两个对象的问题</p><p>后来选择加锁，<strong>加锁能解决问题，但是出现严重的性能开销</strong></p><p>后来就选择在加锁前加一层非空判断，这样就可以只在第一次初始化，后期不用加锁但</p><p>是正是由于添加了一层非空判断，导致多线程在进行这个判断的时候，<strong>读取操作跳过了等待时间直接读取对象，但此时由于锁内空间的重排序，导致此时对象还没有初始化完成。</strong>从而造成严重的后果</p></blockquote><p>解决方式：</p><ol><li><p>volatile。利用volatile的语义禁止重排序。<strong>在单例的懒汉模式中，必须给实例添加volatile修饰符</strong></p><p>优势: ==除了可以对静态字段实现延迟初始化外，还可以对实例字段实现延迟初始化。==</p></li><li><p>基于类初始化的解决方案,使得线程访问之前就完成初始化</p><blockquote><p>JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。<strong>在</strong><br><strong>执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">备注：类初始化的几种情况</span><br><span class="line">1）T是一个类，而且一个T类型的实例被创建。</span><br><span class="line">2）T是一个类，且T中声明的一个静态方法被调用。</span><br><span class="line">3）T中声明的一个静态字段被赋值。</span><br><span class="line">4）T中声明的一个静态字段被使用，而且这个字段不是一个常量字段。</span><br><span class="line">5）T是一个顶级类（Top Level Class，见Java语言规范），而且一个断言语句嵌套在T内部被执行。</span><br></pre></td></tr></table></figure></li></ol><h3 id="JVM初始化期间的同步过程"><a href="#JVM初始化期间的同步过程" class="headerlink" title="JVM初始化期间的同步过程"></a><strong>JVM初始化期间的同步过程</strong></h3><p><strong>初始化阶段</strong></p><ul><li><p><strong>第1阶段：通过在Class对象上同步（即获取Class对象的==初始化锁==），来控制类或接口的初始化。这个获取锁的线程会一直等待，直到当前线程能够获取到这个初始化锁。</strong></p><p>==此时只有一个线程给能获得初始化锁==</p></li><li><p><strong>第2阶段：线程A执行类的初始化,，同时线程B在初始化锁对应的<code>condition</code>上等待</strong></p><p>初始化instance过程(==可能发生重排序，但是对于其他线程不可见==)</p><ol><li>分配内存空间</li><li>复制给引用变量</li><li>初始化对象</li></ol></li><li><p><strong>第3阶段：线程A设置初始化完成标志，然后唤醒在condition中等待的所有线程。</strong></p></li><li><p><strong>第4阶段：线程B结束类的初始化处理。</strong></p><p>线程A在第2阶段的A1执行类的初始化，并在第3阶段的A4释放初始化锁；</p><p>线程B在第4段的B1获取==同一个初始化锁==，并在第4阶段的B4之后才开始访问这个类</p></li><li><p><strong>第5阶段：线程C执行类的初始化的处理。</strong></p><p>线程A在第2阶段的A1执行类的初始化，并在第3阶段的A4释放锁；``</p><p>线程C在第5阶段的C1获取==同一个锁==，并在在第5阶段的C4之后才开始访问这个类</p></li></ul><h3 id="九、JAVA内存模型综述"><a href="#九、JAVA内存模型综述" class="headerlink" title="九、JAVA内存模型综述"></a>九、JAVA内存模型综述</h3><h4 id="处理器内存模型"><a href="#处理器内存模型" class="headerlink" title="处理器内存模型"></a>处理器内存模型</h4><p>常见 处理器内存模型</p><ul><li><p><strong>Total Store Ordering内存模型(TSO)</strong></p><p>放松程序中==写-读==操作的顺序</p></li><li><p><strong>Total Store Ordering内存模型（PSO)</strong></p><p>继续放松程序中==写-写==操作的顺序</p></li><li><p><strong>Relaxed Memory Order内存模型（RMO）</strong></p><p>继续放松程序中==读-写==操作的顺序</p></li><li><p><strong>PowerPC内存模型</strong></p><p>继续放松==读-读==操作的顺序</p></li></ul><p><img src="/2019/12/29/concurrent3/image-20200107205334303-1578457897461.png" alt="image-20200107205334303"></p><blockquote><p>所有处理器内存模型都允许写-读重排序，原因：<strong>它们都使用了写缓存区.</strong></p><ol><li><p>写缓存区可能导致写-读操作重排序</p></li><li><p>由于写缓存区仅对当前处理器可见，这个特性导致当前处理器可以比其他处理器先看到临时保存在自己写缓存区中的写。</p></li></ol></blockquote><p><img src="/2019/12/29/concurrent3/image-20200107205635952-1578457897461.png" alt="image-20200107205635952"></p><h4 id="内存模型之间关系"><a href="#内存模型之间关系" class="headerlink" title="内存模型之间关系"></a>内存模型之间关系</h4><p>同处理器内存模型一样，越是追求执行性能的语言，内存模型设计得会越弱。</p><p><img src="/2019/12/29/concurrent3/image-20200107205755222-1578457897461.png" alt="image-20200107205755222"></p><h4 id="JMM的内存可见性保证"><a href="#JMM的内存可见性保证" class="headerlink" title="JMM的内存可见性保证"></a>JMM的内存可见性保证</h4><p>按程序类型可分为</p><ul><li><p><strong>单线程程序</strong>：</p><p>不会出现内存可见性问题</p></li><li><p><strong>正确同步的多线程程序</strong></p><p>具有顺序一致性（程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同）</p></li><li><p><strong>未同步/未正确同步的多线程程序</strong></p><p>JMM为它们提供了最小安全性保障：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值（0、null、false）。</p><blockquote><p>但最小安全性并不保证线程读取到的值，一定是某个线程写完后的值。==最小安全性保证线程读取到的值不会无中生有的冒出来，但并不保证线程读取到的值一定是正确的==。</p></blockquote></li></ul><h4 id="旧内存模型的修补"><a href="#旧内存模型的修补" class="headerlink" title="旧内存模型的修补"></a>旧内存模型的修补</h4><p>JDK1.5之后对volatile的内存语义、final的内存语义做了增强</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发机制的底层实现原理</title>
      <link href="/2019/12/15/concurrent2/"/>
      <url>/2019/12/15/concurrent2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《并发编程的艺术》阅读笔记第二章。主要针对volatiile和synchronized做了总结</p><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-lqz9jr.jpg" alt></p><a id="more"></a><p><img src="/2019/12/15/concurrent2/image-20200107101326313.png" alt="image-20200107101326313"></p><h2 id="一、volatile的应用"><a href="#一、volatile的应用" class="headerlink" title="一、volatile的应用"></a>一、volatile的应用</h2><p>如果volatile变量修饰符使用得当，它比synchronized的使用和执行成本更低，<br>因为它不会引起线程上下文的切换和调度。</p><h2 id="1-volatile的定义和实现原理"><a href="#1-volatile的定义和实现原理" class="headerlink" title="1. volatile的定义和实现原理"></a>1. volatile的定义和实现原理</h2><p>有volatile变量修饰符的共享变量进行写操作的时候会多出一个lock前缀的指令</p><p>lock前缀的指令在多核处理器中引发两件事情</p><p><strong>（1）将当前处理器缓存行的数据写回内存</strong></p><p>但是锁总线开销比较大，因此现在的LOCK信号基本锁缓存，使用<mark>缓存一致性机制</mark>确保修改的原子性（<strong>缓存锁定</strong>）</p><p>（<strong>2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效</strong></p><ul><li><mark><strong>MESI(修改、独占、共享、无效)控制协议</strong></mark>维护内存和其他处理器缓存一致性</li><li>嗅探技术保证内部缓存、系统内存和其他数据缓存在总线上保持一致</li></ul><blockquote><p><mark>为了提高处理速度，处理器不直接和内存通信，而是先将内存中的数据读到cache中再进行操作，但操作完全不知道何时会写到内存</mark>。如果对声明了volatile变量的进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再进行计算操作就会有问题。所以，多处理器下，要实行缓存一致性协议，每个处理器通过<mark>嗅探</mark>在总线上传播的数据来检查自己缓存的值是不是过期，如果过期，就将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存中。</p></blockquote><h3 id="2-volatile使用优化"><a href="#2-volatile使用优化" class="headerlink" title="2. volatile使用优化"></a>2. volatile使用优化</h3><p>将共享变量追加到64字节(貌似不生效了，在源码中没看到)</p><p><mark><strong>LinkedTransferQueue</strong></mark></p><p>一些处理器的Cache的高速缓存行是64字节，不支持部分填充缓存行。通过追加到64字节的方式来填满高速缓冲区的缓存行，避免头结点和尾节点加载到同一个缓存行，使头、尾节点在修改时不会互相锁定。</p><p><strong>并不是所有使用volatile变量的时候都要追加到64字节</strong></p><ol><li>缓存行非64字节宽的处理器不适用</li><li>共享变量不会被频繁读写的情况不适用，反而会因为追加字节导致性能消耗增加</li></ol><h2 id="二、synchronized的实现原理与应用（重量级锁）"><a href="#二、synchronized的实现原理与应用（重量级锁）" class="headerlink" title="二、synchronized的实现原理与应用（重量级锁）"></a>二、synchronized的实现原理与应用（重量级锁）</h2><p>synchronize基础：java中的每个对象都可以作为锁。具体表现为3种形式：</p><ol><li>对于普通同步方法，锁是当前实例对象</li><li>对于静态同步方法，锁是当前类的class对象</li><li>对于同步方法块，锁是synchronize括号里的对象</li></ol><blockquote><p>锁到底存在哪里？锁里面会存储什么信息？·</p></blockquote><h3 id="Synchronized在JVM中的实现原理"><a href="#Synchronized在JVM中的实现原理" class="headerlink" title="Synchronized在JVM中的实现原理"></a>Synchronized在JVM中的实现原理</h3><p>JVM基于进入和退出<code>Monitor</code>对象来实现<mark>方法同步和代码块同步</mark>，但两者的表现细节不同。</p><p><mark>代码块同步</mark>使用<code>monitorenter</code>和<code>monitorexit</code>指令实现，而<mark>方法同步</mark>是使用另外一种实现方式实现的，细节并没有在JVM中说明。但是，方法同步同样可以使用上述两个指令实现。</p><ul><li><code>monitorenter</code>指令是在编译后插入到同步代码块的<strong>开始位置</strong>，而<code>monitorexit</code>是插入到<strong>方法结束处和异常处</strong>，JVM要保证每个<code>monitorenter</code>必须有对应的<code>monitorexit</code>与之配对。</li><li>任何对象都有一个<code>monitor</code>与之关联，且当一个<code>monitor</code>被持有后，它将处于锁定状态。线程执行到<code>monitorenter</code>指令时，将会尝试获取对象所对应的<code>monitor</code>的所有权，即尝试获得对象的锁。</li></ul><p>同步方法:JVM使用<code>ACC_SYNCHRONIZED</code>标识来实现。即JVM通过在方法访问标识符(<code>flags</code>)中加入<strong><code>ACC_SYNCHRONIZED</code></strong>来实现同步功能。同步方法会在class文件中的<code>access_flags</code>中存放<strong><code>ACC_SYNCHRONIZED</code></strong>，而<code>access_flags</code>是存放在常量池的</p><blockquote><p>同步方法是隐式的。一个同步方法会在运行时常量池中的<strong>method_info</strong>结构体中存放<strong>ACC_SYNCHRONIZED</strong>标识符。当一个线程访问方法时，会去检查是否存在<strong>ACC_SYNCHRONIZED</strong>标识，如果存在，则先要获得对应的<strong>monitor</strong>锁，然后执行方法。当方法执行结束(不管是正常<strong>return</strong>还是抛出异常)都会释放对应的<strong>monitor</strong>锁。如果此时有其他线程也想要访问这个方法时，会因得不到<strong>monitor</strong>锁而阻塞。当同步方法中抛出异常且方法内没有捕获，则在向外抛出时会先释放已获得的<strong>monitor</strong>锁</p></blockquote><h4 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h4><blockquote><p>管程 (英语：<strong>Monitors</strong>，也称为监视器) 是一种程序结构，结构内的多个子程序（对象或模块）形成的多个工作线程互斥访问共享资源。</p><p>这是一个概念，目的是为了简化同步调用的过程，封装了同步操作，避免直接使用PV信号量。在java中的具体实现就是<strong>ObjectMonitor</strong></p></blockquote><p><strong>ObjcetMonitor</strong>的关键字段</p><ul><li><code>_count</code>：记录owner线程获取锁的次数。这句话很好理解，这也决定了synchronized是可重入的。</li><li><code>_owner</code>：指向拥有该对象的线程</li><li><code>_WaitSet</code>：存放处于wait状态的线程队列。</li><li><code>_EntryList</code>：存放等待锁而被block的线程队列。</li></ul><p><img src="/2019/12/15/concurrent2/8694380-509ad307903635af.png" alt="img"></p><p><img src="/2019/12/15/concurrent2/8694380-0d3b09e6c73f8892.png" alt="img"></p><ul><li>想要获取monitor的线程先进入monitor的__EntryList队列阻塞等待</li><li>如果在程序里调用了wait()方法，则该线程进入_WaitSet队列，wait()会释放monitor锁，即将_owner赋值为null并进入_WaitSet队列阻塞等待</li><li>当程序里其他线程调用了notify/notifyAll方法时，就会唤醒_WaitSet中的某个线程，这个线程就会再次尝试获取monitor锁。如果成功，则就会成为monitor的owner。</li></ul><p><strong>具体实现</strong></p><p><img src="/2019/12/15/concurrent2/8694380-c4a60ba68bcc7704-1578395574451.png" alt="img"></p><pre><code>在博客上找一下</code></pre><h3 id="1、java对象头"><a href="#1、java对象头" class="headerlink" title="1、java对象头"></a>1、java对象头</h3><p><code>synchronized</code>用的锁是存在java对象头里的</p><p>数组类型3个字宽（3*4字节）</p><p>非数字类型2个字宽（2*4字节）</p><p><img src="/2019/12/15/concurrent2/image-20200106133558588.png" alt="image-20200106133558588"></p><p>mark word里存储的数据会随着锁标志位的变化而变化</p><p><img src="/2019/12/15/concurrent2/image-20200106134012820.png" alt="image-20200106134012820"></p><p>64位虚拟机下的存储结构</p><p><img src="/2019/12/15/concurrent2/image-20200106134139128.png" alt="image-20200106134139128"></p><h3 id="2、锁的升级与对比"><a href="#2、锁的升级与对比" class="headerlink" title="2、锁的升级与对比"></a>2、锁的升级与对比</h3><blockquote><p>from JDK1.6</p></blockquote><p>锁一共有4中状态，由低到高为：无锁、偏向锁、轻量级锁、重量级锁，这几个状态会随着竞争情况逐渐升级。<br>锁可以升级但不能降级（提高获得锁和释放锁的效率）</p><h4 id="偏向锁："><a href="#偏向锁：" class="headerlink" title="偏向锁："></a>偏向锁：</h4><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，引入了偏向锁。</p><p>当一个线程访问同步块并获取锁时，会在<mark>对象头和栈帧的锁记录</mark>里存储锁偏向的<code>线程ID</code>，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单测试对象头里的<code>mark word</code>里是否存储着指向当前线程的偏向锁。</p><p>如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下<code>mark word</code>中偏向锁的标识是否设置成1：如果没有设置，则使用<code>CAS竞争锁</code>；如果设置了，则尝试<mark>使用CAS将对象头的偏向锁指向当前线程</mark>。</p><p><strong>（1）偏向锁的撤销</strong></p><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待<mark>全局安全点</mark>（在这个时间上没有正在执行的<mark>字节码</mark>）。</p><p>首先==暂停==拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，<mark>拥有偏向锁的<strong>栈</strong>会被执行，遍历偏向对象的锁记录</mark>，栈中的锁记录和对象头的<code>mark word</code>要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁。</p><pre><code>这一块还是不清楚，得上网再看看如果另外的线程和现有线程竞争偏向锁，是如何判断是否继续偏向的？</code></pre><p><strong>（2）关闭偏向锁</strong></p><p>java6、7默认启用偏向锁，但是在程序启动后会有几秒延迟，如有必要可以关闭延迟<br><code>-XX:BiasedLockingStartupDelay=0</code>,如果确定程序里所有的锁通常处于竞争状态，可以通过JVM参数关闭偏向锁：<code>-XX:UseBaisedLocking=false</code>,那么程序会默认进入轻量级锁状态</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>（1）加锁</p><p>线程在执行同步块之前，JVM会先在当前线程的<strong>栈帧</strong>中<mark>创建用于存储锁记录的空间</mark>，并将对象头中的<code>Mark word</code>复制到锁记录中（<code>Displaced Mark World</code>）。然后线程尝试使用CAS将对象头中的<code>Mark word</code>替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用<mark>自旋</mark>来获取锁。</p><p>（2）解锁</p><p>解锁时，会使用原子的CAS操作将<code>Displaced Mark Word</code>替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p><p>因为自旋会消耗CPU，为了避免无用的自旋，一旦升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。</p><h3 id="3、锁的优缺点对比"><a href="#3、锁的优缺点对比" class="headerlink" title="3、锁的优缺点对比"></a>3、锁的优缺点对比</h3><ul><li><p>偏向锁：</p><pre><code>优点：加锁解锁不需要额外的消耗缺点：如果线程间存在锁竞争，会带来额外的锁撤销的消耗</code></pre><p>​    适用场景：<mark>适用于只有一个线程访问同步块的场景</mark></p></li><li><p>轻量级锁：</p><pre><code>优点：竞争的线程&lt;mark&gt;不会阻塞&lt;/mark&gt;，提高了程序的响应速度缺点：如果始终得不到锁竞争的线程，使用自旋会消耗CPU使用场景：追求**响应时间**，同步执行速度非常快</code></pre></li><li><p>重量级锁：</p><pre><code>优点：&lt;mark&gt;线程竞争不使用自旋，不会消耗CPU&lt;/mark&gt;缺点：线程阻塞，响应时间慢适用场景：追求**吞吐量**，同步块执行时间较长</code></pre></li></ul><h3 id="自我理解"><a href="#自我理解" class="headerlink" title="自我理解"></a>自我理解</h3><ul><li><p>偏向锁一开始指向持有锁的线程，之后出现锁竞争后撤销偏向锁，偏向锁是否会进化到轻量级锁存疑。</p></li><li><p>轻量级锁一开始需要复制一份markworld内容（即hashcode或者其他所锁信息）到本地线程栈帧，然后markworld修改为指向线程的指针</p></li><li><p>如果出现锁竞争，markworld将膨胀为重量级锁</p></li></ul><h2 id="三、原子操作的实现原理"><a href="#三、原子操作的实现原理" class="headerlink" title="三、原子操作的实现原理"></a>三、原子操作的实现原理</h2><h3 id="1、术语"><a href="#1、术语" class="headerlink" title="1、术语"></a>1、术语</h3><pre><code>CAS：比较并交换缓存行：缓存的最小操作单位内存顺序冲突：一般由假共享引起，出现内存顺序冲突时，CPU必须清空流水线假共享：多个CPU同时修改同一个缓存行的不同部分而引起其中一个CPU的操作无效</code></pre><h3 id="2、处理器实现原子操作"><a href="#2、处理器实现原子操作" class="headerlink" title="2、处理器实现原子操作"></a>2、处理器实现原子操作</h3><p><strong>（1）通过总线锁保证原子性</strong></p><p>如果多个处理器同时对共享变量进行读改写操作（i++），那么共享变量就会被多个处理器同时进行操作，这样读改写操作就不是原子的，操作完之后共享变量的值会和期望的不一致。</p><p>总线锁：当一个处理器在总线上输出<code>LOCK#</code>信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。</p><p><strong>（2）使用缓存锁保证原子性</strong></p><p>总线锁定把CPU和内存之间的通信锁住了，锁定期间，其他处理器不能操作其他内存地址的数据，因此总线锁定的开销比较大。</p><p>缓存锁定：内存区域如果被缓存在处理器的缓存行中，并且在<code>LOCK</code>期间被锁定，那么当他执行锁操作会写到内存时，处理器不在总线上声言<code>LOCK #</code>信号，而是修改内部的<strong>内存地址</strong>，并允许它的<mark>缓存一致性机制</mark>来保证操作的原子性，因为<mark>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效。</mark></p><pre><code>两种情况不会使用缓存锁定：    1、数据不能被缓存在处理器内部，或操作的数据跨多个缓存行，此时用总线锁定    2、有些处理器不支持缓存锁定</code></pre><h3 id="3、Java实现原子操作（锁和循环CAS）"><a href="#3、Java实现原子操作（锁和循环CAS）" class="headerlink" title="3、Java实现原子操作（锁和循环CAS）"></a>3、Java实现原子操作（锁和循环CAS）</h3><p>（1）循环CAS机制</p><p>处理器的<code>CMPXCHG</code>指令</p><p>自旋CAS：循环进行CAS操作直至成功为止</p><p>CAS实现原子操作的三大问题：</p><ol><li><p>ABA问题：A到B再到A，CAS检查值时会以为没有发生变化，实际却发生了变化，解决方式是在变量前面追加<mark>版本号</mark>：1A到2B到3C</p><p>AtomicStampedReference类解决方法：</p><p><img src="/2019/12/15/concurrent2/image-20200106152852450.png" alt="image-20200106152852450"></p></li></ol><ol start="2"><li><p>循环时间长开销大：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p></li><li><p><mark>只能保证一个共享变量的原子操作</mark>：此时用<strong>锁</strong>或者将几个共享变量<strong>合并</strong></p></li></ol><p>（2）锁机制</p><p>除了偏向锁，另外两种锁都使用了循环CAS机制,即当一个线程进入同步块的时候使用循环CAS的方式获取锁，当他退出同步块的时候使用循环CAS释放锁。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6地址解析</title>
      <link href="/2019/12/10/ipv6/"/>
      <url>/2019/12/10/ipv6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为战队上交的微信推送任务，这里做一下搬运。</p><hr><blockquote><p>据称，11月26日，负责英国、欧洲、中东和部分中亚地区互联网资源分配的欧洲网络协调中心宣布，全球所有43亿个IPv4地址已全部分配完毕。意味着再也没有新接入的互联网设备在也无法分配到新的IP地址。在目前的形势下，利益相关的同学们第一反应会想到什么呢？是提高IP地址利用率的无类域间路由还是为IPv4续命立下汗马功劳的NAT技术？</p><p><strong>不得不说，靠IPv4协议也就图个乐呵，想要彻底解决地址分配问题还得看我IPv6协议</strong></p></blockquote><p>今天由于篇幅有限，主要专注于IPv6的地址解析</p><a id="more"></a><h2 id="IPv6的优势"><a href="#IPv6的优势" class="headerlink" title="IPv6的优势"></a>IPv6的优势</h2><ul><li>地址空间大，理论上存在2^128个地址，几乎不用担心地址短缺问题</li><li>减少路由表大小，路由器处理报文性能提高</li><li>安全性得到提高</li><li>服务质量好，服务类型扩展灵活丰富</li><li>支持可移动主机和网络</li><li>兼容性强，可完全向下兼容IPv4</li><li>…</li></ul><h2 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h2><p>IPv6地址的128位地址被分成8段，每16位一段，分别被转成4位十六进制数这种表示方法称之为“冒号十六进制表示法”。</p><p><strong>地址格式</strong>：</p><blockquote><p>X:X:X:X:X:X:X:X</p></blockquote><p><strong>压缩表示</strong></p><ol><li><p>地址中包含的连续两个或多个均为0的组，可以用双冒号“::”来代替。</p><p>如<code>FC00:0:130F:0:0:9C0:876A:130B</code>可写作<code>FC00:0:130F::9C0:876A:130B</code></p><p>注意：</p><ol><li><p><code>::</code>代表的0位数必须最大化；</p><p>错误示例：<code>FC00:0:130F:0:0:9C0:876A:130B</code>不能写作<code>FC00:0:130F::0:9C0:876A:130B</code></p></li><li><p>不能只代表一个全0段；</p><p>错误示例：<code>FC00:1:130F:0:1:9C0:876A:130B</code>不能写作<code>FC00:1:130F::1:9C0:876A:130B</code></p></li><li><p>如果多个连续全0段长度相同，必须的代表最前面的那个</p><p>错误示例：<code>FC00:0:130F:0:0:9C0:0:0</code>不能写作<code>FC00:0:130F:0:0:9C0::</code></p></li></ol></li><li><p>前导0可以省略</p><p>如<code>FC00:0000:130F:0000:0000:09C0:876A:130B</code>可以写作<code>FC00:0:130F:0:0:9C0:876A:130B</code></p></li></ol><p><strong>地址结构</strong></p><p>一个IPv6地址可以分为如下两部分：</p><ul><li>网络前缀：n比特，相当于IPv4地址中的网络ID</li><li>接口标识：128-n比特，相当于IPv4地址中的主机ID</li></ul><p>表示形式如<code>FF00::/8</code>代表<code>地址/前缀长度</code></p><p>接口标识可通过三种方法生成：手工配置、系统通过软件自动生成或IEEE EUI-64规范生成。其中，EUI-64规范自动生成最为常用</p><p><strong>地址分类</strong></p><ul><li><p>单播地址</p><p>一对一</p><p>常见的单播地址</p><ul><li><p>未指定地址<code>::/128</code></p><p>该地址可以表示某个接口或者节点还没有IP地址，可以作为某些报文的源IP地址</p></li><li><p>环回地址<code>::1/128</code></p><p>就是本地地址</p></li><li><p>全球单播地址:带有全球单播前缀,目前已经分配的全球路由前缀的前3bit均为<code>001</code></p><p>带有全球单播前缀的IPv6地址，其作用类似于IPv4中的公网地址</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210213536204.png" alt></p></li><li><p>链路本地地址 ：使用了特定的本地链路前缀<code>FE80::/10</code></p><p>链路本地地址是IPv6中的应用范围受限制的地址类型，只能在连接到同一本地链路的节点之间使用</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210213547240.png" alt></p></li><li><p>唯一本地地址：前缀固定为·<code>FC00::/7</code></p><p>也是一种应用范围受限的地址，它仅能在一个站点内使用，类似于IPv4中的私网地址</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210213603271.png" alt></p></li></ul></li><li><p>组播地址</p><p>IPv6的组播与IPv4相同，用来标识一组接口，一般这些接口属于不同的节点.</p><p>IPv6组播地址的前缀是<code>FF00::/8</code></p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210221010487.png" alt></p><ul><li>标志用来标识组播地址身份</li><li>scop用来限制组播数据流在网络中发送的范围</li><li>group ID标识组播组</li></ul></li><li><p>任播地址</p><p>任播地址标识一组网络接口（通常属于不同的节点）。目标地址是任播地址的数据包将发送给其中路由意义上最近的一个网络接口。主要用来在给多个主机或者节点提供相同服务时提供冗余功能和负载分担功能。</p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210223223066.png" alt></p><p>注：IPv6任播地址仅可以被分配给路由设备，不能应用于主机。任播地址不能作为IPv6报文的源地址</p></li></ul><p><strong>整理了一下一个IPv6主机上一个接口可以具备的常见IPv6地址</strong></p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210223727275.png" alt></p><p><img src="http://cdn.zblade.top/qiniu_img/image-20191210223743875.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的挑战</title>
      <link href="/2019/12/07/concurrent1/"/>
      <url>/2019/12/07/concurrent1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开坑！从今天起开始看《并发编程的艺术》，这本书是经过学长的推荐才得知的，正好能让我对并发编程有更深入的了解。其实项目中已经开始遇到并发问题了，但是这方面一直没有得到系统的学习。现在忙里偷闲，赶紧补上。<br>PS: 特意找了一张和锁相关的图片，同时也寓意着精诚所至，金锁为开🔒<br><img src="http://cdn.zblade.top/qiniu_img/wallhaven-lqz9jr.jpg" alt></p><a id="more"></a><h2 id="一、上下文切换"><a href="#一、上下文切换" class="headerlink" title="一、上下文切换"></a>一、上下文切换</h2><p>即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片（一般为几十毫秒）实现这个机制。</p><p>当前任务执行一个时间片后会切换到下一个任务。在切换前会保存上一个任务的状态，以便下次<br>切换回这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p><blockquote><p>如何减少上下文切换？</p><ol><li>无锁并发编程。多线程竞争锁时，会引起上下文切换，可以用一些办法避免使用锁，如将数据的id取模分段，不同的线程处理不同段的数据</li><li>CAS算法：Java的Atomic包使用CAS算法来更新数据，不需要加锁</li><li>使用最少线程，避免创建不需要的线程</li><li>在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换</li></ol></blockquote><h2 id="二、死锁"><a href="#二、死锁" class="headerlink" title="二、死锁"></a>二、死锁</h2><p>避免死锁的几个常见方法：</p><ol><li>避免一个线程获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</li><li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况</li></ol><h2 id="三、资源限制的挑战"><a href="#三、资源限制的挑战" class="headerlink" title="三、资源限制的挑战"></a>三、资源限制的挑战</h2><p>问题：如果将某段串行的代码并发执行，因为受限于资源，仍然在串行执行，这时候程序不仅不会加快执行，<br>反而会更慢，因为增加了上下文切换和资源调度的时间。</p><p>如何解决：</p><blockquote><p>对于硬件资源的限制，使用机群并行执行程序，通过搭建服务器集群，不同的机器处理不同的数据</p></blockquote><blockquote><p>对于软件资源的限制，可以考虑使用资源池将资源复用</p></blockquote><p>根据不同的资源限制调整程序的并发度</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就业中心凉面复盘</title>
      <link href="/2019/10/27/center-of-job/"/>
      <url>/2019/10/27/center-of-job/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>console.error("Error: [hexo-tag-aplayer] Unrecognized tag argument(2): autoplay=false");</script><p>今天结束了学校就业指导服务中心的第三次面试，算是体验了一把比较正式的面试过程，虽然最后铁定是进不了了，还是收获颇丰，也算是一段十分难得的经历了。这是做一下总结，希望对未来的我有所帮助。</p><p><img src="http://cdn.zblade.top/qiniu_img/68656805_p0.jpg" alt></p><a id="more"></a><h2 id="宣讲会"><a href="#宣讲会" class="headerlink" title="宣讲会"></a>宣讲会</h2><p>宣讲会的布置非常专业，中途没有出现较大的差错，整场气氛的把握非常好。</p><h3 id="入场"><a href="#入场" class="headerlink" title="入场"></a>入场</h3><p>有专门的接待人员，同时会发放一些小礼品。对于相对重要的抽奖pass绿卡采用的也是专门的抽奖券，保证了结果相对公平。</p><p>入场后按音响、物资等均已调制完善，配备有自带的屏幕（校级组织的土豪气息~）</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>大同小异，先是就业中心的视频介绍，然后是学长学姐介绍，然后是老师介绍，接着是机构功能介绍和老师总结，最后公布招新流程，中间穿插了几次抽奖，最后的问答 也是恰到好处。主持人也算是有水平。</p><h3 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h3><p>按 编号，无特别之处</p><p>考试题目也是比较常规，从他们一晚上改完也能知道肯定没仔细看~~</p><h2 id="一面（群面）"><a href="#一面（群面）" class="headerlink" title="一面（群面）"></a>一面（群面）</h2><blockquote><p>题目：《中国机长》背景，措施重要性排序，集体讨论解决</p></blockquote><p>题目还算有新意，属于集体讨论解决问题，而且无法移动位置，只能通过语言说服对方</p><p>面试选择是十二人讨论形式</p><p>好处是讨论人数增加，同时讨论的位置相对固定，更考验说服能力</p><p>坏处是无法使用肢体语言丰富描述</p><p>面试官提的问题很常规，而且只争对可能选出的人，没有面面俱到。</p><p>最后给出了小组的整体评价，并给出了人性化建议</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>开场还是惯性思维了，没有把领导到点上。当leader之前要做好准备   ，面对题目变化要有应对措施</li><li>中途没有把局势掌握住，还是不敢打断对方，就像学长说的，这样的话容易产生内耗</li><li>最后没有去抢机会，其实自己还是风险很大的，最好还是要去争取一下，把自己在群面的感想说出来</li></ul><h2 id="二面（单面）"><a href="#二面（单面）" class="headerlink" title="二面（单面）"></a>二面（单面）</h2><p>无特别之处，全在意料之中。（居然真的要我做英语面试。。Orz）</p><h2 id="三面（即兴演讲）"><a href="#三面（即兴演讲）" class="headerlink" title="三面（即兴演讲）"></a>三面（即兴演讲）</h2><p>重点，这也是我这次面试最期待的地方！！因为习惯了群面单面，其实这些面试几乎对我已经造成不了影响，加上我的简历在校内还是能打，所以可以说是畅通无阻。但是三面不一样，即兴演讲让所有的包装都消失无形，你只有通过自己的真实实力展现自己。</p><p>好在这次确实不虚此行，我既看到了即兴演讲的基本操作过程，也确实从演讲中发现了自己的不足。可以说这是一次非常有意义的自我剖析过程。</p><h3 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h3><p>首先是场地，即兴演讲讲究高压环境下锻炼临场应变能力，因此这次大约70个人全部坐在会议厅，加上面试官，大概有100多人，偌大的会议厅瞬间被挤得满满当当，可以说是相当压抑了。</p><p>面试官分别位于后排和两边，并由一个 主面试官进行随机抽人，一个计时面试官记录时间。人分三列依次带入防止出现拥挤现象。演讲流程是一个人准备在台下准备三分钟，然后上台进行三分钟演讲，演讲同时下一个人在台下进行三分钟的准备，另外提前叫了下下个人进行准备。演讲最后30s会有提醒，当时间还剩超过30s但演讲结束后，面试官会提醒演讲继续，超时打断。另外还有几个学长负责唱黑脸，禁止过程交头接耳、看手机或者鼓掌。由于人数众多，面试时长大致为5~6小时，中间休息了两次，时长为5min（其实不止，大致为10min左右）</p><h3 id="面试感受"><a href="#面试感受" class="headerlink" title="面试感受"></a>面试感受</h3><blockquote><p>我抽到的题目是——“你最大的责任是把你铸造成器”</p></blockquote><p>面试过程崩了，其实心态调整的还好，但主要还是硬实力不足，没有办法组织语言。其实我抽到的题还算比较常规，还是有很多素材可以说。我也确实在前期列好了提纲。但是，上场后明显感觉到语言表达的匮乏，无法用丰富的语言去展现自己的想法，导致出现了很多重复的语句，思路也没有完全打开，导致在第一个论点上兜兜转转了很久而且忘记了素材引用。直到提示30s时我还在说第一个论点，导致后面完全没有时间。尽管我主动放弃了第二个论点，但还是无法在30s的时间进行结题，导致全程崩盘。</p><p>问题</p><ul><li>语言逻辑不清</li><li>表达词语匮乏</li><li>时间掌握不足</li><li>没有结题</li></ul><p>收获</p><ul><li>需要锻炼较长时间的演讲能力，主要是锻炼逻辑组织能力，从今天的面试来看，其实生活处处都可以作为演讲的主题，应该在平时就注意积累这些观点的积累和表达</li><li>时间掌握问题，还是最后选择的问题，如果我能直接结题，或许还能有所挽回，可惜没有做好选择，导致还是超时了，反而会因为语速加快而显示我的焦虑</li><li>其实这些问题单面的时候我都有所提及，看来这次确实是一语成谶。😓</li></ul><h3 id="即兴演讲的题目"><a href="#即兴演讲的题目" class="headerlink" title="即兴演讲的题目"></a>即兴演讲的题目</h3><blockquote><p>接下来分享一下即兴演讲的题目，这也是我收获最大的地方，可以说出的确实是相当有趣：</p></blockquote><p><mark><strong>万恶之源。可以说是相当有趣的题目</strong></mark></p><ul><li>人类的本质是鸽子还是复读机</li><li>真香</li><li>百因必有果</li><li>衬衫的价格是九镑十五便士</li><li>（无题）</li><li>精神小伙</li><li>风华绝代乔碧萝</li><li>窝窝头，一块钱四个 </li><li>苦练七十二变，笑对八十一难</li><li>awsl</li><li>这盛世，如你所愿</li></ul><p><mark><strong>辩题小改，还是能反映一定的思维能力</strong></mark></p><p>个人觉得还是好讲的</p><ul><li>贪婪是导致贫穷的原因吗</li><li>知易行难</li><li>分手需要说出来吗</li><li>00后和90后之间有代沟吗</li><li>如何看待电子竞技</li><li>微信和QQ有什么区别</li><li>如何看待TFBoys</li><li>咪蒙的伪心灵鸡汤</li><li>为什么鲁迅的语句这么出名</li><li>你觉得同性恋是自愿的还是跟风</li><li>朋友和恋人哪个更重要</li></ul><p><mark><strong>网上原题，经典</strong></mark></p><ul><li>你最大的责任是把你铸造成器</li><li>大海  云  鲜花</li><li>枷锁</li><li>如何看待校园暴力</li><li>没有比人更高的山</li><li>人生处处是考场</li><li>时间的重量</li><li>以貌取人是公平的吗</li><li>你曾经最绝境的时刻 </li><li>每一种创伤，都是一 种成熟 </li></ul><p><mark><strong>自己出的，还是有点想法的</strong></mark></p><ul><li>我和我的祖国</li><li>我爱重邮</li><li>大二的你如何过大三的生活</li><li>你在就业中心面试的XX小时XX分里你的感受</li><li>兼职和实习</li></ul>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA知识点总结</title>
      <link href="/2019/10/15/java-note/"/>
      <url>/2019/10/15/java-note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>感觉学了一段时间java，总是顾着前就忘了后，是时候将常见的知识点做一下整理，也可以加深一下印象。</p><p>就这么愉快的决定了。</p><p><img src="/2019/10/15/java-note/1047-1581757046238.jpg" alt="1047"></p><a id="more"></a><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>一、一个整数字面值是long类型，否则就是int类型。 建议使用<strong>大写的L</strong></p><p><strong>二、静态变量和实例变量区别？</strong></p><p>静态变量存在方法区，属于类所有，实例变量存储在堆中，引用存在当前线程栈</p><h4 id="三、java-创建对象的几种方式"><a href="#三、java-创建对象的几种方式" class="headerlink" title="三、java 创建对象的几种方式"></a>三、java 创建对象的几种方式</h4><ol><li>采用new</li><li>通过反射</li><li>采用clone(实现clonable接口然后重写clone方法)</li><li>通过序列化机制(实现序列化接口然后流式输出)</li></ol><h4 id="四、字符串常量池"><a href="#四、字符串常量池" class="headerlink" title="四、字符串常量池"></a>四、字符串常量池</h4><p><strong>设计思想</strong></p><ul><li>为字符串开辟一个字符串常量池，类似于缓存区</li><li>创建字符串常量时，首先坚持字符串常量池是否存在该字符串</li><li>存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中</li></ul><p>实现基础</p><ul><li>字符串是不变的，不用担心数据冲突进行共享</li><li>实例创建的全局字符串常量池中有一个表，为池中唯一的字符串对象维护一个引用，因此不会被垃圾回收</li></ul><p><img src="http://cdn.zblade.top/qiniu_img/1353903-20180906112833927-1544152281.png" alt></p><p>常量池存放在方法去，和堆区都属于线程共享的</p><p>创建对象过程：<code>String str4 = new String(“abc”)</code></p><ol><li><p>在常量池中查找是否有“abc”对象</p></li><li><ul><li>有则返回对应的引用实例</li><li>没有则创建对应的实例对象</li></ul></li><li><p>在堆中 new 一个 String(“abc”) 对象</p></li><li><p>将对象地址赋值给str4,创建一个引用</p></li></ol><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"A"</span>+<span class="string">"B"</span>) ;<span class="comment">// 会创建多少个对象? </span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"ABC"</span>) + <span class="string">"ABC"</span> ;<span class="comment">// 会创建多少个对象?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** str1：</span></span><br><span class="line"><span class="comment">字符串常量池："A","B","AB" : 3个</span></span><br><span class="line"><span class="comment">堆：new String("AB") ：1个</span></span><br><span class="line"><span class="comment">引用： str1 ：1个</span></span><br><span class="line"><span class="comment">总共 ： 5个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**str2 ：</span></span><br><span class="line"><span class="comment">字符串常量池："ABC" : 1个</span></span><br><span class="line"><span class="comment">堆：new String("ABC") ：1个</span></span><br><span class="line"><span class="comment">引用： str2 ：1个</span></span><br><span class="line"><span class="comment">总共 ： 3个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>String.intern()</p></blockquote><p>intern()方法会首先从常量池中查找是否存在该常量值,如果常量池中不存在则现在常量池中创建,如果已经存在则直接返回.</p><p>五、各类型字节数</p><p><img src="http://cdn.zblade.top/qiniu_img/985411-20191027220414112-1940633335.png" alt></p><p>六、String,StringBuffer和StringBuilder区别</p><ul><li>String是字符串常量,final修饰;</li><li>StringBuffer字符串变量(线程安全);</li><li>StringBuilder 字符串变量(线程不安全).</li></ul><p>StringBuffer是对对象本身操作,而不是产生新的对象,因此在有大量拼接的情况下,我们建议使用StringBuffer.</p><p>StringBuffer是线程安全的可变字符串,其内部实现是可变数组.</p><p>StringBuilder是jdk 1.5新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.</p><h4 id="七、什么是编译器常量-使用它有什么风险"><a href="#七、什么是编译器常量-使用它有什么风险" class="headerlink" title="七、什么是编译器常量?使用它有什么风险?"></a>七、什么是编译器常量?使用它有什么风险?</h4><p>公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。</p><p>这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p><p>八、byte[] 转String 可以使用String的构造器，但是注意使用正确编码</p><h2 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h2><p><strong>面向对象三特性</strong></p><blockquote><p>封装,继承,多态</p></blockquote><p><strong>多态的好处</strong></p><ul><li>可替换性</li><li>可扩充性：增加新的子类不影响已经存在的类结构</li><li>接口性：多态是超累通过方法签名，向子类提供一个公共接口</li><li>灵活性</li><li>简化性</li></ul><p><strong>如何实现多态</strong></p><ol><li>接口实现</li><li>继承父类重写方法</li></ol><p>抽象类意义</p><ul><li>为其他子类提供一个公共的类型</li><li>封装子类中重复定义的内容</li><li>定义抽象方法,子类虽然有不同的实现,但是定义是一致的</li></ul><h4 id="一、抽象类和接口的区别"><a href="#一、抽象类和接口的区别" class="headerlink" title="一、抽象类和接口的区别"></a>一、抽象类和接口的区别</h4><p><a href="https://www.cnblogs.com/cocoxu1992/p/10647676.html" target="_blank" rel="noopener">抽象类和接口区别</a></p><ul><li>一个类只能继承一个类，但是可以实现多个接口</li><li>接口类只能做方法申明，抽象类可以做方法申明也可以做方法实现</li><li>接口类定义的变量是公共的静态常量，抽象类中的变量是普通变量</li><li>抽象类的抽象方法必须全部被子类实现，如果没有实现，子类只能是抽象类；同样实现一个接口时不实现全部方法，该类只能是抽象类</li><li>抽象方法只能申明，不能实现，接口是设计的结果，抽象类是重构的结果</li><li>==抽象类中可以没有抽象方法==，抽象方法要被实现，不能是静态的也不能是私有的</li><li>接口可继承接口，类只能单根继承</li><li>==接口中的变量会被隐式地指定为public static final变量==</li></ul><p>语法层级区别</p><ol><li>抽象类提供给成员方法的实现细节，接口中只存publi abstract方法</li><li>抽象类中的成员变量可以是各种类型的，接口中的成员变量只能是public static final</li><li>接口中不能有静态代码块，抽象类中可以有</li><li>一个类只能继承一个抽象类，但是可以实现多个接口</li></ol><p>设计层次区别</p><ol><li>抽象列是对类整体抽象，接口事对局部的行为进行抽象</li><li>抽象类是模板式设计，接口是行为规范</li></ol><p><strong>二、short类型在进行运算时会自动提升为int类型</strong></p><p>三、final,finalize和finally的不同之处</p><ul><li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li><li>finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。</li><li>finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li></ul><p><strong>final的用法</strong></p><p>1.被final修饰的类不可以被继承<br>2.被final修饰的方法不可以被重写<br>3.被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.<br>4.被final修饰的方法,JVM会尝试将其<strong>内联</strong>,以提高运行效率<br>5.被final修饰的常量,在<strong>编译阶段</strong>会存入<strong>常量池</strong>中.</p><p>编译器对final域要遵守的两个重排序规则：</p><p>1.在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序.<br>2.初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不能重排序.</p><p>四、如何正确的退出多层嵌套循环.</p><ol><li>使用标号label和break;</li><li>通过在外层循环中添加标识符</li></ol><p>五、深拷贝和浅拷贝的区别是什么?</p><p>浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，<strong>浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象</strong>。</p><p>深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，<strong>深拷贝把要复制的对象所引用的对象都复制了一遍</strong>。</p><p>六、static都有哪些用法?</p><p><strong>静态变量和静态方法</strong>：也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.</p><p><strong>初始化操作，静态块：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss PreCache&#123;</span><br><span class="line"> <span class="keyword">static</span>&#123;</span><br><span class="line"> <span class="comment">//执行相关操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>static也多用于修饰内部类</strong></p><p><strong>静态导包</strong>：import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名.资源名,可以直接使用资源名</p><h4 id="七、进程、线程相关"><a href="#七、进程、线程相关" class="headerlink" title="七、进程、线程相关"></a>七、进程、线程相关</h4><p><strong>进程,线程,协程之间的区别</strong></p><ul><li>进程是==程序运行和资源分配==的基本单位,一个程序至少有一个进程,一个进程至少有一个线程。进程在执行过程中拥有==独立的内存单元==,而多个线程共享内存资源,==减少切换次数,从而效率更高.==</li><li>线程是进程的一个实体,是==cpu调度和分派的基本单位==,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.</li><li>协程，是一种比线程更加轻量级的存在，协程不==是被操作系统内核所管理==，而==完全是由程序所控制==（也就是在用户态执行）</li><li><strong>协程在子程序内部是可中断的，然后转而执行别的子程序，在适当的时候再返回来接着执行</strong>。由程序自身控制，没有线程切换，执行效率高。</li><li>因为只有一个线程，也不存在同时写变量冲突，<strong>因此在协程中控制共享资源不加锁</strong></li></ul><p><strong>java为什么坚持用多线程不用协程?</strong></p><ol><li>一个tomcat上的woker线程池的最大线程数一般会配置为50～500之间（目前springboot的默认值给的200）,实际内存增幅对整体性能影响不大</li><li>使用netty，NIO+worker thread可以大致等于一套协程</li><li>通过线程池可以很好创建销毁线程开销</li><li>线程的切换实际上只会发生在那些“活跃”的线程上。java web中大量存在的是IO请求挂起的线程，不会参与OS的线程切换</li></ol><p><strong>守护线程和非守护线程区别</strong></p><ul><li>程序运行完毕,jvm会等待非守护线程完成后关闭,但是jvm不会等待守护线程.守护线程最典型的例子就是GC线程</li></ul><p><strong>多线程上下文切换</strong></p><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p><p><strong>java.lang.Runnable比java.lang.Thread优势？</strong></p><ol><li>Java不支持多继承.因此继承Thread类就代表这个子类不能扩展其他类.而实现Runnable接口的类还可能扩展另一个类.</li><li>类可能只要求可执行即可,因此继承整个Thread类的开销过大.</li></ol><p><strong>Thread类中的start()和run()方法有什么区别?</strong></p><p>start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。==当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动==，start()方法才会启动新线程。</p><p><strong>怎么检测一个线程是否持有对象监视器</strong></p><p>Thread类提供了一个<code>·holdsLock(Object obj)</code>方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个<code>static</code>方法，这意味着”某条线程”指的是当前线程。</p><p><strong>对象监视器</strong></p><p>监视器是==一种同步结构，它基于互斥锁==，允许线程同时互斥（使用锁）和协作，·</p><p>当一个线程需要数据在某一个状态下它才能执行，那么另一个线程负责将数据改变到此状态，</p><p>常见的如生产者/消费者的问题，当读线程需要缓冲区处于“不空”的状态它才可以从缓冲区中读取任何数据，如果它发现缓冲区为空，则进入wait-set等待。待写线程用数据填充缓冲区，再通知读线程进行读取。这种机制被称为“<strong>Wait and Notify</strong>”或“<strong>Signal and Continue</strong>”</p><p><strong>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</strong>。</p><p><strong>什么导致线程阻塞</strong></p><blockquote><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪）</p></blockquote><p><strong>sleep()</strong>：被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止</p><p><strong>suspend() 和 resume()</strong>：suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。</p><p><strong>yield()</strong>：使当前线程放弃当前已经分得的CPU 时间，==但不使当前线程阻塞==，即线程仍处于可执行状态，随时可能再次分得 CPU 时间</p><p><strong>wait() 和 notify()</strong>：wait() 使得线程进入阻塞状态，它有两种形式，一种允许指定以==毫秒==为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.</p><p><strong>wait(),notify()和suspend(),resume()之间的区别</strong></p><ul><li><strong>wait(),notify()</strong>属于<code>Object</code>类，所有对象都拥有这一对方法；（因为锁是任何对象具有的）其他方法属于<code>thread</code>类。其他方法阻塞时都不会释放占用的锁（如果占用了的话），这一对会释放占用锁</li><li><strong>wait(),notify()</strong>必须在 <code>synchronized</code>方法或块中调用，其他所有方法可在任何位置调用。（因为在<code>synchronized</code>方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放）如果没有放在同步方法或同步块中，会报<code>IllegalMonitorStateException</code></li></ul><p><strong>关于 wait() 和 notify() 方法最后再说明两点：</strong><br>第一：调用<code>notify()</code> 方法导致解除阻塞的线程是从因调用该对象的 <code>wait()</code> 方法而阻塞的线程中==随机选取==的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</p><p>第二：除了 <code>notify()</code>，还有一个方法 <code>notifyAll()</code>也可起到类似作用，唯一的区别在于，调用 <code>notifyAll()</code>方法将把因调用该对象的 <code>wait()</code>方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</p><blockquote><p>特别注意：uspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁</p></blockquote><p><strong>wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</strong></p><p>wait()方法==立即释放对象监视器==，notify()/notifyAll()方法则会==等待线程剩余代码执行完==毕才会放弃对象监视器。</p><p><strong>标准使用wait示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"><span class="keyword">while</span> (condition does not hold)</span><br><span class="line">     obj.wait(); <span class="comment">// (Releases lock, and reacquires on wakeup)</span></span><br><span class="line">... <span class="comment">// Perform action appropriate to condition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="八、产生死锁的条件"><a href="#八、产生死锁的条件" class="headerlink" title="八、产生死锁的条件"></a>八、产生死锁的条件</h4><ol><li>==互斥条件==：一个资源每次只能被一个进程使用。</li><li>==请求与保持条件：==一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>==不剥夺条件:进程已获得的资源==，在末使用完之前，不能强行剥夺。</li><li>==循环等待条件==:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><p><strong>synchronized和ReentrantLock的区别·</strong></p><p><code>synchronized</code>是和if、else、for、while一样的==关键字==，<code>ReentrantLock</code>是==类==，这是二者的本质区别。既然<code>ReentrantLock</code>是类，那么它就提供了比<code>synchronized</code>更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，<code>ReentrantLock</code>比<code>synchronized</code>的扩展性体现在几点上：<br>（1）<code>ReentrantLock</code>可以对获取锁的等待时间进行设置，这样就==避免了死锁==<br>（2）<code>ReentrantLock</code>可以获取各种锁的信息<br>（3）<code>ReentrantLock</code>可以灵活地实现==多路通知==<br>另外，二者的锁机制其实也是不一样的:<code>ReentrantLock</code>底层调用的是<code>Unsafe</code>的<code>park</code>方法加锁，<code>synchronized</code>操作的应该是对象头中<code>mark ``word</code>.</p><p><a href="https://blog.csdn.net/scdn_cp/article/details/86491792" target="_blank" rel="noopener">Java对象结构与锁实现原理及MarkWord详解</a></p><p><strong>一个线程如果出现了运行时异常怎么办?</strong></p><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p><p><strong>线程共享数据方法</strong></p><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><h4 id="九、java中锁种类"><a href="#九、java中锁种类" class="headerlink" title="九、java中锁种类"></a>九、java中锁种类</h4><p>锁提供了两种主要特性：<strong>互斥（mutual exclusion） 和可见性（visibility）</strong></p><p>锁的状态</p><ul><li><p><strong>自旋锁</strong></p><p>==共享数据的锁定状态==只会持续很短的时间，为了这一小段时间而去挂起和恢复线程有点浪费，所以这里就做了一个处理，让后面请求锁的那个线程在稍等一会，但是不放弃处理器的执行时间，看看持有锁的线程能否快速释放</p><p>==为了让线程等待，所以需要让线程执行一个忙循环也就是自旋操作==</p><p>在jdk6之后，引入了自适应的自旋锁，也就是等待的时间不再固定了，而是由上一次在同一个锁上的自旋时间及锁的拥有者状态来决定</p><p>==好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。==</p></li><li><p><strong>偏向锁</strong></p><p>目的是消除数据在无竞争情况下的同步原语。进一步提升程序的运行性能。</p><p>==这个锁会偏向第一个获得他的线程，如果接下来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步。==</p><p>偏向锁可以提高带有同步但无竞争的程序性能，也就是说他并不一定总是对程序运行有利，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式就是多余的，在具体问题具体分析的前提下，可以考虑是否使用偏向锁。</p></li><li><p><strong>轻量级锁/重量级锁</strong></p><p>为了减少获得锁和释放锁带来的性能消耗</p><p>在Java SE1.6里锁一共有四种状态，<strong>无锁状态</strong>，<strong>偏向锁状态</strong>，<strong>轻量级锁状态</strong>和<strong>重量级锁状态</strong>，它会随着竞争情况逐渐升级。==锁可以升级但不能降级==，意味着偏向锁升级成轻量级锁后不能降级成偏向锁</p><p>四种锁的状态是通过对象监视器在对象头中的字段来表明的。</p><p><strong>偏向锁</strong>是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。</p><p><strong>轻量级锁</strong>是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p><p><strong>重量级锁</strong>是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。==重量级锁会让他申请的线程进入阻塞，性能降低。==</p></li></ul><p>锁的种类</p><ul><li><p><strong>独享锁/共享锁</strong>：独享锁是指==该锁一次只能被一个线程所持有==；共享锁是指==该锁可被多个线程所持有==。</p><p>对于<code>Java ReentrantLock而言</code>，其是<strong>独享锁</strong>。但是对于<code>Lock</code>的另一个实现类<code>ReadWriteLock</code>，其<strong>读锁是共享锁，其写锁是独享锁</strong>。</p><p>对于<code>Synchronized</code>而言，当然是<strong>独享锁</strong>。</p><p>读锁的共享锁可保证并发读是非常高效的，读写，写读，写写的过程是互斥的。</p><p>独享锁与共享锁也是通过<code>AQS</code>来实现的，通过实现不同的方法，来实现独享或者共享。</p></li><li><p><strong>互斥锁/读写锁</strong>:即独享锁和共享锁的具体实现</p></li><li><p><strong>可重入锁</strong>：又名<strong>递归锁</strong>，是指在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁</p><p>对于<code>Java ReetrantLock</code>而言，从名字就可以看出是一个重入锁，其名字是<code>Re entrant Lock</code> 重新进入锁。</p><p>对于<code>Synchronized</code>而言，也是一个可重入锁。可重入锁的一个好处是==可一定程度避免死锁。==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">　　Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">　　setB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是可重入锁的话，setB可能不会被当前线程执行，可能造成死锁。</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">　　Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>公平锁和非公平锁</strong>：</p><p><strong>公平锁</strong>是指多个线程按照==申请锁的顺序==来获取锁。</p><p><strong>非公平锁</strong>是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。</p><p>对于<code>Java ReetrantLock</code>而言，通过构造函数指定该锁是否是公平锁，默认是<strong>非公平锁</strong>。非公平锁的优点在于==吞吐量比公平锁大==。</p><p>对于<code>Synchronized</code>而言，也是一种<strong>非公平锁</strong>。由于其并不像<code>ReentrantLock</code>是通过<code>AQS</code>的来实现线程调度，所以==并没有任何办法使其变成公平锁==。</p></li></ul></li></ul><p>锁的设计</p><ul><li><p><strong>乐观锁/悲观锁</strong>：主要是指看待==并发同步==的角度</p><p><em>==悲观锁适合写操作非常多的场景，乐观锁适合读操作非常多的场景，不加锁会带来大量的性能提升。==</em></p><p><strong>乐观锁</strong>：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，==但是在更新的时候会判断一下在此期间别人有没有去更新这个数据==，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，在Java中<code>java.util.concurrent.atomic</code>包下面的==原子变量类==就是使用了乐观锁的一种实现方式==CAS(Compare and Swap)== 比较并交换)实现的。</p><p>乐观锁在Java中的使用，是==无锁编程==，常常采用的是==CAS算法==，典型的例子就是原子类，通过==CAS自旋==实现原子操作的更新。</p><ul><li><p><em>数据版本机制</em></p><p>实现数据版本一般有两种，第一种是使用版本号，第二种是使用时间戳。以版本号方式为例。</p></li></ul><p>版本号方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。<br>  核心SQL代码：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> xxx=<span class="comment">#&#123;xxx&#125;, version=version+1 where id=#&#123;id&#125; and version=#&#123;version&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><p><em>CAS操作</em></p><p>CAS（Compare and Swap 比较并交换），当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，==失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。==</p><p>CAS操作中包含三个操作数——==<strong>需要读写的内存位置(V)</strong>==、==<strong>进行比较的预期原值(A)</strong>==和==<strong>拟写入的新值(B)</strong>==。如果内存位置V的值与预期原值A相匹配，那么处理器会自动将该位置值更新为新值B，否则处理器不做任何操作。</p><p>以<code>java.util.concurrent</code>包中的<code>AtomicInteger</code>为例，看一下在不使用锁的情况下是如何保证线程安全的。主要理解<code>getAndIncrement</code>方法，该方法的作用相当于++i操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">　　<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;   <span class="comment">//CAS中必须使用volatile变量，保证拿到的变量时主内存中最新值</span></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> value;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　 <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　　　<span class="keyword">for</span> (;;)&#123;</span><br><span class="line">　　　　　　<span class="keyword">int</span> current = get();</span><br><span class="line">　　　　　　<span class="keyword">int</span> next = current + <span class="number">1</span>;</span><br><span class="line">　　　　　　<span class="keyword">if</span> (compareAndSet(current, next)) <span class="comment">//获取值后查看值是否更新</span></span><br><span class="line">　　　　　　<span class="keyword">return</span> current;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line"> </span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span></span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>  <strong>悲观锁</strong>：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。比如Java里面的同步原语<code>synchronized</code>关键字的实现就是悲观锁。</p><p>  悲观锁在Java中的使用，就是利用各种锁</p><ul><li>在对任意记录进行修改前，先尝试为该记录加上<strong>排他锁（exclusive locking）。</strong></li><li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要==等待==或者==抛出异常==。具体响应方式由开发者根据实际需要决定。</li><li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</li><li>期间如果有其他对该记录做修改或加排他锁的操作，都会==等待==我们解锁或直接抛出异常。</li></ul><ul><li><p><strong>分段锁</strong>：对于<code>ConcurrentHashMap</code>而言，其并发的实现就是==通过分段锁的形式==来实现高效的并发操作</p><p>以<code>ConcurrentHashMap</code>来说一下分段锁的含义以及设计思想，<code>ConcurrentHashMap</code>中的分段锁称为<code>Segment</code>，它即类似于<code>HashMap</code>（JDK7和JDK8中<code>HashMap</code>的实现）的结构，即==内部拥有一个<code>Entry</code>数组，数组中的每个元素又是一个链表；同时又是一个<code>ReentrantLock</code>（<code>Segment</code>继承了<code>ReentrantLock</code>）==。</p><p>当需要<code>put</code>元素的时候，并不是对整个<code>hashmap</code>进行加锁，而是先通过<code>hashcode</code>来知道他要放在哪一个分段中，然后对这个分段进行加锁，所以当多线程<code>put</code>的时候，只要不是放在一个分段中，就实现了真正的并行的插入</p><p>但是，在统计<code>size</code>的时候，可就是获取<code>hashmap</code>全局信息的时候，就需要获取所有的分段锁才能统计。</p><p>分段锁的设计目的是==细化锁的粒度==，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p></li></ul><h5 id="锁的使用"><a href="#锁的使用" class="headerlink" title="锁的使用"></a><strong>锁的使用</strong></h5><p><a href="https://www.cnblogs.com/hustzzl/p/9343797.html" target="_blank" rel="noopener">java锁的使用和种类</a></p><p>预备知识</p><ol><li><p>AQS：<code>AbstractQueuedSynchronized</code> 抽象队列式的同步器，AQS定义了一套==多线程访问共享资源的同步器框架==，许多同步类实现都依赖于它，如常用的<code>ReentrantLock</code>/<code>Semaphore</code>/<code>CountDownLatch</code>…</p><p><img src="http://cdn.zblade.top/qiniu_img/721070-20170504110246211-10684485.png" alt>AQS维护了一个<code>volatile int state</code>(代表==共享资源)==和一个<code>FIFO</code>线程等待队列（==多线程争用资源被阻塞时会进入此队列==）。</p><p>state的访问方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getState();</span><br><span class="line">setState();</span><br><span class="line">compareAndSetState();</span><br></pre></td></tr></table></figure><p>AQS定义两种资源共享方式：<strong><code>Exclusive</code></strong>（独占，只有一个线程能执行，如<code>ReentrantLock</code>）和<strong><code>Share</code></strong>（共享，多个线程可同时执行，如<code>Semaphore</code>/<code>CountDownLatch</code>）。</p><p>自定义同步器实现时主要实现以下几种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isHeldExclusively()<span class="comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class="line">tryAquire(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryRelease(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryAcquireShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line">tryReleaseShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</span></span><br></pre></td></tr></table></figure><p>以<code>ReentrantLock</code>为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其他线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多少次，这样才能保证state是能回到零态的。</p><p>再以<code>CountDownLatch</code>为例，任务分为N个子线程去执行，state为初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS减1。等到所有子线程都执行完后（即state=0），会unpark()主调用线程，然后主调用线程就会await()函数返回，继续后余动作。</p></li></ol><blockquote><p>注 ：AQS也支持自定义同步器同时实现独占和共享两种方式，如<code>ReentrantReadWriteLock</code>。</p></blockquote><h4 id="十、-ThreadLocal"><a href="#十、-ThreadLocal" class="headerlink" title="十、 ThreadLocal"></a>十、 ThreadLocal</h4><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享，Java提供<code>ThreadLocal</code>类来支持线程局部变量，是一种实现线程安全的方式。</p><p>但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。==任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。==</p><p>作用：简单说<code>ThreadLocal</code>就是一种以==空间换时间==的做法在每个Thread里面维护了一个<code>ThreadLocal.ThreadLocalMap</code>把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.</p><p>十一、生产者消费者模型</p><p><strong>作用：</strong></p><p>（1）通过==<strong>平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率</strong>==，这是生产者消费者模型最重要的作用<br>（2）<strong>解耦</strong>，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p><p>写一个生产者-消费者队列方法</p><p>可以通过阻塞队列实现,也可以通过wait-notify来实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻塞队列实现生产者消费者模型</span></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue q)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.queue=q;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//模拟耗时</span></span><br><span class="line">                queue.put(produce());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> n=<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>);</span><br><span class="line"> System.out.println(<span class="string">"Thread:"</span> + Thread.currentThread().getId() + <span class="string">" produce:"</span> + n);</span><br><span class="line"> <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue q)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.queue=q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);<span class="comment">//模拟耗时</span></span><br><span class="line">                consume(queue.take());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(Integer n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Thread:"</span> + Thread.currentThread().getId() + <span class="string">" consume:"</span> + n);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;Integer&gt; queue=<span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">100</span>);</span><br><span class="line">        Producer p=<span class="keyword">new</span> Producer(queue);</span><br><span class="line">        Consumer c1=<span class="keyword">new</span> Consumer(queue);</span><br><span class="line">        Consumer c2=<span class="keyword">new</span> Consumer(queue);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> Thread(p).start();</span><br><span class="line"> <span class="keyword">new</span> Thread(c1).start();</span><br><span class="line"> <span class="keyword">new</span> Thread(c2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十二、java中的线程调度算法</p><p><strong>抢占式</strong>。一个线程用完CPU之后，操作系统会根据==线程优先级、线程饥饿情况==等数据算出一个==总的优先级==并分配下一个时间片给某个线程执行。</p><p>十三、Thread.sleep(0)的作用是什么</p><p>由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用==<code>Thread.sleep(0)</code>手动触发一次操作系统分配时间片的操作==，这也是平衡CPU控制权的一种操作。</p><h4 id="十四、ConcurrentHashMap"><a href="#十四、ConcurrentHashMap" class="headerlink" title="十四、ConcurrentHashMap"></a>十四、ConcurrentHashMap</h4><p><strong>ConcurrentHashMap的并发度是什么?</strong></p><p><code>ConcurrentHashMap</code>的并发度就是<code>segment</code>的大小，默认为==<strong>16</strong>==，这意味着最多同时可以有16条线程操作<code>ConcurrentHashMap</code>，这也是<code>ConcurrentHashMap</code>对<code>Hashtable</code>的最大优势，任何情况下，<code>Hashtable</code>能同时有两条线程获取<code>Hashtable</code>中的数据吗？</p><p><strong>ConcurrentHashMap的工作原理</strong></p><blockquote><p>jdk 1.6:</p></blockquote><p><code>ConcurrentHashMap</code>是==线程安全==的，但是与<code>Hashtablea</code>相比，实现线程安全的方式不同。</p><p><code>Hashtable</code>是通过对<code>hash</code>表结构进行锁定，是==阻塞式==的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。</p><p><code>ConcurrentHashMap</code>是采用==分离锁==的方式，它并没有对整个<code>hash</code>表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对<code>hash</code>表其他地方的访问。</p><blockquote><p>jdk1.7</p></blockquote><p>在JDK1.7版本中，ConcurrentHashMap的数据结构是由一个Segment数组和多个HashEntry组成</p><p><img src="http://cdn.zblade.top/qiniu_img/5220087-8c5b0cc951e61398.webp" alt></p><blockquote><p>jdk 1.8</p></blockquote><p>在jdk 8中，<code>ConcurrentHashMap</code>不再使用<code>Segment</code>分离锁，而是采用一种乐观锁<code>CAS</code>算法来实现同步问题，但其底层还是“==数组+链表-&gt;红黑树==”的实现,桶中的结构可能是链表，也可能是红黑树，红黑树是为了提高查找效率。</p><p><img src="http://cdn.zblade.top/qiniu_img/5220087-63281d7b737f1109.webp" alt></p><p>总结：</p><p>相对而言，<code>ConcurrentHashMap</code>只是增加了同步的操作来控制并发，从JDK1.7版本的==ReentrantLock+Segment+HashEntry==，到JDK1.8版本中==synchronized+CAS+HashEntry+红黑树==,相对而言，总结如下思考:</p><ul><li>JDK1.8的实现<strong>降低锁的粒度</strong>，JDK1.7版本锁的粒度是基于<code>Segment</code>的，包含多个<code>HashEntry</code>，而JDK1.8锁的粒度就是<code>HashEntry</code>（首节点）</li><li>JDK1.8版本的<strong>数据结构变得更加简单</strong>，使得操作也更加清晰流畅，因为已经使用<code>synchronized</code>来进行同步，所以不需要分段锁的概念，也就不需要<code>Segment</code>这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li><li>JDK1.8使用<strong>红黑树来优化链表</strong>，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li><li>JDK1.8为什么使用内置锁<strong>synchronized</strong>来代替重入锁<strong>ReentrantLock</strong>，我觉得有以下几点<ol><li>因为粒度降低了，在相对而言的低粒度加锁方式，<code>synchronized</code>并不比<code>ReentrantLock</code>差，在==粗粒度加锁中<code>ReentrantLock</code>可能通过<code>Condition</code>来控制各个低粒度的边界，更加的灵活，而在低粒度中，<code>Condition</code>的优势就没有了==</li><li>JVM的开发团队从来都没有放弃<code>synchronized</code>，而且==基于JVM的<code>synchronized</code>优化空间更大==，使用内嵌的关键字比使用API更加自然</li><li>在大量的数据操作下，对于JVM的内存压力==，基于API的<code>ReentrantLock</code>会开销更多的内存==，虽然不是瓶颈，但是也是一个选择依据</li></ol></li></ul><p>十五、<code>CyclicBarrier</code>和<code>CountDownLatch</code>区别</p><p>这两个类非常类似，都在<code>java.util.concurrent</code>下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><ul><li><code>CyclicBarrier</code>的某个线程运行到某个点上之后，==该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行==；<code>CountDownLatch</code>则不是，某线程运行到某个点上之后，==只是给某个数值-1而已，该线程继续运行==</li><li><code>CyclicBarrier</code>只能唤起一个任务，<code>CountDownLatch</code>可以唤起多个任务</li><li><code>CyclicBarrier</code>可重用，<code>CountDownLatch</code>不可重用，计数值为0该<code>CountDownLatch</code>就不可再用了</li></ul><p>十六、java中的++操作符线程安全么?</p><p>不是线程安全的操作。它涉及到多个指令，如==读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差==</p><p>十七、多线程开发良好习惯</p><ol><li>给线程命名</li><li>最小化同步范围</li><li>优先使用<code>volatile</code></li><li>尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如<code>BlockingQueue</code>,<code>Semeaphore</code></li><li>优先使用<strong>并发容器</strong>而非同步容器.</li><li>考虑使用线程池</li></ol><h4 id="十八、volatile关键字"><a href="#十八、volatile关键字" class="headerlink" title="十八、volatile关键字"></a>十八、volatile关键字</h4><p>指令重排序和内存可见性，volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。</p><p>==Volatile 变量具有 synchronized 的可见性特性，但是不具备原子特性==</p><p><strong>可以创建Volatile数组吗?</strong></p><p>Java 中可以创建 volatile类型数组，不过<strong>只是一个指向数组的引用，而不是整个数组</strong>。如果改变引用指向的数组，将会受到volatile 的保护，但是如果多个线程同时改变数组的元素，volatile标示符就不能起到之前的保护作用了</p><p><strong>如何使非原子操作变成原子操作</strong></p><p>典型案例：</p><ol><li><p>double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的。如果知道要被多线程访问，应该加<code>volatile</code>关键字</p></li><li><p>提供内存屏障（memory barrier）</p><p>在写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）即在==你写一个 volatile 域时，能保证任何线程都能看到你写的值==，同时，在==写之前，也能保证任何数值的更新对所有线程是可见的==，因为内存屏障会将其他所有写的值更新到缓存</p></li></ol><p>使用条件</p><ul><li>对变量的写操作不依赖于当前值。</li><li>该变量没有包含在具有其他变量的不变式中。</li></ul><h4 id="十九、异常"><a href="#十九、异常" class="headerlink" title="十九、异常"></a>十九、异常</h4><p><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/dd864140130/article/details/42504189" target="_blank" rel="noopener">白话异常机制</a></p><p><strong>throw和throws的区别</strong></p><p>throw用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：</p><p><code>throw new IllegalArgumentException(“size must be multiple of 2″)</code></p><p>而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。<strong>Java 中，任何未处理的受检查异常强制在 throws 子句中声明</strong>。</p><p>二十、Java 中，Serializable 与 Externalizable 的区别</p><p><code>Serializable</code>接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是==JVM 内嵌的默认序列化方式==，成本高、脆弱而且不安全。<code>Externalizable</code>允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>一、switch 在1.7后支持String类型，支持byte类型但是不支持long类型</p><p><strong>二、a.hashCode()有什么用?与a.equals(b)有什么关系？</strong></p><p>hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，使用 equal() 方法来判断两个相等的对象，必须具有相同的 hashcode。</p><p><strong>三、a==b与a.equals(b)有什么区别</strong></p><p>如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p><p><strong>四、<code>+=</code>操作符会进行隐式自动类型转换</strong></p><p>五、位运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name!=<span class="keyword">null</span>&amp;userName.equals(<span class="string">""</span>)</span><br><span class="line">    <span class="comment">//要报空指针异常</span></span><br></pre></td></tr></table></figure><h4 id="六、日期计算"><a href="#六、日期计算" class="headerlink" title="六、日期计算"></a>六、日期计算</h4><p><strong><code>SimpleDateFormat</code>是线程安全的吗?</strong></p><p><strong><code>DateFormat</code>的所有实现，包括 <code>SimpleDateFormat</code>都不是线程安全的</strong>，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如将 <code>SimpleDateFormat</code>限制在 <code>ThreadLocal</code>中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。</p><h4 id="七、多态"><a href="#七、多态" class="headerlink" title="七、多态"></a>七、多态</h4><p>多态表示当同一个操作作用在不同对象时，会有不同的语义，从而产生不同的结果。3+4和“3”+“4”</p><p>Java的多态性可以概括成”一个接口,两种方法”分为两种</p><ul><li><p><strong>编译时的多态</strong></p><p>编译时的多态主要是指方法的重载（overload）</p></li><li><p><strong>运行时的多态。</strong></p><p>运行时的多态主要是指方法的覆盖（override），接口也是运行时的多态</p></li></ul><p><strong>运行时的多态</strong>的三种情况：<br>1、父类有方法，子类有覆盖方法：编译通过，执行子类方法。<br>2、父类有方法，子类没覆盖方法：编译通过，执行父类方法（子类继承）。<br>3、父类没方法，子类有方法：编译失败，无法执行。<br>==方法带final、static、private时是编译时多态，因为可以直接确定调用哪个方法。==</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="http://cdn.zblade.top/qiniu_img/v2-a571bdc9758656f2276298ef42a9b065_hd.jpg" alt></p><p>一、ArrayList和LinkedList的区别?</p><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><p>二、ArrayList和Array有什么区别?</p><ol><li>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。</li><li>Array是指定大小的，而ArrayList大小是固定的</li></ol><p>三、Comparator和Comparable的区别?</p><p>Comparable 接口用于定义对象的·<strong>自然顺序</strong>，而 comparator 通常用于<strong>定义用户定制</strong>的顺序。==Comparable 总是只有一个==，但是可以有多个 comparator 来定义对象的顺序。</p><p>四、如何打印数组内容</p><p>你可以使用<code>Arrays.toString()</code>和<code>Arrays.deepToString()</code> 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给<code>System.out.println()</code>方法，将无法打印出数组的内容，但是 <code>Arrays.toString()</code>可以打印每个元素。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>一、使用Integer和Long进行数据库数据存值，因为这些是对象，如果使用int或者long会获取不到值</p><p>注意不要和mysql的关键字冲突了！！</p><h3 id="二、三范式"><a href="#二、三范式" class="headerlink" title="二、三范式"></a>二、三范式</h3><p><strong>第一范式(1NF):</strong></p><p>指的是数据库表的中的每一列都是不可分割的基本数据项,同一列中不能有多个值。第一范式要求属性值是不可再分割成的更小的部分<strong>。第一范式简而言之就是强调的是列的原子性，即列不能够再分成其他几列</strong>。例如有一个列是电话号码一个人可能有一个办公电话一个移动电话。第一范式就需要拆开成两个属性。</p><p><strong>第二范式（2NF）：</strong></p><p><strong>第二范式首先是第一范式</strong>，同时还需要包含两个方面的内容，<strong>一是表必须要有一个主键；二是没有包含主键中的列必须完全依赖主键，而不能只是依赖于主键的一部分</strong>。<br>例如在一个订单中可以订购多种产品，所以单单一个 OrderID 是不足以成为主键的，主键应该是（OrderID，ProductID）。显而易见 Discount（折扣），Quantity（数量）完全依赖（取决）于主键（OderID，ProductID），而 UnitPrice，ProductName 只依赖于 ProductID。所以 OrderDetail 表不符合 2NF。</p><p>不符合 2NF 的设计容易产生冗余数据。 可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。</p><p><strong>第三范式（3NF）：</strong></p><p><strong>首先是第二范式，例外非主键列必须依赖于主键，不能存在传递</strong>。也就是说不能存在非主键列A依赖于非主键列B，然后B依赖于主键列<br>考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。<br>其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。不过问题是 CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。<br>通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。<br>==二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键点在于，2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分；3NF：非主键列是直接依赖于主键，还是直接依赖于非主键列。==</p><p>三、内外连接</p><p>四、事务</p><ol><li><strong>原子性</strong>:即事务是一个不可分割的整体,数据修改时要么都操作一遍要么都不操作</li><li><strong>一致性</strong>:一个事务执行前后数据库的数据必须保持一致性状态</li><li><strong>隔离性</strong>:当两个或者以上的事务并发执行时,为了保证数据的安全性,将一个事务的内部的操作与事务操作隔离起来不被其他事务看到</li><li><strong>持久性</strong>:更改是永远存在的</li></ol><p><strong>隔离级别</strong></p><blockquote><p><strong>读未提交</strong>：事务中的修改，即使没有提交，其他事务也可以看得到，脏读。如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。该隔离级别可以通过“排他写锁”实现。一个在写事务另一个虽然不能写但是能读到还没有提交的数据</p><p><strong>读已提交</strong>：可以避免脏读但是可能出现不可重复读。允许写事务，读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。事务T1读取数据，T2紧接着更新数据并提交数据，事务T1再次读取数据的时候，和第一次读的不一样。即虚读</p><p><strong>可重复读</strong>：禁止写事务，读事务会禁止所有的写事务，但是允许读事务，避免了不可重复读和脏读，但是会出现幻读，即第二次查询数据时会包含第一次查询中未出现的数据</p><p><strong>序列化</strong>：禁止任何事务，一个一个进行；提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行。如果仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。</p></blockquote><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/u013967628/article/details/84305511%23B%2BTree" target="_blank" rel="noopener">索引</a></p><p><strong>7.6.1优缺点：</strong></p><blockquote><p>优点： 可以快速检索，减少I/O次数，加快检索速度；根据索引分组和排序，可以加快分组和排序<br>缺点： 索引本省也是表会占用内存，索引表占用的空间是数据表的1.5倍；索引表的创建和维护需要时间成本，这个成本随着数据量的增大而增大。</p></blockquote><p><strong>7.6.2索引的底层实现原理：</strong></p><p>哈希索引：</p><blockquote><p>只有memory（内存）存储引擎支持哈希索引，哈希索引用索引列的值计算该值的hashCode，然后在hashCode相应的位置存执该值所在行数据的物理位置，因为使用散列算法，因此访问速度非常快，但是一个值只能对应一个hashCode，而且是散列的分布方式，因此哈希索引不支持范围查找和排序的功能。</p></blockquote><p>Btree索引：</p><blockquote><p>B树是一个平衡多叉树，设树的度为2d，高度为h，那么B树需要满足每个叶子节点的高度都一样等于h，每个非叶子节点由n-1个key和n个point组成，d&lt; = n&lt;=2d 。所有叶子节点指针均为空，非叶子结点的key都是[key,data]二元组，其中key表示作为索引的键，data为键值所在行的数据。</p></blockquote><p>B+Tree索引</p><blockquote><p>B+Tree是BTree的一个变种，设d为树的度数，h为树的高度，B+Tree和BTree的不同主要在于：<br>B+Tree中的非叶子结点不存储数据，只存储键值；<br>B+Tree的叶子结点没有指针，所有键值都会出现在叶子结点上，且key存储的键值对应data数据的物理地址；B+Tree的每个非叶子节点由n个键值key和n个指针point组成；<br>优点：查询速度更加稳定，磁盘的读写代价更低</p></blockquote><p><strong>聚簇索引与非聚簇索引</strong></p><blockquote><p>聚簇索引的解释是:聚簇索引的顺序就是数据的物理存储顺序<br>非聚簇索引的解释是:索引顺序与数据物理排列顺序无关</p></blockquote><p>MyISAM——非聚簇索引</p><blockquote><p>MyISAM存储引擎采用的是非聚簇索引，非聚簇索引的主索引和辅助索引几乎是一样的，只是主索引不允许重复，不允许空值，他们的叶子结点的key都存储指向键值对应的数据的物理地址。<br>非聚簇索引的数据表和索引表是分开存储的。</p></blockquote><p>innoDB——聚簇索引</p><blockquote><p>聚簇索引的主索引的叶子结点存储的是键值对应的数据本身，辅助索引的叶子结点存储的是键值对应的数据的主键键值。因此主键的值长度越小越好，类型越简单越好。<br>聚簇索引的数据和主键索引存储在一起。</p></blockquote><p><strong>7.6.3 联合索引(顺丰)</strong></p><blockquote><p>利用最左前缀原则</p></blockquote><p><strong>7.7.数据库锁</strong></p><blockquote><p>锁是计算机协调多个进程或者纯线程并发访问某一资源的机制</p></blockquote><p><strong>7.7.1Mysql的锁种类</strong></p><blockquote><p>Mysql的锁机制比较简单，不同的搜索引擎支持不同的锁机制<br>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率高，并发度最低<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突概率最低，并发度也最高<br>页面锁：开销和加锁速度位于表锁和行锁之间，会出现死锁，锁定粒度也位于表锁和行锁之间，并发度一般</p></blockquote><p><strong>7.7.2Mysql表级锁的锁模式（MyISAM）</strong></p><blockquote><p>Mysql表级锁有两种模式：表共享锁（Table Read Lock）和表独占锁（Table Write Lock）</p></blockquote><h3 id="7-8-having-和group-by"><a href="#7-8-having-和group-by" class="headerlink" title="7.8.having 和group by"></a>7.8.having 和group by</h3><h3 id="四、不可重复读和幻读"><a href="#四、不可重复读和幻读" class="headerlink" title="四、不可重复读和幻读"></a>四、不可重复读和幻读</h3><p>一个事务A开启后，第一次读取到一些数据之后，就对这些数据进行加<strong>行锁</strong>，导致其他事务B无法修改（更新或者删除）数据，于是A事务不管怎么读，返回的都是一样的数据，这就实现了“<strong>可重复读</strong>”这个隔离级别</p><p>“其他事务B无法修改这些数据（更新或删除）”，不代表其他事务B不能insert一些记录并提交。这样一来事务A还是可以读取到一条之前没有出现的数据，这就产生了“<strong>幻读</strong>”。</p><p><strong>行级锁是无法解决幻读问题的。要想解决这个问题必须实现Serializable隔离级别。</strong></p><p>使用间隙锁可以解决插入导致的幻读</p><h3 id="五、分布式ID生成方案总结"><a href="#五、分布式ID生成方案总结" class="headerlink" title="五、分布式ID生成方案总结"></a>五、分布式ID生成方案总结</h3><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485590&idx=2&sn=9697a9fae7f4d319e2e92103186a2c26&chksm=cea2475df9d5ce4bb69770ce4934537db6bb1346457c861d51b0d18c130b0d66d35c2c17bc20&token=69811960&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">分布式ID生成方案总结</a></p><p>生成全局 id 有下面这几种方式：</p><ul><li><strong>UUID</strong>：不适合作为主键，因为太长了，并且无序不可读，查询效率低。比较适合用于生成唯一的名字的标示比如文件的名字。</li><li><strong>数据库自增 id</strong> : 两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。这种方式生成的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</li><li><strong>利用 redis 生成 id :</strong> 性能比较好，灵活方便，不依赖于数据库。但是，引入了新的组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本。</li><li><strong>Twitter的snowflake算法</strong> ：Github 地址：<a href="https://github.com/twitter-archive/snowflake。" target="_blank" rel="noopener">https://github.com/twitter-archive/snowflake。</a></li><li><strong>美团的<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">Leaf</a>分布式ID生成系统</strong> ：Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递增、单调递增、信息安全，里面也提到了几种分布式方案的对比，但也需要依赖关系数据库、Zookeeper等中间件。感觉还不错。 。</li></ul><h3 id="六、常用命令"><a href="#六、常用命令" class="headerlink" title="六、常用命令"></a>六、常用命令</h3><p><a href="https://segmentfault.com/a/1190000010979586" target="_blank" rel="noopener">MySQL常用操作命令</a></p><p><a href="https://blog.csdn.net/qq_41455420/article/details/82802090" target="_blank" rel="noopener">MySQL查看数据库性能常用命令</a></p><h3 id="七、把子查询优化为-join-操作"><a href="#七、把子查询优化为-join-操作" class="headerlink" title="七、把子查询优化为 join 操作"></a>七、把子查询优化为 join 操作</h3><p>通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。</p><p><strong>子查询性能差的原因：</strong></p><p>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p>由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h3 id="八、临时表"><a href="#八、临时表" class="headerlink" title="八、临时表"></a>八、临时表</h3><p><strong>使用临时表的场景</strong></p><p>1)<code>ORDER BY</code>子句和<code>GROUP BY</code>子句不·同， 例如：ORDERY BY price GROUP BY name；</p><p>2)在<code>JOIN</code>查询中，ORDER BY或者GROUP BY使用了<strong>不是第一个表的列</strong> 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from TableA, TableB ORDER BY TableA.price GROUP by TableB.name</span><br></pre></td></tr></table></figure><p>3)<code>ORDER BY</code>中使用了<code>DISTINCT</code>关键字 <code>ORDERY BY DISTINCT(price)</code></p><p>4)<code>SELECT</code>语句中指定了<code>SQL_SMALL_RESULT</code>关键字</p><p>SQL_SMALL_RESULT的意思就是告诉MySQL，结果会很小，请直接使用内存临时表，不需要使用索引排序 <code>SQL_SMALL_RESULT</code>必须和<code>GROUP BY</code>、<code>DISTINCT</code>或<code>DISTINCTROW</code>一起使用 一般情况下，我们没有必要使用这个选项，让MySQL服务器选择即可。</p><p><strong>直接使用磁盘临时表的场景</strong></p><p>1)表包含<code>TEXT</code>或者<code>BLOB</code>列；</p><p>2<code>)GROUP BY</code>或者 <code>DISTINCT</code>子句中包含长度大于<code>512</code>字节的列；</p><p>3)使用<code>UNION</code>或者<code>UNION ALL</code>时，<code>SELECT</code>子句中包含大于<code>512</code>字节的列；</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h4 id="一、四种引用"><a href="#一、四种引用" class="headerlink" title="一、四种引用"></a><strong>一、四种引用</strong></h4><p><a href="https://blog.csdn.net/dd864140130/article/details/49885811" target="_blank" rel="noopener">引用详解</a></p><ul><li>强引用：如果一个对象具有强引用，==它就不会被垃圾回收器回收==。即使当前内存空间不足，JVM也不会回收它，而是==抛出 OutOfMemoryError 错误==，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以==显式地将引用赋值为nul==l，这样一来的话，JVM在合适的时间就会回收该对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person=<span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><ul><li>软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，==只有在内存不足时，软引用才会被垃圾回收器回收==。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person=<span class="keyword">new</span> Person(); </span><br><span class="line">SoftReference sr=<span class="keyword">new</span> SoftReference(person);</span><br></pre></td></tr></table></figure><ul><li>弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，==无论当前内存空间是否充足，都会将弱引用回收==。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person=<span class="keyword">new</span> Person(); </span><br><span class="line">WeakReference wr=<span class="keyword">new</span> WeakReference(person);</span><br></pre></td></tr></table></figure><ul><li><p>虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。</p><p>设置虚引用的目的是为了==被虚引用关联的对象在被垃圾回收器回收时，能够收到一个系统通知==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue queue=<span class="keyword">new</span> ReferenceQueue();</span><br><span class="line">PhantomReference pr=<span class="keyword">new</span> PhantomReference(object.queue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GC在回收一个对象时，如果发现该对象具有虚引用，那么在回收之前会首先该对象的虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入虚引用来了解被引用的对象是否被GC回收。</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://cdn.zblade.top/qiniu_img/20150620182522495.png" alt></p><p><strong>引用顺序</strong></p><blockquote><p>单条引用链的可达性以最弱的一个引用类型来决定；<br>多条引用链的可达性以最强的一个引用类型来决定；</p></blockquote><p>应用场景</p><ol><li><p><strong>利用软引用和弱引用解决OOM问题：</strong></p><p>例：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题.</p></li><li><p><strong>通过软引用实现Java对象的高速缓存:</strong></p><p>例：比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。此时,通过软引用和 HashMap 的结合可以构建高速缓存,提供性能.</p></li></ol><h4 id="二、ReferenceQueue和Reference"><a href="#二、ReferenceQueue和Reference" class="headerlink" title="二、ReferenceQueue和Reference"></a>二、ReferenceQueue和Reference</h4><p><strong>ReferenceQueue</strong></p><p>其作用在于Reference对象所引用的对象被GC回收时，该Reference对象将会被加入引用队列中（ReferenceQueue）的队列末尾,这相当于是一种通知机制.当关联的引用队列中有数据的时候，意味着引用指向的堆内存中的对象被回收。通过这种方式，JVM允许我们在对象被销毁后，做一些我们自己想做的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt; Person&gt; rq=<span class="keyword">new</span> ReferenceQueue&lt;Person&gt;();</span><br><span class="line">Person person=<span class="keyword">new</span> Person();</span><br><span class="line">SoftReference sr=<span class="keyword">new</span> SoftReference(person,rq);</span><br></pre></td></tr></table></figure><p><strong>Reference</strong></p><p>Reference是SoftReference，WeakReference,PhantomReference类的父类，其内部通过一个next字段来构建了一个Reference类型的单向列表，而queue字段存放了引用对象对应的引用队列，若在Reference的子类构造函数中没有指定，则默认关联一个ReferenceQueue.NULL队列。</p><h4 id="三、垃圾回收算法"><a href="#三、垃圾回收算法" class="headerlink" title="三、垃圾回收算法"></a>三、垃圾回收算法</h4><blockquote><p>GC主要完成三项任务：<strong>分配内存</strong>，<strong>确保被引用的对象的内存不被错误的回收</strong>以及<strong>回收不再被引用的对象的内存空间</strong></p></blockquote><ol><li>标记-清除</li><li>标记-复制</li><li>标记-整理</li><li>分代回收</li><li>增量收集  不用stop the world</li></ol><p>判断对象存活：1.引用计数法;<strong>2:对象可达性分析</strong></p><p><strong>简单的解释一下垃圾回收</strong></p><p>Java 垃圾回收机制最基本的做法是分代回收。</p><p>内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的<strong>分配</strong>是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中<strong>。对于不同的世代可以使用不同的垃圾回收算法</strong>。</p><p>进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.</p><p>四、System.gc()：通知GC开始工作,但是GC真正开始的时间不确定.</p><p>五、JVM的平台五无关性</p><p>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p><h4 id="六、类加载机制"><a href="#六、类加载机制" class="headerlink" title="六、类加载机制"></a>六、类加载机制</h4><p><img src="/2019/10/15/java-note/20151022160855857-1583834528535.jpg" alt="类加载生命周期图"></p><p><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/dd864140130/article/details/49817357" target="_blank" rel="noopener">深入理解JVM加载器</a>。</p><p>初始化阶段  以下情况才会对类立即初始化：</p><ol><li>使用new关键字实例化对象、访问或者设置一个类的静态字段（==被final修饰、编译器优化时已经放入常量池的例外==）、调用类方法，都会初始化该静态字段或者静态方法所在的类。</li><li>初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。</li><li>使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。·</li><li>虚拟机启动时，用户会先初始化要执行的主类（含有main）</li><li>jdk 1.7后，如果<code>java.lang.invoke.MethodHandle</code>的实例最后对应的解析结果是 <code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>方法句柄，并且这个方法所在类没有初始化，则先初始化。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>一、XML解析的几种方式和特点</strong></p><p>DOM,SAX,PULL三种解析方式:</p><ul><li>DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机</li><li>SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。</li><li>PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。</li></ul><p>二、版本特性</p><blockquote><p>JDK 1.7特性</p></blockquote><p> JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 </p><ul><li><code>try-with-resource</code>语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。</li><li><code>Fork-Join</code> 池某种程度上实现 Java 版的 Map-reduce。</li><li>允许 Switch 中有 String 变量和文本。</li><li>菱形操作符(&lt;&gt;)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码</li></ul><blockquote><p>JDK 1.8特性</p></blockquote><p>java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：</p><ul><li><strong>Lambda 表达式</strong>，允许像对象一样传递匿名函数</li><li><strong>Stream API</strong>，充分利用现代多核 CPU，可以写出很简洁的代码</li><li><strong>Date 与 Time API</strong>，最终，有一个稳定、简单的日期和时间库可供你使用</li><li><strong>扩展方法</strong>，现在，接口中可以有静态、默认方法。</li><li><strong>重复注解</strong>，现在你可以将相同的注解在同一类型上使用多次。</li></ul><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h3><blockquote><p>代理类在程序运行时创建的代理方式被称为动态代理。代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。方法实现前后加入对应的公共功能</p></blockquote><p><strong>基于接口</strong>·</p><p><code>jdk</code>的动态代理时基于<code>Java</code>的反射机制来实现的，是<code>Java</code>原生的一种代理方式。他的实现原理就是让<strong>代理类和被代理类实现同一接口，代理类持有目标对象来达到方法拦截的作用</strong>。</p><p>通过接口的方式有两个弊端:</p><ol><li><p>一个就是必须保证被代理类有接口</p></li><li><p>另一个就是如果相对被代理类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明。接口继承的是<code>java.lang.reflect.InvocationHandler</code>;</p></li></ol><p><strong>基于继承</strong></p><p><code>cglib</code>动态代理使用的<code>ASM</code>这个非常强大的<code>Java</code>字节码生成框架来生成<code>class</code>，比<code>jdk</code>动态代理<code>ide</code>效率高。基于继承的实现动态代理，<strong>可以直接通过<code>super</code>关键字来调用被代理类的方法.</strong></p><p><strong>子类可以调用父类的方法</strong></p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a><strong>AOP</strong></h3><blockquote><p>面向切面编程。（Aspect-Oriented Programming） 。AOP可以说是对OOP的补充和完善。</p><p>面向对象编程将程序分解成各个层次的对象，面向切面编程将程序运行过程分解成各个切面。</p><p><code>AOP</code>从<strong>程序运行</strong>角度考虑程序的结构，提取业务处理过程的切面，<strong><code>oop</code>是静态的抽象，aop是动态的抽象， 是对应用执行过程中的步骤进行抽象，从而获得步骤之间的逻辑划分。</strong></p></blockquote><p><code>OOP</code>引入<strong>封装</strong>、 <strong>继承</strong>和<strong>多态</strong>性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。</p><p>实现<code>AOP</code>的技术，主要分为两大类：</p><p> 一是采用<strong>动态代理</strong>技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；</p><p>二是采用<strong>静态织入</strong> 的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码，属于静态代理。</p><ol><li>面向切面编程提供<strong>声明式事务管理</strong></li><li><code>spring</code><strong>支持用户自定义的切面</strong>， </li></ol><p><strong><code>AOP</code>框架具有的两个特征：</strong></p><ol><li><strong>各个步骤之间的良好隔离性</strong></li><li><strong>源代码无关性</strong></li></ol><p><strong><code>springAOP</code>的具体加载步骤：</strong><br>　　1、当 spring 容器启动的时候，加载了 spring 的配置文件<br>　　2、为配置文件中的所有 <code>bean</code>创建对象<br>　　3、spring 容器会解析 <code>aop:config</code>的配置<br>　　　　解析切入点表达式，用<strong>切入点表达式</strong>和纳入 <code>spring</code>容器中的 <code>bean</code>做匹配<br> 　　　　如果匹配成功，则会为该 <code>bean</code>创建代理对象，<strong>代理对象的方法=目标方法+通知</strong><br> 　　　　如果匹配不成功，不会创建代理对象<br>　　4、在客户端利用<code>context.getBean()</code>获取对象时，如果该对象有代理对象，则返回代理对象；如果没有，则返回目标对象<br><strong>说明：如果目标类没有实现接口，则 spring 容器会采用 cglib 的方式产生代理对象，如果实现了接口，则会采用 jdk 的方式</strong></p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a><strong>IOC</strong></h3><p>控制反转也叫依赖注入。<strong>IOC利用java反射机制，AOP利用代理模式</strong>。</p><blockquote><p>当某个角色需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在spring中创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者因此也称为依赖注入。spring以动态灵活的方式来管理对象 ， 注入的两种方式，设置注入和构造注入。</p><p><strong>设置注入的优点：直观，自然</strong><br><strong>构造注入的优点：可以在构造器中决定依赖关系的顺序。</strong></p></blockquote><p><code>IOC</code>概念看似很抽象，但是很容易理解。 说简单点就是将<strong>对象交给容器管理</strong>，你只需要在<code>spring</code>配置文件中配置对应的<code>bean</code>以及设置相关的属性，让<code>spring</code>容器来生成类的实例对象以及管理对象。在<code>spring</code>容器启动的时候，<code>spring</code>会把你在配置文件中配置的<code>bean</code>都初始化好，然后在你需要调用的时候，就把它已经初始化好的那些<code>bean</code>分配给你需要调用这些<code>bean</code>的类</p><blockquote><p>XML–—读取––-&gt; resoure—-解析——-&gt;BeanDefinition––—注入––––-&gt;BeanFactory</p></blockquote><p><a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">Spring IOC 容器源码分析</a></p><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a><strong>Bean的生命周期</strong></h3><p>可以简述为以下九步</p><ol><li>实例化<code>bean</code>对象(通过构造方法或者工厂方法)</li><li>设置对象属性(<code>setter</code>等)（依赖注入）</li><li>如果<code>Bean</code>实现了<code>BeanNameAware</code>接口，工厂调用<code>Bean</code>的<code>setBeanName</code>()方法传递<code>Bean</code>的<code>ID</code>。（和下面的一条均属于检查<code>Aware</code>接口）</li><li>如果<code>Bean</code>实现了<code>BeanFactoryAware</code>接口，工厂调用<code>setBeanFactory</code>()方法传入工厂自身</li><li>将<code>Bean</code>实例传递给<code>Bean</code>的前置处理器的<code>postProcessBeforeInitialization(Object bean, String beanname</code>)方法</li><li>调用<code>Bean</code>的初始化方法</li><li>将<code>Bean</code>实例传递给<code>Bean</code>的后置处理器的p<code>ostProcessAfterInitialization(Object bean, String beanname)</code>方法</li><li>使用<code>Bean</code>容器关闭之前，调用Bean的销毁方法</li></ol><h3 id="Bean的单例和多例模式的使用条件"><a href="#Bean的单例和多例模式的使用条件" class="headerlink" title="Bean的单例和多例模式的使用条件"></a><strong>Bean的单例和多例模式的使用条件</strong></h3><p><strong><code>spring</code>生成的对象默认都是单例(<code>singleton</code>)的.可以通过<code>scope</code>改成多例</strong>. 对象在整个系统中只有一份，所有的请求都用一个对象来处理，<em>如service和dao层的对象一般是单例的。</em></p><p>为什么使用单例：因为没有必要每个请求都新建一个对象的时候，因为这样会浪费CPU和内存。</p><p><code>prototype</code>多例模式：对象在整个系统中可以有多个实例，每个请求用一个新的对象来处理，如<code>action</code>。</p><p>为什么使用多例：<strong>防止并发问题</strong>；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象的状态改变导致了对象对另一个请求做了错误的处理；</p><h3 id="Spring-MVC-的处理过程"><a href="#Spring-MVC-的处理过程" class="headerlink" title="Spring MVC 的处理过程"></a><strong>Spring MVC 的处理过程</strong></h3><p>（1）客户端通过<code>url</code>发送请求<br>（2-3）核心控制器<code>Dispatcher Servlet</code>接收到请求，通过系统或自定义的映射器配置找到对应的<code>handler</code>，并将url映射的控制器<code>controller</code>返回给核心控制器。<br>（4）通过核心控制器找到系统或默认的适配器<br>（5-7）由找到的适配器，调用实现对应接口的处理器，并将结果返回给适配器，结果中包含数据模型和视图对象，再由适配器返回给核心控制器<br>（8-9）核心控制器将获取的数据和视图结合的对象传递给视图解析器，获取解析得到的结果，并由视图解析器响应给核心控制器<br>（10）核心控制器将结果返回给客户端</p><p><strong>spring面试真题</strong></p><blockquote><p>5.1SSM各层关系<br>5.2 为什么注入的是接口(接口多继承)<br>5.3 Spring的优点<br>1.降低了组件之间的耦合性 ，实现了软件各层之间的解耦<br>2.可以使用容易提供的众多服务，如事务管理，消息服务等<br>3.容器提供单例模式支持<br>4.容器提供了AOP技术，利用它很容易实现如权限拦截，运行期监控等功能<br>5.容器提供了众多的辅助类，能加快应用的开发<br>6.spring对于主流的应用框架提供了集成支持，如hibernate，JPA，Struts等<br>7.spring属于低侵入式设计，代码的污染极低<br>8.独立于各种应用服务器<br>9.spring的DI机制降低了业务对象替换的复杂性<br>10.Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可以自由选择spring的部分或全部</p></blockquote><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="[https://github.com/xbox1994/Java-Interview/blob/master/MD/%E6%95%B0%E6%8D%AE%E5%BA%93-Redis.md](https://github.com/xbox1994/Java-Interview/blob/master/MD/数据库-Redis.md)">redi知识集合</a></p><blockquote><p>Redis 中只包含“键”和“值”两部分，只能通过“键”来查询“值”。正是因为这样简单的存储结构，也让 Redis 的读写效率非常高</p><p>数据是存储在内存中的。尽管它经常被用作内存数据库，但是，它也支持将数据存储在硬盘中</p></blockquote><p><strong>解决高并发和高性能的问题</strong></p><p>高性能：直接处理缓存也就是处理内存很快</p><p>高并发：直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中 去，这样用户的一部分请求会直接到缓存这里而不用经过数据库</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>建议看数据结构部分：<a href="https://redisbook.readthedocs.io/en/latest/index.html#id3" target="_blank" rel="noopener">redis设计与实现</a></p><ol><li><p><strong>String</strong><br>常用命令: <code>set</code>,<code>get</code>,<code>decr</code>,<code>incr</code>,<code>mget</code>等。 <code>String</code>数据结构是简单的<code>key-value</code>类型，<code>value</code>其实不仅可以是<code>String</code>，也可以是数字。 常规<code>key-value</code>缓存应用； 常规计数：微博数，粉丝数等。</p></li><li><p><strong>Hash</strong><br>常用命令： <code>hget</code>,<code>hset</code>,<code>hgetall</code>等。<br><code>Hash</code>是一个 <code>string</code>类型的 <code>ﬁeld</code>和 <code>value</code>的映射表，<code>hash</code>特别适合用于<strong>存储对象</strong>，后续操作的时候，你可以直接仅 仅修改这个对象中的某个字段的值。 比如我们可以Hash数据结构来存储用户信息，商品信息等等。比如下面我就用 <code>hash</code>类型存放了我本人的一些信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key=JavaUser293847 value=&#123; “id”: 1, “name”: “SnailClimb”, “age”: 22, “location”: “Wuhan, Hubei” &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>List</strong><br>常用命令: <code>lpush</code>,<code>rpush</code>,<code>lpop</code>,<code>rpop</code>,<code>lrange</code>等list 就是链表，<code>Redis list</code> 的应用场景非常多，也是<code>Redis</code>重要的数据结构之一，比如微博的关注列表，粉丝列表， 消息列表等功能都可以用<code>Redis</code>的 <code>list</code>结构来实现。<code>Redis list</code>的实现为<strong>一个双向链表</strong>，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。<br>另外可以通过 <code>lrange</code>命令，就是从某个元素开始读取多少个元素，可以基于 <code>list</code>实现分页查询，这个很棒的一个功 能，<strong>基于 redis 实现简单的高性能分页</strong>，可以做类似微博那种下拉不断分页的东西（一页一页的往下走），性能高。</p></li><li><p><strong>Set</strong><br>常用命令： <code>sadd</code>,<code>spop</code>,<code>smembers</code>,<code>sunion</code>等 set 对外提供的功能与list类似是一个列表的功能，特殊之处在于 set 是可以<strong>自动排重</strong>的。<br>当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了<strong>判断某个成员是否在 一个set集合内的重要接口</strong>，这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。 比如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis可以非常 方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程，具体命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sinterstore key1 key2 key3 将交集存在key1内</span><br></pre></td></tr></table></figure></li><li><p><strong>Sorted Set</strong><br>常用命令： <code>zadd</code>,<code>zrange</code>,<code>zrem</code>,<code>zcard</code>等 和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按<code>score</code>进行有序排列。<br>举例： 在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维 度的消息排行榜）等信息，适合使用 Redis 中的 SortedSet 结构进行存储。</p></li></ol><h3 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a><strong>底层结构</strong></h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>在Redis内部，String类型通过<code>int</code>、<code>SDS</code>作为结构存储,int用来存放整型数据，<code>sds</code>存放字 节/字符串和浮点型数据。</p><h4 id="list"><a href="#list" class="headerlink" title="list"></a><strong>list</strong></h4><p>压缩列表和双向循环链表</p><blockquote><p>Redis3.2之后，采用的一种叫<code>quicklist</code>的数据结构来存储<code>list</code>，列表的底层都由<code>quicklist</code>实现。</p></blockquote><p>当列表中存储的数据量比较小的时候，列表就可以采用压缩列表的方式实现。具体需要同时满足下面两个条件：</p><ul><li>列表中保存的单个数据（有可能是字符串类型的）小于 64 字节；</li><li>列表中数据个数少于 512 个。</li></ul><p>Redis 实现了自己的双端链表结构。</p><ul><li>双端链表主要有两个作用：<ul><li>作为 Redis 列表类型的底层实现之一；</li><li>作为通用数据结构，被其他功能模块所使用；（事务模块保存命令、服务器模块、订阅发送模块保存客户端、事件模块）</li></ul></li><li>双端链表及其节点的性能特性如下：<ul><li>节点带有前驱和后继指针，访问前驱节点和后继节点的复杂度为 O(1) ，并且对链表的迭代可以在从表头到表尾和从表尾到表头两个方向进行；</li><li>链表带有指向表头和表尾的指针，因此对表头和表尾进行处理的复杂度为 O(1)O(1) ；</li><li>链表带有记录节点数量的属性，所以可以在 O(1)O(1) 复杂度内返回链表的节点数量（长度）；</li></ul></li></ul><p><code>quicklist</code><strong>仍然是一个双向链表，只是列表的每个节点都是一个ziplist，其实就是linkedlist和ziplist的结合，quicklist 中每个节点ziplist都能够存储多个数据元素</strong></p><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a><strong>hash</strong></h4><p>压缩列表和字典（散列表）（渐进式扩容缩容策略、链地址法）</p><p>同样，只有当存储的数据量比较小的情况下，Redis 才使用压缩列表来实现字典类型。具体需要满足两个条件：</p><ul><li>字典中保存的键和值的大小都要小于 64 字节；</li><li>字典中键值对的个数要小于 512 个。</li></ul><blockquote><p>注意 <code>dict</code> 类型使用了两个指针，分别指向两个哈希表。</p><p>其中， 0 号哈希表（<code>ht[0]</code>）是字典主要使用的哈希表， 而 1 号哈希表（<code>ht[1]</code>）则只有在程序对 0 号哈希表进行 rehash 时才使用。</p></blockquote><p>为了在字典的键值对不断增多的情况下保持良好的性能， 字典需要对所使用的哈希表（<code>ht[0]</code>）进行 rehash 操作： 在不修改任何键值对的情况下，对哈希表进行扩容， 尽量将比率维持在 1:1 左右。</p><p><code>dictAdd</code> 在每次向字典添加新键值对之前， 都会对哈希表 <code>ht[0]</code> 进行检查， 对于 <code>ht[0]</code> 的 <code>size</code> 和 <code>used</code> 属性， 如果它们之间的比率 <code>ratio = used / size</code> 满足以下任何一个条件的话，rehash 过程就会被激活：</p><ol><li>自然 rehash ： <code>ratio &gt;= 1</code> ，且变量 <code>dict_can_resize</code> 为真。（后台持久化时为false）</li><li>强制 rehash ： <code>ratio</code> 大于变量 <code>dict_force_resize_ratio</code> （目前版本中， <code>dict_force_resize_ratio</code> 的值为 <code>5</code> ）。</li></ol><p>rehash执行过程（rehash后的大小至少为原来的两倍）</p><ol><li>创建一个比 <code>ht[0]-&gt;table</code> 更大的 <code>ht[1]-&gt;table</code> ；</li><li>将 <code>ht[0]-&gt;table</code> 中的所有键值对迁移到 <code>ht[1]-&gt;table</code> ；</li><li>将原有 <code>ht[0]</code> 的数据清空，并将 <code>ht[1]</code> 替换为新的 <code>ht[0]</code> ；</li></ol><p>字典的缩容</p><p>在默认情况下， <code>REDIS_HT_MINFILL</code> 的值为 <code>10</code> ， 也即是说， 当字典的填充率低于 10% 时， 程序就可以对这个字典进行收缩操作了。</p><p>字典收缩和字典扩展的一个区别是：</p><ul><li>字典的扩展操作是自动触发的（不管是自动扩展还是强制扩展）；</li><li>而字典的收缩操作则是由程序手动执行。</li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a><strong>set</strong></h4><p>一种是基于有序数组(整数集合)和散列表。</p><p>当要存储的数据，同时满足下面这样两个条件的时候，Redis 就采用有序数组，来实现集合这种数据类型。</p><ul><li>存储的数据都是整数；</li><li>存储的数据元素个数不超过 512 个。</li></ul><p>添加新元素时，如果 <code>intsetAdd</code> 发现新元素，不能用现有的编码方式来保存，便会将升级集合和添加新元素的任务转交给 <code>intsetUpgradeAndAdd</code> 来完成：</p><p><code>intsetUpgradeAndAdd</code> 需要完成以下几个任务：</p><ol><li>对新元素进行检测，看保存这个新元素需要什么类型的编码；</li><li>将集合 <code>encoding</code> 属性的值设置为新编码类型，并根据新编码类型，对整个 <code>contents</code> 数组进行内存重分配。</li><li>调整 <code>contents</code> 数组内原有元素在内存中的排列方式，从旧编码调整为新编码。</li><li>将新元素添加到集合中。</li></ol><p><strong>升级</strong></p><blockquote><p>第一，从较短整数到较长整数的转换，并不会更改元素里面的值。</p><p>第二，集合编码元素的方式，由元素中长度最大的那个值来决定</p></blockquote><p>inset(有序数组)，set本身是无序的</p><ul><li>Intset 用于有序、无重复地保存多个整数值，会根据元素的值，自动选择该用什么长度的整数类型来保存元素。</li><li>当一个位长度更长的整数值添加到 intset 时，需要对 intset 进行升级，新 intset 中每个元素的位长度，会等于新添加值的位长度，但原有元素的值不变。</li><li>升级会引起整个 intset 进行内存重分配，并移动集合中的所有元素，这个操作的复杂度为 O(N） 。</li><li><strong>Intset</strong> <strong>只支持升级，不支持降级。</strong></li><li>Intset 是有序的，程序使用<strong>二分查找</strong>算法来实现查找操作，复杂度为 O(lgN)O(lg⁡N) 。</li></ul><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a><strong>zset</strong></h4><p>跳表和压缩列表</p><p>当数据量比较小的时候，Redis 会用压缩列表来实现有序集合。</p><ul><li>所有数据的大小都要小于 <code>64</code>字节；</li><li>元素个数要小于 <code>128</code>个。</li></ul><ul><li>跳跃表是一种随机化数据结构，查找、添加、删除操作都可以在对数期望时间下完成。</li><li>跳跃表目前在 Redis 的唯一作用，就是作为有序集类型的底层数据结构（之一，另一个构成有序集的结构是字典）。</li><li>为了满足自身的需求，Redis 基于 William Pugh 论文中描述的跳跃表进行了修改，包括：<ol><li><code>score</code> 值可重复。</li><li>对比一个元素需要同时检查它的 <code>score</code> 和 <code>memeber</code> 。在Redis的skiplist实现中，数据本身的内容唯一标识这份数据，而不是由key来唯一标识。另外，当多个元素分数相同的时候，还需要根据数据内容来进字典排序。</li><li>每个节点带有高度为 <code>1</code> 层的后退指针，用于从表尾方向向表头方向迭代。·</li></ol></li></ul><h4 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h4><p><img src="/2019/10/15/java-note/image-20200226010900804.png" alt="image-20200226010900804"></p><table><thead><tr><th align="left">域</th><th align="left">长度/类型</th><th align="left">域的值</th></tr></thead><tbody><tr><td align="left"><code>zlbytes</code></td><td align="left"><code>uint32_t</code></td><td align="left">整个 ziplist 占用的内存字节数，对 ziplist 进行内存重分配，或者计算末端时使用。</td></tr><tr><td align="left"><code>zltail</code></td><td align="left"><code>uint32_t</code></td><td align="left">到达 ziplist 表尾节点的偏移量。 通过这个偏移量，可以在不遍历整个 ziplist 的前提下，弹出表尾节点。</td></tr><tr><td align="left"><code>zllen</code></td><td align="left"><code>uint16_t</code></td><td align="left">ziplist 中节点的数量。 当这个值小于 <code>UINT16_MAX</code> （<code>65535</code>）时，这个值就是 ziplist 中节点的数量； 当这个值等于 <code>UINT16_MAX</code> 时，节点的数量需要遍历整个 ziplist 才能计算得出。</td></tr><tr><td align="left"><code>entryX</code></td><td align="left"><code>?</code></td><td align="left">ziplist 所保存的节点，各个节点的长度根据内容而定。</td></tr><tr><td align="left"><code>zlend</code></td><td align="left"><code>uint8_t</code></td><td align="left"><code>255</code> 的二进制值 <code>1111 1111</code> （<code>UINT8_MAX</code>） ，用于标记 ziplist 的末端。</td></tr></tbody></table><p><strong>节点entry结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">area        |&lt;------------------- entry --------------------&gt;|</span><br><span class="line"></span><br><span class="line">            +------------------+----------+--------+---------+</span><br><span class="line">component   | pre_entry_length | encoding | length | content |</span><br><span class="line">            +------------------+----------+--------+---------+</span><br></pre></td></tr></table></figure><p><strong>pre_entry_length</strong></p><p><code>pre_entry_length</code> 记录了前一个节点的长度，通过这个值，可以进行指针计算，从而跳转到上一个节点。</p><p>根据编码方式的不同， <code>pre_entry_length</code> 域可能占用 <code>1</code> 字节或者 <code>5</code> 字节：</p><ul><li><code>1</code> 字节：如果前一节点的长度小于 <code>254</code> 字节，便使用一个字节保存它的值。</li><li><code>5</code> 字节：如果前一节点的长度大于等于 <code>254</code> 字节，那么将第 <code>1</code> 个字节的值设为 <code>254</code> ，然后用接下来的 <code>4</code> 个字节保存实际长度。</li></ul><p><strong>encoding 和 length</strong></p><p><code>encoding</code> 和 <code>length</code> 两部分一起决定了 <code>content</code> 部分所保存的数据的类型（以及长度）。</p><p>其中， <code>encoding</code> 域的长度为两个 bit ， 它的值可以是 <code>00</code> 、 <code>01</code> 、 <code>10</code> 和 <code>11</code> ：</p><ul><li><code>00</code> 、 <code>01</code> 和 <code>10</code> 表示 <code>content</code> 部分保存着字符数组。</li><li><code>11</code> 表示 <code>content</code> 部分保存着整数。</li></ul><p><strong>content</strong></p><p><code>content</code> 部分保存着节点的内容，类型和长度由 <code>encoding</code> 和 <code>length</code> 决定。</p><blockquote><p><strong>添加和删除 ziplist 节点有可能会引起连锁更新，因此，添加和删除操作的最坏复杂度为 O(N2) ，不过，因为连锁更新的出现概率并不高，所以一般可以将添加和删除操作的复杂度视为 O(N)) 。</strong></p></blockquote><p>操作原理</p><ul><li>在最后添加一个节点</li><li>在节点间添加一个节点 </li></ul><h4 id="特殊数据结构"><a href="#特殊数据结构" class="headerlink" title="特殊数据结构"></a>特殊数据结构</h4><h5 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h5><p>用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><h5 id="Geo"><a href="#Geo" class="headerlink" title="Geo"></a>Geo</h5><p>这个功能可以将用户给定的地理位置信息储存起来， 并对这些信息进行操作</p><h5 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h5><ol><li>一个Redis client发布消息,其他多个redis client订阅消息,发布的消息“即发即失”,</li><li>redis不会持久保存发布的消息;</li><li>消息订阅者也将只能得到订阅之后的消息,通道中此前的消息将无从获得。</li></ol><p>例如：哨兵机制推送活跃消息</p><p>注意：在消费者下线的情况下，生产的消息会丢失</p><p> <strong>redis过期时间</strong></p><blockquote><p>有些数据是有时间限制的例如一些登陆信息，尤其是短信验证码都是有时间限制的。<br>定期删除+惰性删除<br><strong>定期删除</strong>要点：默认每隔1000ms就==随机抽取==一些设置了过期时间的key。<br><strong>惰性删除</strong>：定期删除会导致很多过期的key到了时间并没有被删除掉。假如过期的key靠定期删除没有删除掉，还停留在内存中，除非你的系统去查一下那个key，才会被redis删除</p></blockquote><h3 id="redis的持久化机制"><a href="#redis的持久化机制" class="headerlink" title="redis的持久化机制"></a>redis的持久化机制</h3><p><strong>1.RDB</strong></p><blockquote><p>BGSAVE、SAVE、 save 60 10000 、SHUTDOWN  、SYNC</p><p>快照时间：1.配置、2.用户调用save/BGSAVE、3.flushALL、4.主从复制初始化时</p><p>BGSAVE原理：fork and cow</p></blockquote><p>也就是<strong>快照持久化</strong>,通过创建快照来获得存储在内存里面的数据在某个时间节点上的副本（生成<code>dump.rdb</code>文件）。redis创建快照后可以对快照进行备份，可以将快照复制到其他服务器从而创建出具有相同数据的服务器副本（<strong>redis主从结构，主要用来提高redis的性能</strong>），还可以将快照留在原地以便重启服务器的时候使用。<em>注意：如果系统发生崩溃，会丢失最近快照之后的所有数据</em></p><p><strong>场景</strong></p><ul><li>日志聚合计算</li><li>大数据</li></ul><p>缺点：<br>1 数据的<strong>完整性和一致性</strong>不高，因为RDB可能在最后一次备份时宕机了。<br>2 备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。</p><p><strong>2.AOF只追加文件</strong></p><blockquote><p>appendonly  yes</p><p>appendfsync everysec  #每秒钟同步一次，显示地将多个写命令同步到硬盘</p><p>appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速</p><p>appendfsync no           #让操作系统决定何时进行同步</p></blockquote><p>与快照相比AOF的<strong>实时性</strong>更好，开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件</p><p>AOF文件的保存位置和RDB文件的位置相同，都是通过<code>dir</code>参数设置的，默认的文件名是<code>appendonly.aof</code>。</p><p><strong>优化</strong></p><p>在执行 <code>BGREWRITEAOF</code>命令时，Redis 服务器会维护一个 <strong>AOF 重写缓冲区</strong>，该缓冲区会在子进程创建新AOF文件期间，<strong>记录服务器执行的所有写命令</strong>。当子进程完成创建新AOF文件的工作之后，服务器会将重写缓冲区中的所有内容追加到新AOF文件的末尾，使得新旧两个AOF文件所保存的数据库状态一致。最后，服务器用新的AOF文件替换旧的AOF文件，以此来完成AOF文件重写操作</p><blockquote><p>设置 auto-aof-rewrite-percentage 和auto-aof-rewrite-min-size</p></blockquote><p>恢复时redis-check-aof –fix appendonly.aof 校验文件完整性,修复破碎文件</p><h3 id="缓存雪崩和缓存穿透"><a href="#缓存雪崩和缓存穿透" class="headerlink" title="缓存雪崩和缓存穿透"></a><strong>缓存雪崩和缓存穿透</strong></h3><p><strong>缓存穿透</strong>：一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p><strong>解决办法</strong>： </p><ul><li>有很多种方法可以有效地解决缓存穿透问题，常见的则是采用<strong>布隆过滤器</strong>，将所有可能存在的数据哈希到一个足够大的<code>bitmap</code>中，一个一定不存在的数据会被这个<code>bitmap</code>拦截掉，从而避免了对底层存储系统的查询压力。</li><li>另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数 据不存 在，还是系统故障），我们仍然把这个<strong>空结果进行缓存</strong>（缓存过程上锁），但它的过期时间会很短，长不超过五分钟。</li></ul><p><strong>缓存雪崩</strong>：缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p><strong>有哪些解决办法？</strong></p><ul><li>事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略。</li><li>事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL崩掉</li><li>事后：利用 redis 持久化机制保存的数据尽快恢复缓存</li></ul><p><strong>其他方法</strong></p><p>1，在设置Redis键的过期时间时，加上一个随机数，这样可以避免。<br>2，部署分布式的Redis服务，当一个Redis服务器挂掉了之后，进行故障转移。</p><p><strong>缓存击穿</strong>“:  “就是说某个key非常热点，访问非常频繁，处于集中式高并发访问的情况，当这个 key 在失效的瞬间，大量的请求就击穿了缓存，直接请求数据库</p><p><strong>解决方法</strong></p><ul><li>可以将热点数据设置为永远不过期；</li><li>基于 redis or zookeeper 实现互斥锁，等待第一个请求构建完缓存之后，再释放锁，进而其它请求才能通过该 key 访问数据</li></ul><h3 id="热点key"><a href="#热点key" class="headerlink" title="热点key"></a>热点key</h3><p>缓存中的某些Key(可能对应用与某个促销商品)对应的value存储在集群中一台机器，使得所有流量涌向同一机器，成为系统的瓶颈，该问题的挑战在于它无法通过增加机器容量来解决。</p><ol><li>客户端热点key缓存：将热点key对应value并缓存在客户端本地，并且设置一个失效时间。</li><li>将热点key分散为多个子key，然后存储到缓存集群的不同机器上，这些子key对应的value都和热点key是一样的。</li></ol><h3 id="数据库与缓存数据一致性"><a href="#数据库与缓存数据一致性" class="headerlink" title="数据库与缓存数据一致性"></a>数据库与缓存数据一致性</h3><p><a href="https://blog.kido.site/2018/11/24/db-and-cache-preface/" target="_blank" rel="noopener">数据和缓存一致性问题</a></p><p>写完数据库后是否需要马上更新缓存还是直接删除缓存？</p><p>（1）、如果写数据库的值与更新到缓存值是一样的，不需要经过任何的计算，可以马上更新缓存，但是如果对于那种写数据频繁而读数据少的场景并不合适这种解决方案，因为也许还没有查询就被删除或修改了，这样会浪费时间和资源</p><p>（2）、如果写数据库的值与更新缓存的值不一致，写入缓存中的数据需要经过几个表的关联计算后得到的结果插入缓存中，那就没有必要马上更新缓存，只有删除缓存即可，等到查询的时候在去把计算后得到的结果插入到缓存中即可。</p><p><strong>所以一般的策略是当更新数据时，先删除缓存数据，然后更新数据库，而不是更新缓存，等要查询的时候才把最新的数据更新到缓存</strong><br><img src="http://cdn.zblade.top/qiniu_img/20170903171144693.png" alt></p><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p><a href="https://www.cnblogs.com/barrywxx/p/8570821.html" target="_blank" rel="noopener">Redis线程模型</a></p><p><img src="/2019/10/15/java-note/graphviz-f0d024ca2782cbbe20e2cd1e52540d92f64b3a37.png" alt></p><p>redis 内部使用文件事件处理器 <code>file event handler</code>，这个文件事件处理器是单线程的，所以 redis 才叫做单线程的模型。它采用 <strong>IO 多路复用机制</strong>同时监听多个 socket，根据 socket 上的事件来选择对应的事件处理器进行处理。</p><p>文件事件处理器的结构包含 4 个部分：</p><ul><li>多个 socket</li><li>IO 多路复用程序</li><li>文件事件分派器</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><p>I/O <strong>多路复用程序</strong></p><p>I/O 多路复用程序可以监听多个套接字的 <code>ae.h/AE_READABLE</code> 事件和 <code>ae.h/AE_WRITABLE</code> 事件， 这两类事件和套接字操作之间的对应关系如下：</p><ul><li>当套接字变得可读时（客户端对套接字执行 <code>write</code> 操作，或者执行 <code>close</code> 操作）， 或者有新的可应答（acceptable）套接字出现时（客户端对服务器的监听套接字执行 <code>connect</code> 操作）， 套接字产生 <code>AE_READABLE</code> 事件。</li><li>当套接字变得可写时（客户端对套接字执行 <code>read</code> 操作）， 套接字产生 <code>AE_WRITABLE</code> 事件。</li></ul><p>I/O 多路复用程序允许服务器同时监听套接字的 <code>AE_READABLE</code> 事件和 <code>AE_WRITABLE</code> 事件， 如果一个套接字同时产生了这两种事件， 那么文件事件分派器会优先处理 <code>AE_READABLE</code> 事件， 等到 <code>AE_READABLE</code> 事件处理完之后， 才处理 <code>AE_WRITABLE</code> 事件。</p><blockquote><p>这也就是说， 如果一个套接字又可读又可写的话， 那么服务器将先读套接字， 后写套接字。</p></blockquote><p><strong>Redis是单线程模型为什么效率还这么高？</strong></p><ul><li>纯内存访问：数据存放在内存中，内存的响应时间大约是100纳秒，这是Redis每秒万亿级别访问的重要基础。</li><li>非阻塞I/O：Redis采用epoll做为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接，读写，关闭都转换为了时间，不在I/O上浪费过多的时间。</li><li>单线程避免了线程切换和竞态产生的消耗。</li></ul><p>Redis采用单线程模型，每条命令执行如果占用大量时间，会造成其他线程阻塞，对于Redis这种高性能服务是致命的，所以Redis是面向高速执行的数据库</p><h3 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h3><p>Redis事务有如下一些特点:</p><ul><li><p>事务中的命令序列执行的时候是原子性的,也就是说,其不会被其他客户端的命令中断. 这和传统的数据库的事务的属性是类似的.</p></li><li><p>尽管Redis事务中的命令序列是原子执行的, 但是事务中的<strong>命令序列执行可以部分成功</strong>,这种情况下,Redis事务不会执行回滚操作. 这和传统关系型数据库的事务是有区别的.</p><p><strong>redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</strong></p></li><li><p>尽管Redis有RDB和AOF两种数据持久化机制, 但是其设计目标是高效率的cache系统. <strong>Redis事务只保证将其命令序列中的操作结果提交到内存中,不保证持久化到磁盘文件</strong>. 更进一步的, Redis事务和RDB持久化机制没有任何关系, 因为RDB机制是对内存数据结构的全量的快照.由于AOF机制是一种增量持久化,所以事务中的命令序列会提交到AOF的缓存中.但是AOF机制将其缓存写入磁盘文件是由其配置的实现策略决定的,和Redis事务没有关系.</p></li></ul><p>Redis事务涉及到<code>MULTI</code>, <code>EXEC</code>, <code>DISCARD</code>, <code>WATCH</code>和<code>UNWATCH</code>这五个命令:·</p><ul><li><p>事务开始的命令是<code>MULTI</code>, 该命令返回OK提示信息. <strong>Redis不支持事务嵌套</strong>,执行多次MULTI命令和执行一次是相同的效果.嵌套执行MULTI命令时,Redis只是返回错误提示信息.</p></li><li><p><code>EXEC</code>是事务的提交命令,事务中的命令序列将被执行(或者不被执行,比如乐观锁失败等).该命令将返回响应数组,其内容对应事务中的命令执行结果.</p></li><li><p><code>WATCH</code>命令是<strong>开始执行乐观锁</strong>,该命令的参数是key(可以有多个), Redis将执行WATCH命令的客户端对象和key进行关联,如果其他客户端修改了这些key,则执行WATCH命令的客户端将被设置乐观锁失败的标志.<strong>该命令必须在事务开始前执行,即在执行MULTI命令前执行WATCH命令,否则执行无效,并返回错误提示信息.</strong></p></li><li><p><code>UNWATCH</code>命令将<strong>取消当前客户端对象的乐观锁key</strong>,该客户端对象的事务提交将变成无条件执行.</p></li><li><p><code>DISCARD</code>命令将结束事务,并且会丢弃全部的命令序列.</p><blockquote><p>需要注意的是,<code>EXEC</code>命令和<code>DISCARD</code>命令结束事务时,会调用<code>UNWATCH</code>命令,取消该客户端对象上所有的乐观锁key.</p></blockquote></li></ul><p><strong>事务的错误处理</strong></p><p>事务提交命令EXEC有可能会失败, 有三种类型的失败场景:</p><ul><li>在事务提交之前,<strong>客户端执行的命令缓存失败</strong>.比如命令的语法错误(命令参数个数错误, 不支持的命令等等).如果发生这种类型的错误,Redis将向客户端返回包含错误提示信息的响应.</li><li>事务提交时,<strong>之前缓存的命令有可能执行失败</strong>.（==但Redis不会对事务做任何回滚补救操作==）</li><li>由于<strong>乐观锁失败</strong>,事务提交时,将丢弃之前缓存的所有命令序列.</li></ul><blockquote><p>实际上，这就意味着只有程序错误才会导致Redis命令执行失败，这种错误很有可能在程序开发期间发现，一般很少在生产环境发现。<br>Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。</p></blockquote><p><strong>乐观锁机制</strong>·</p><p>关于乐观锁,需要注意的是:</p><ul><li><code>WATCH</code>命令必须在<code>MULTI</code>命令之前执行. <code>WATCH</code>命令可以执行多次.</li><li><code>WATCH</code>命令可以指定乐观锁的多个<code>key</code>,如果在事务过程中,任何一个<code>key</code>被其他客户端改变,则当前客户端的乐观锁失败,事务提交时,将丢弃所有命令序列.</li><li>多个客户端的<code>WATCH</code>命令可以指定相同的<code>key</code>.</li><li><code>WATCH</code>命令指定乐观锁后,可以接着执行<code>MULTI</code>命令进入事务上下文,也可以在<code>WATCH</code>命令和<code>MULTI</code>命令之间执行其他命令. 具体使用方式取决于场景需求,不在事务中的命令将立即被执行.</li><li>如果<code>WATCH</code>命令指定的乐观锁的<code>key</code>,被当前客户端改变,在事务提交时,乐观锁不会失败.</li><li>如果<code>WATCH</code>命令指定的乐观锁的<code>key</code>具有超时属性,并且该<code>key</code>在<code>WATCH</code>命令执行后, 在事务提交命令<code>EXEC</code>执行前超时, 则乐观锁不会失败.如果该<code>key</code>被其他客户端对象修改,则乐观锁失败.</li></ul><blockquote><p><strong>Redis事务其本质就是,以不可中断的方式依次执行缓存的命令序列,将结果保存到内存cache中</strong></p></blockquote><p><a href="https://redisbook.readthedocs.io/en/latest/feature/transaction.html" target="_blank" rel="noopener">redis事务</a></p><h3 id="无锁化编程"><a href="#无锁化编程" class="headerlink" title="无锁化编程"></a>无锁化编程</h3><p><strong>一种实现思想</strong></p><p>假如有一个上述的post请求的URI部分是个覆盖写操作，reqid=abc123789def，服务部署在多台机器，在大前端将流量转发到Nginx之后根据reqid进行哈希,</p><p>经过 <strong>Nginx负载均衡</strong> 相同reqid的请求将被转发到一台机器上，当然你可能会说如果集群的机器动态调整呢？我只能说不要考虑那么多那么充分， <strong>工程化去设计</strong> 即可。</p><p>然而转发到一台机器仍然无法保证串行处理，因为单机仍然是多线程的，我们仍然需要将所有的reqid数据放到同一个线程处理，最终保证线程内串行，这个就需要借助于线程池的管理者Disper按照 <strong>reqid哈希取模</strong> 来进行多线程的负载均衡。</p><p>经过Nginx和线程内负载均衡，最终相同的reqid都将在线程内串行处理，有效避免了锁的使用，当然这种设计可能在reqid不均衡时造成 <strong>线程饥饿</strong> ，不过高并发大量请求的情况下还是可以的。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><blockquote><p>在 <strong>分布式部署高并发场景</strong> 下，经常会遇到资源的互斥访问的问题，最有效最普遍的方法是给共享资源或者对共享资源的操作加一把锁</p><p>分布式锁是 <strong>控制分布式系统之间同步访问共享资源的一种方式</strong> ，用于在分布式系统中协调他们之间的动作。</p></blockquote><p>分布式锁一般有三种实现方式：</p><ul><li><p>基于<code>数据库</code>在数据库中创建一张表，表里包含方法名等字段，并且在方法名字段上面创建唯一索引，执行某个方法需要使用此方法名向表中插入数据，成功插入则获取锁，执行结束则删除对应的行数据释放锁</p></li><li><p>基于缓存数据库<code>Redis Redis</code>性能好并且实现方便，但是单节点的分布式锁在故障迁移时产生安全问题</p><p><em>(在redis主从架构部署时，在<code>redis-master</code>实例宕机的时候，可能导致多个客户端同时完成加锁。极端情况下不能得到保证。作者都是这吗说的)</em></p><p>Redlock是Redis的作者 Antirez 提出的集群模式分布式锁，基于N个完全独立的Redis节点实现分布式锁的高可用</p></li><li><p>基于<code>ZooKeeper ZooKeeper</code>是以 Paxos 算法为基础的分布式应用程序协调服务，为分布式应用提供一致性服务的开源组件</p></li></ul><p><a href="https://zhuanlan.zhihu.com/p/101599712" target="_blank" rel="noopener">基于Redis的分布式锁和Redlock算法·</a></p><p><a href="https://www.cnblogs.com/williamjie/p/9395659.html" target="_blank" rel="noopener">分布式锁正确实现</a></p><p><a href="http://blog.itpub.net/31545684/viewspace-2221023/" target="_blank" rel="noopener">redisession实现</a></p><p>简单应用</p><p>先拿<code>setnx</code>来争抢锁，抢到之后，再用<code>expire</code>给锁加一个过期时间防止锁忘记了释放</p><h3 id="主从-哨兵"><a href="#主从-哨兵" class="headerlink" title="主从+哨兵"></a>主从+哨兵</h3><blockquote><p>主从模式很好的解决了数据备份问题，并且由于主从服务数据几乎是一致的，因而可以将写入数据的命令发送给主机执行，而读取数据的命令发送给不同的从机执行，从而达到读写分离的目的</p><p><strong>Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。</strong></p></blockquote><p><strong>问题</strong></p><ul><li><p>同步故障</p><ul><li>复制数据延迟(不一致)   <em>—-info  replication 查看延迟偏移量—zookeeper监听回调机制实现客户端通知</em></li><li>读取过期数据(Slave 不能删除数据)    <em>—–惰性删除和定期删除—Redis3.2版本中已经解决了这个问题，在此版本中slave节点读取数据之前会检查键过期时间来决定是否返回数据的。</em></li><li>从节点故障    –<em>哨兵机制</em></li><li>主节点故障</li></ul></li><li><p>配置不一致</p><ul><li><code>maxmemory</code>不一致:丢失数据</li><li>优化参数不一致:内存不一致.</li></ul></li><li><p>避免全量复制</p><ul><li>选择小主节点(分片)、低峰期间操作.（防止第一次全量复制压力过大）</li><li>如果节点运行 id 不匹配(如主节点重启、运行 id 发送变化)，此时要执行全量复制，应该配合哨兵和集群解决.</li><li>主从复制挤压缓冲区不足产生的问题(网络中断，部分复制无法满足)，可增大复制缓冲区( <code>rel_backlog_size</code>参数).·</li></ul></li><li><p>复制风暴</p><blockquote><p>复制风暴是指大量从节点对同一主节点或者同一台机器的多个主节点，在短时间内发起全量复制的过程。此时将导致被发起的主节点或机器产生大量开销，如 ：CPU、内存、硬盘、带宽等</p><ul><li>单节点复制风暴   —<strong>首先减少主节点挂在从节点的数量，或者采用树桩复制结构。</strong></li><li>单机复制风暴  —集群和多节点部署—注意故障恢复机制，防止恢复时出现密集全量复制</li></ul></blockquote></li></ul><p><strong>主从故障如何故障转移</strong>·</p><p>a)主节点(master)故障，从节点slave-1端执行<code>slaveof no one</code>后变成新主节点；<br>b)其它的节点成为新主节点的从节点，并从新节点复制数据；<br><strong>c)需要人工干预，无法实现高可用。</strong></p><p><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置主从节点</span></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line"><span class="meta">#</span><span class="bash">配置哨兵（配置sentinel.conf）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">①每个sentinel的myid参数也要进行修改，因为sentinel之间是通过该属性来唯一区分其他sentinel节点的；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">②参数中sentinel monitor mymaster 127.0.0.1 6379 2这里的端口号6379是不用更改的，因为sentinel是通过检测主节点的状态来得知当前主节点的从节点有哪些的，因而设置为主节点的端口号即可</span></span><br><span class="line">./src/redis-sentinel sentinel-26379.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p><strong>哨兵监控机制</strong></p><p>任务1：每个哨兵节点每<code>10</code>秒会向主节点和从节点发送<code>info</code>命令获取拓扑结构图</p><p>任务2：每个哨兵节点每隔<code>2</code>秒会向<code>redis</code>数据节点的<strong>指定频道</strong>上发送该哨兵节点对于主节点的判断以及当前哨兵节点的信息，同时每个哨兵节点也会订阅该频道，来了解其它哨兵节点的信息及对主节点的判断，其实就是通过消息<code>publish</code>和<code>subscribe</code>来完成的·</p><p>任务3：每隔<code>1</code>秒每个哨兵会向主节点、从节点及其余哨兵节点发送一次<code>ping</code>命令做一次心跳检测，这个也是哨兵用来判断节点是否正常的重要依据</p><p><strong>领导者哨兵选举流程</strong></p><p>a)每个在线的哨兵节点都可以成为领导者，当它确认（比如哨兵3）主节点下线时<strong>（主观下线）</strong>，会向其它哨兵发<code>is-master-down-by-addr</code>命令，征求判断并要求将自己·设置为领导者，由领导者处理故障转移；<br>b)当其它哨兵收到此命令时，可以同意或者拒绝它成为领导者；<br>c)如果哨兵3发现自己在选举的票数大于等于<code>num(sentinels)/2+1</code>时，将成为领导者，如果没有超过，继续选举…………<strong>(客观下线)</strong>\</p><p><strong>故障转移</strong>·</p><ol><li>选择 <code>slave-priority</code> 最高的节点。</li><li>选择复制偏移量最大的节点(<code>同步数据最多</code>)。</li><li>选择 <code>runId</code>最小的节点。</li></ol><p><strong>部署建议</strong></p><p>a，sentinel节点应部署在多台物理机（线上环境）</p><p>b，至少三个且奇数个sentinel节点</p><p>c，通过以上我们知道，3个sentinel可同时监控一个主节点或多个主节点</p><p>  监听N个主节点较多时，如果sentinel出现异常，会对多个主节点有影响，同时还会造成sentinel节点产生过多的网络连接，</p><p>  <strong>一般线上建议还是， 3个sentinel监听一个主节点</strong></p><p> <strong>数据同步</strong></p><p>redis 2.8版本以上使用·命令完成同步，过程分“全量”与“部分”复制</p><ul><li>全量复制：一般用于初次复制场景（第一次建立SLAVE后全量）</li><li>部分复制：网络出现问题，从节点再次连接主节点时，主节点补发缺少的数据，每次数据增量同步</li><li>心跳：主从有长连接心跳，主节点默认每<code>10S</code>向从节点发ping命令，<code>repl-ping-slave-period</code>控制发送频率·</li></ul><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><blockquote><p>当遇到单机内存，并发和流量瓶颈等问题时，可采用Cluster方案达到负载均衡的目的。并且从另一方面讲，redis中sentinel有效的解决了故障转移的问题，也解决了主节点下线客户端无法识别新的可用节点的问题，但是如果是从节点下线了，sentinel是不会对其进行故障转移的，并且连接从节点的客户端也无法获取到新的可用从节点</p></blockquote><p> redis集群中数据是和槽（slot）挂钩的，其总共定义了<code>16384</code>个槽，所有的数据根据一致哈希算法会被映射到这<code>16384</code>个槽中的某个槽中。</p><blockquote><p>slot=CRC16（key）/16384</p></blockquote><p>数据的存储只和槽有关，并且槽的数量是一定的，由于一致hash算法·是一定的，因而将这<code>16384</code>个槽分配给无论多少个redis实例，对于确认的数据其都将被分配到确定的槽位上。redis集群通过这种方式来达到redis的高效和高可用性目的。</p><h4 id="一致性哈希和哈希槽的区别·"><a href="#一致性哈希和哈希槽的区别·" class="headerlink" title="一致性哈希和哈希槽的区别·"></a><strong>一致性哈希和哈希槽的区别</strong>·</h4><p>一致性哈希是创建虚拟节点来实现节点宕机后的数据转移并保证数据的安全性和集群的可用性的。</p><p>redis cluster<mark>是采用master节点有多个slave节点机制来保证数据的完整性的,master节点写入数据</mark>，slave节点同步数据。当master节点挂机后，slave节点会通过选举机制选举出一个节点变成master节点，实现高可用。<strong>但是这里有一点需要考虑，如果master节点存在热点缓存，某一个时刻某个key的访问急剧增高，这时该mater节点可能操劳过度而死，随后从节点选举为主节点后，同样宕机，一次类推，造成缓存雪崩</strong></p><p><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">redis.conf配置文件设置</span></span><br><span class="line">port 6379</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">cluster-config-file "nodes-6379.conf"</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile "cluster-6379.log"</span><br><span class="line">dbfilename dump-cluster-6379.rdb</span><br><span class="line">appendfilename "appendonly-cluster-6379.aof"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动配置文件</span></span><br><span class="line">./src/redis-server cluster-6379.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置槽位</span></span><br><span class="line"><span class="meta">#</span><span class="bash">先连接</span></span><br><span class="line">./src/redis-cli -p 6379</span><br><span class="line"><span class="meta">#</span><span class="bash">设置多个槽位</span></span><br><span class="line">127.0.0.1:6379&gt;cluster meet 127.0.0.1 6380</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">4fa7eac4080f0b667ffeab9b87841da49b84a6e4 127.0.0.1:6384 master - 0 1468073975551 5 connected</span><br><span class="line">cfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0 0 connected</span><br><span class="line">be9485a6a729fc98c5151374bc30277e89a461d8 127.0.0.1:6383 master - 0 1468073978579 4 connected</span><br><span class="line">40622f9e7adc8ebd77fca0de9edfe691cb8a74fb 127.0.0.1:6382 master - 0 1468073980598 3 connected</span><br><span class="line">8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 master - 0 1468073974541 1 connected</span><br><span class="line">40b8d09d44294d2e23c7c768efc8fcd153446746 127.0.0.1:6381 master - 0 1468073979589 2 connected</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加虚拟槽(类似于一致性<span class="built_in">hash</span>提供给虚拟节点)</span></span><br><span class="line">127.0.0.1:6379&gt;cluster addslots &#123;0...5461&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">...之后我们还可以分配主从节点，进一步提高可靠性</span></span><br></pre></td></tr></table></figure><p><strong>其他集群案例</strong></p><p><strong>Redis Sharding集群</strong></p><ol><li>采用<code>一致性哈希算法(consistent hashing)</code>，将key和节点name同时hashing，然后进行映射匹配，采用的算法是<code>MURMUR_HASH</code>。采用一致性哈希而不是采用简单类似哈希求模映射的主要原因是当增加或减少节点时，不会产生由于重新匹配造成的rehashing。一致性哈希只影响相邻节点key分配，影响量小。</li><li>为了避免一致性哈希只影响相邻节点造成节点分配压力，ShardedJedis会对每个Redis节点根据名字(没有，Jedis会赋予缺省名字)会<strong>虚拟化出160个虚拟节点进行散列</strong>。根据权重<code>weight</code>，也可虚拟化出160倍数的虚拟节点。用虚拟节点做映射匹配，可以在增加或减少Redis节点时，key在各Redis节点移动再分配更均匀，而不是只有相邻节点受影响。</li><li><code>ShardedJedis</code>支持<code>keyTagPattern</code>模式，即抽取key的一部分<code>keyTag</code>做<code>sharding</code>，这样通过合理命名key，可以将一组相关联的key放入同一个Redis节点，这在避免跨节点访问相关数据时很重要。</li></ol><p>特点：<code>resharding</code>·，即预先根据系统规模尽量部署好多个<code>Redis</code>实例，这些实例占用系统资源很小，一台物理机可部署多个，让他们都参与<code>sharding</code>，当需要扩容时，选中一个实例作为主节点，新加入的<code>Redis</code>节点作为从节点进行数据复制。</p><p>presharding是预先分配好足够的分片，扩容时只是将属于某一分片的原Redis实例替换成新的容量更大的Redis实例。参与sharding的分片没有改变，所以也就不存在key值从一个区转移到另一个分片区的现象，只是将属于同分片区的键值从原Redis实例同步到新Redis实例。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h3><ul><li><strong>热点数据缓存</strong></li><li><strong>会话维持session</strong></li><li><strong>分布式锁SETNX</strong></li><li><strong>表缓存</strong></li><li><strong>消息队列 list</strong>()提供阻塞方法</li><li><strong>计数器 string</strong></li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h3><p><a href="https://mp.weixin.qq.com/s/SGOyGGfA6GOzxwD5S91hLw" target="_blank" rel="noopener">关注最后的开发建议：不要用keys</a></p><p>大家知道 Redis 是单线程程序，是按照顺序执行指令的，如果说我们现在正在执行 keys 命令，那么其它指令必须等到当前的 keys 指令执行完了才可以继续，再加上 keys 操作是遍历算法，复杂度是 O (n)，乍一想就知道问题所在了，当实例中数据量过大的时候，Redis 服务可能会卡顿，其余指令可能会延时甚至超时报错….</p><p>使用：<code>scan - cursor [MATCH pattern] [COUNT count]·</code></p><blockquote><p>复杂度虽然也是 O (n)，但是它是通过游标分步进行的，不会阻塞线程；</p><p>scan指令可以无阻塞的提取出指定模式的<code>key</code>列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p></blockquote><p><a href="https://learnku.com/articles/25892" target="_blank" rel="noopener">scan用法</a></p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a><strong>IO</strong></h2><p><a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="noopener">NIO浅析</a></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>java提供的API IO模型:<code>IO NIO AIO</code></strong></p><p><strong>Java中提供的IO有关的API，在文件处理的时候，其实依赖操作系统层面的IO操作实现的。</strong>比如在Linux 2.6以后，Java中NIO和AIO都是通过<code>epoll</code>来实现的，而在Windows上，AIO是通过<code>IOCP</code>来实现的。</p><p>可以把Java中的BIO、NIO和AIO理解为是Java语言对操作系统的各种IO模型的封装。程序员在使用这些API的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了。</p><p><strong>操作系统层面的IO模型</strong>:</p><p><mark><strong>阻塞IO模型</strong>、<strong>非阻塞IO模型</strong>、<strong>IO复用模型</strong>、<strong>信号驱动IO模型</strong>以及<strong>异步IO模型</strong>。</mark></p><p><strong>阻塞式IO</strong></p><p><img src="/2019/10/15/java-note/image-20200220131637020.png" alt="image-20200220131637020"></p><p>应用进程通过系统调用 <code>recvfrom</code> 接收数据，但由于内核还未准备好数据报，应用进程就会阻塞住，直到内核准备好数据报，<code>recvfrom</code> 完成数据报复制工作，应用进程才能结束阻塞状态。</p><p><strong>非阻塞式IO</strong></p><p><img src="/2019/10/15/java-note/image-20200220131703025.png" alt="image-20200220131703025"></p><p>应用进程通过 <code>recvfrom</code> 调用不停的去和内核交互，直到内核准备好数据。如果没有准备好，内核会返回<code>error</code>，应用进程在得到<code>error</code>后，过一段时间再发送<code>recvfrom</code>请求。在两次发送请求的时间段，进程可以先做别的事情。</p><p><strong>信号驱动IO模型</strong></p><p><img src="/2019/10/15/java-note/image-20200220131836101.png" alt="image-20200220131836101"></p><p>应用进程预先向内核注册一个<strong>信号处理函数</strong>，然后用户进程返回，并且<strong>不阻塞</strong>，当内核数据准备就绪时会发送一个信号给进程，用户进程便在信号处理函数中开始把数据拷贝的用户空间中。</p><p><strong>IO复用模型</strong></p><p><img src="/2019/10/15/java-note/image-20200220131932861.png" alt="image-20200220131932861"></p><p>IO多路转接是多了一个<code>select</code>函数，多个进程的IO可以注册到同一个<code>select</code>上，当用户进程调用该<code>select</code>，<code>select</code>会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，<code>select</code>调用进程会阻塞。当任意一个IO所需的数据准备好之后，<code>select</code>调用就会返回，然后进程在通过<code>recvfrom</code>来进行数据拷贝。</p><p><strong>这里的IO复用模型，并没有向内核注册信号处理函数，所以，他并不是非阻塞的。</strong>进程在发出<code>select</code>后，要等到<code>select</code>监听的所有IO操作中至少有一个需要的数据准备好，才会有返回，并且也需要再次发送请求去进行文件的拷贝。</p><p><strong>异步IO模型</strong></p><p><strong>上述IO模型的数据拷贝过程，都是同步进行的</strong>。(信号驱动IO模型数据准备阶段式异步的但是拷贝依然是同步的)</p><p><img src="/2019/10/15/java-note/image-20200220140943855.png" alt="image-20200220140943855"></p><p>用户进程发起<code>aio_read</code>操作之后，给内核传递<strong>描述符</strong>、<strong>缓冲区指针</strong>、<strong>缓冲区大小</strong>等，告诉内核当整个操作完成时，如何通知进程，然后就立刻去做其他事情了。当内核收到<code>aio_read</code>后，会立刻返回，然后内核开始等待数据准备，数据准备好以后，直接把数据拷贝到用户控件，然后再通知进程本次IO已经完成。</p><p><img src="/2019/10/15/java-note/image-20200220141040606.png" alt="image-20200220141040606"></p><h3 id="IO、NIO、AIO区别"><a href="#IO、NIO、AIO区别" class="headerlink" title="IO、NIO、AIO区别"></a>IO、NIO、AIO区别</h3><p><strong>BIO</strong>: </p><p>用 <strong>BIO 通信模型</strong> 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在<code>while(true)</code> 循环中服务端会调用 <code>accept()</code> 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接</p><h4 id="BIO缺点"><a href="#BIO缺点" class="headerlink" title="BIO缺点"></a>BIO缺点</h4><ol><li>线程的创建和销毁成本很高，在Linux这样的操作系统中，线程本质上就是一个进程。创建和销毁都是重量级的系统函数。</li><li>线程本身占用较大内存，像Java的线程栈，一般至少分配512K～1M的空间，如果系统中的线程数过千，恐怕整个JVM的内存都会被吃掉一半。</li><li>线程的切换成本是很高的。操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用。如果线程数过高，可能执行线程切换的时间甚至会大于线程执行的时间，这时候带来的表现往往是系统load偏高、CPU sy使用率特别高（超过20%以上)，导致系统几乎陷入不可用的状态。</li><li>容易造成锯齿状的系统负载。因为系统负载是用活动线程数或CPU核心数，一旦线程数量高但外部网络环境不是很稳定，就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大。</li></ol><p><strong>NIO</strong> :</p><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p><h4 id="NIO特点"><a href="#NIO特点" class="headerlink" title="NIO特点"></a>NIO特点</h4><ul><li>事件驱动模型</li><li>避免多线程</li><li>单线程处理多任务</li><li><strong>非阻塞I/O，I/O读写不再阻塞，而是返回0</strong>（指channel操作的时候可以选择注册成非阻塞）</li><li>基于block的传输，通常比基于流的传输更高效</li><li>更高级的IO函数，zero-copy</li><li>IO多路复用大大提高了Java网络应用的可伸缩性和实用性</li></ul><p>NIO由<strong>原来的阻塞读写（占用线程）变成了单线程轮询事件</strong>，找到可以进行读写的网络描述符进行读写。除了事件的轮询是阻塞的（没有可干的事情必须要阻塞），剩余的I/O操作都是纯CPU操作，没有必要开启多线程。</p><p><strong>AIO</strong>: </p><p>也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是<strong>异步非阻塞</strong>的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是<strong>同步</strong>的。</p><p><strong>在 Windows 中 JDK 直接采用了 IOCP 的支持</strong></p><p><strong>linux中使用的epoll</strong></p><h3 id="NIO的三个主要组成部分"><a href="#NIO的三个主要组成部分" class="headerlink" title="NIO的三个主要组成部分"></a>NIO的三个主要组成部分</h3><blockquote><p><strong>Channel（通道）、Buffer（缓冲区）、Selector（选择器）</strong></p></blockquote><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a><strong>Channel</strong></h4><p>Channel（通道）：Channel是一个对象，可以通过它读取和写入数据。可以把它看做是IO中的流，不同的是：</p><ul><li>Channel是<code>双向</code>的，既可以读又可以写，而流是单向的</li><li>Channel可以进行<code>异步</code>的读写</li><li>对Channel的读写必须通过<code>buffer对象</code></li></ul><p>在Java NIO中的Channel主要有如下几种类型：</p><ul><li><code>FileChannel</code>：从文件读取数据的（没有异步模式）</li><li><code>DatagramChannel</code>：读写UDP网络协议数据</li><li><code>SocketChannel</code>：读写TCP网络协议数据</li><li><code>ServerSocketChannel</code>：可以监听TCP连接</li></ul><h5 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h5><p><strong>读取文件内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = fileChannel.read(buffer);</span><br></pre></td></tr></table></figure><p>前面我们也说了，所有的 Channel 都是和 Buffer 打交道的。</p><p><strong>写入文件内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">buffer.put(<span class="string">"随机写入一些内容到 Buffer 中"</span>.getBytes());</span><br><span class="line"><span class="comment">// Buffer 切换为读模式</span></span><br><span class="line">buffer.flip();</span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">    <span class="comment">// 将 Buffer 中的内容写入文件</span></span><br><span class="line">    fileChannel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h5><p>打开一个 TCP 连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"https://www.javadoop.com"</span>, <span class="number">80</span>));</span><br></pre></td></tr></table></figure><p>当然了，上面的这行代码等价于下面的两行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开一个通道</span></span><br><span class="line">SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line"><span class="comment">// 发起连接</span></span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"https://www.javadoop.com"</span>, <span class="number">80</span>));</span><br></pre></td></tr></table></figure><p>SocketChannel 的读写和 FileChannel 没什么区别，就是操作缓冲区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line">socketChannel.read(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据到网络连接中</span></span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">    socketChannel.write(buffer);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ServerSocketChannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h5><p>之前说 SocketChannel 是 TCP 客户端，这里说的 ServerSocketChannel 就是对应的服务端。</p><p>ServerSocketChannel 用于监听机器端口，管理从这个端口进来的 TCP 连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"><span class="comment">// 监听 8080 端口</span></span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 一旦有一个 TCP 连接进来，就对应创建一个 SocketChannel 进行处理</span></span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerSocketChannel 不和 Buffer 打交道了，因为它并不实际处理数据，它一旦接收到请求后，实例化 SocketChannel，之后在这个连接通道上的数据传递它就不管了，因为它需要继续监听端口，等待下一个连接。</p><h5 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h5><p>UDP 和 TCP 不一样，DatagramChannel 一个类处理了服务端和客户端。</p><p><strong>监听端口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">channel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>));</span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">channel.receive(buf);</span><br></pre></td></tr></table></figure><p><strong>发送数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span></span><br><span class="line">                    + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesSent = channel.send(buf, <span class="keyword">new</span> InetSocketAddress(<span class="string">"jenkov.com"</span>, <span class="number">80</span>));</span><br></pre></td></tr></table></figure><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a><strong>Buffer</strong></h4><p>Buffer是一个对象，它包含一些要写入或者读到Stream对象的。应用程序不能直接对 Channel 进行读写操作，而必须通过 Buffer 来进行，即 Channel 是通过 Buffer 来读写数据的。</p><p>在NIO中，所有的数据都是用Buffer处理的，它是NIO读写数据的中转池。<mark>Buffer实质上是一个数组，通常是一个字节数据，但也可以是其他类型的数组。但一个缓冲区不仅仅是一个数组，重要的是它提供了对<strong>数据的结构化访问，而且还可以跟踪系统的读写进程</strong>。</mark></p><p>使用 <code>Buffer</code>读写数据一zes般遵循以下四个步骤：</p><p>1.写入数据到 <code>Buffer</code>；</p><p>2.调用 <code>flip()</code>方法；</p><p>3.从 <code>Buffer</code>中读取数据；</p><p>4.调用 <code>clear()</code>方法或者<code>compact()</code> 方法。</p><p>当向 Buffer 写入数据时，Buffer 会记录下写了多少数据。一旦要读取数据，需要通过 <code>flip()</code>方法将 Buffer 从<strong>写模式切换到读模式</strong>。在读模式下，可以读取之前写入到 Buffer 的所有数据。</p><p>一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：<strong>调用 clear()</strong> 或 <strong>compact() 方法</strong>。</p><ul><li>clear() 方法会清空整个缓冲区。</li><li>compact() 方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</li></ul><p><strong>Buffer主要有如下几种</strong></p><ul><li><strong>ByteBuffer</strong></li><li><strong>CharBuffer</strong></li><li><strong>DoubleBuffer</strong></li><li><strong>FloatBuffer</strong></li><li><strong>IntBuffer</strong></li><li><strong>LongBuffer</strong></li><li><strong>ShortBuffer</strong></li></ul><h5 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h5><p> <strong>capacity</strong>，它代表这个缓冲区的容量，一旦设定就不可以更改。</p><p><strong>position</strong> 的初始值是 0，每往 Buffer 中写入一个值，position 就自动加 1，代表下一次的写入位置。读操作的时候也是类似的，每读一个值，position 就自动加 1。</p><p>从写操作模式到读操作模式切换的时候（<strong>flip</strong>），position 都会归零，这样就可以从头开始读写了。</p><p><strong>Limit</strong>：写操作模式下，limit 代表的是最大能写入的数据，这个时候 limit 等于 capacity。写结束后，切换到读模式，此时的 limit 等于 Buffer 中实际的数据大小，因为 Buffer 不一定被写满了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position; <span class="comment">// 将 limit 设置为实际写入的数据数量</span></span><br><span class="line">    position = <span class="number">0</span>; <span class="comment">// 重置 position 为 0</span></span><br><span class="line">    mark = -<span class="number">1</span>; <span class="comment">// mark 之后再说</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mark() &amp; reset()</strong></p><p>除了 position、limit、capacity 这三个基本的属性外，还有一个常用的属性就是 mark。</p><p>mark 用于临时保存 position 的值，每次调用 mark() 方法都会将 mark 设值为当前的 position，便于后续需要的时候使用。reset用于返回保存值</p><p><strong>rewind() &amp; clear() &amp; compact()</strong></p><p><strong>rewind()</strong>：会重置 position 为 0，通常用于重新从头读写 Buffer。</p><p><strong>clear()</strong>：有点重置 Buffer 的意思，相当于重新实例化了一样</p><p><strong>compact()</strong>：和 clear() 一样的是，它们都是在准备往 Buffer 填充新的数据之前调用。但是不同在于，调用这个方法以后，会先处理还没有读取的数据，也就是 position 到 limit 之间的数据（还没有读过的数据），先将这些数据移到左边，然后在这个基础上再开始写入。很明显，此时 limit 还是等于 capacity，position 指向原来数据的右边。</p><h4 id="Selector（选择器对象）"><a href="#Selector（选择器对象）" class="headerlink" title="Selector（选择器对象）"></a>Selector（选择器对象）</h4><p>首先需要了解一件事情就是线程上下文切换开销会在高并发时变得很明显，这是同步阻塞方式的低扩展性劣势·</p><blockquote><p><code>Selector</code>是一个对象，它可以注册到很多个<code>Channel</code>上，监听各个<code>Channel</code>上发生的事件，并且能够根据事件情况决定Channel读写。这样，通过一个线程管理多个<code>Channel</code>，就可以处理大量网络连接了。</p><p>有了<code>Selector</code>，我们就可以利用一个线程来处理所有的channels。线程之间的切换对操作系统来说代价是很高的，并且每个线程也会占用一定的系统资源。所以，对系统来说使用的线程越少越好。</p></blockquote><p><strong>1.如何创建一个Selector</strong></p><p>Selector 就是您注册对各种 I/O 事件兴趣的地方，而且当那些事件发生时，就是这个对象告诉您所发生的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure><p><strong>2.注册Channel到Selector</strong></p><p>为了能让<code>Channel</code>和<code>Selector</code>配合使用，我们需要把<code>Channel</code>注册到<code>Selector</code>上。通过调用 <code>channel.register（）</code>方法来实现注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">SelectionKey key =channel.register(selector,SelectionKey.OP_READ);</span><br></pre></td></tr></table></figure><p>注意，注册的Channel 必须设置成<strong>非阻塞模式</strong> 才可以,否则异步IO就无法工作，这就意味着我们不能把一个<code>FileChannel</code>注册到<code>Selector</code>，因为<code>FileChannel</code>没有非阻塞模式，但是网络编程中的SocketChannel是可以的。</p><p><strong>3.调用 <code>select()</code>方法获取通道信息。用于判断是否有我们感兴趣的事件已经发生了。</strong></p><p>事件</p><ul><li><p>SelectionKey.OP_READ</p><blockquote><p>对应 00000001，通道中有数据可以进行读取</p></blockquote></li><li><p>SelectionKey.OP_WRITE</p><blockquote><p>对应 00000100，可以往通道中写入数据</p></blockquote></li><li><p>SelectionKey.OP_CONNECT</p><blockquote><p>对应 00001000，成功建立 TCP 连接</p></blockquote></li><li><p>SelectionKey.OP_ACCEPT</p><blockquote><p>对应 00010000，接受 TCP 连接</p></blockquote></li></ul><p>我们可以同时监听一个 Channel 中的发生的多个事件，比如我们要监听 ACCEPT 和 READ 事件，那么指定参数为二进制的 000<strong>1</strong>000<strong>1</strong> 即十进制数值 17 即可。</p><p>注册方法返回值是 <strong>SelectionKey</strong> 实例，它包含了 Channel 和 Selector 信息，也包括了一个叫做 Interest Set 的信息，即我们设置的我们感兴趣的正在监听的事件集合。</p><p><strong>SelectionKey</strong></p><p>请注意对<code>register()</code>的调用的返回值是一个<code>SelectionKey</code>。 <code>SelectionKey</code>代表这个通道在此 <code>Selector</code>上注册。当某个 <code>Selector</code>通知您某个传入事件时，它是通过提供对应于该事件的 <code>SelectionKey</code>来进行的。<code>SelectionKey</code>还可以用于<strong>取消通道的注册</strong>。</p><p><code>SelectionKey</code>中包含如下属性：</p><ul><li>The interest set</li><li>The ready set</li><li>The Channel</li><li>The Selector</li><li>An attached object (optional)</li></ul><h4 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h4><p>NIO的特性</p><ol><li>IO是面向流的，NIO是面向缓冲的；</li><li>IO是阻塞的，NIO是非阻塞的；</li><li>IO是单线程的，NIO 是通过选择器来模拟多线程的；</li></ol><h5 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h5><p>内存映射文件(memory-mappedfile)能让你创建和修改那些大到无法读入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问了。将文件的一段区域映射到内存中，比传统的文件处理速度要快很多。内存映射文件它虽然最终也是要从磁盘读取数据，但是它并不需要将数据读取到OS内核缓冲区，而是直接将进程的用户私有地址空间中的一部分区域与文件对象建立起映射关系，就好像直接从内存中读、写文件一样，速度当然快了。</p><p>NIO中内存映射主要用到以下两个类：</p><ol><li>java.nio.MappedByteBuffer</li><li>java.nio.channels.FileChannel</li></ol><p>支持三种模式:<strong>只读,只写,私有</strong></p><p>内存映射文件的优点：</p><ul><li>用户进程将文件数据视为内存，因此不需要发出read()或write()系统调用。</li><li>当用户进程触摸映射的内存空间时，将自动生成页面错误，以从磁盘引入文件数据。 如果用修改映射的内存空间，受影响的页面将自动标记为脏，并随后刷新到磁盘以更新文件。</li><li>操作系统的虚拟内存子系统将执行页面的智能缓存，根据系统负载自动管理内存。</li><li>数据始终是页面对齐的，不需要缓冲区复制。</li><li>可以映射非常大的文件，而不消耗大量内存来复制数据。</li></ul><h5 id="字符和编码"><a href="#字符和编码" class="headerlink" title="字符和编码"></a>字符和编码</h5><p><strong>大部分的操作系统在I/O与文件存储方面仍是以字节为导向的，所以无论使用何种编码，Unicode或其他编码，在字节序列和字符集编码之间仍需要进行转化。</strong></p><p>在NIO中提供了两个类CharsetEncoder和CharsetDecoder来实现编码转换方案</p><p>CharsetEncoder类是一个状态编码引擎。实际上，编码器有状态意味着它们<strong>不是线程安全</strong>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nio字符集编码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testCharacter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置编码器</span></span><br><span class="line">        Charset charset = Charset.forName(<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">//获取缓冲器</span></span><br><span class="line">        CharBuffer charBuffer = CharBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        charBuffer.put(<span class="string">"skdfns史可法你00"</span>);</span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        charBuffer.flip();</span><br><span class="line">        ByteBuffer byteBuffer = charset.encode(charBuffer);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; byteBuffer.limit();i ++)&#123;</span><br><span class="line">            System.out.println(byteBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        CharBuffer charBuffer1 = charset.decode(byteBuffer);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; charBuffer1.limit();i ++)&#123;</span><br><span class="line">            System.out.println(charBuffer1.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h5><p>NIO 的非阻塞 I/O 机制是围绕 <strong>选择器</strong>和 <strong>通道</strong>构建的。 Channel 类表示服务器和客户机之间的一种通信机制。Selector 类是 Channel 的多路复用器。 Selector 类将传入客户机请求多路分用并将它们分派到各自的请求处理程序。NIO 设计背后的基石是<strong>反应器(Reactor)设计模式。</strong></p><p>Reactor负责IO事件的响应，一旦有事件发生，便广播发送给相应的handler去处理</p><p>在Reactor模式中，包含如下角色：</p><ul><li>Reactor 将I/O事件发派给对应的Handler</li><li>Acceptor 处理客户端连接请求</li><li>Handlers 执行非阻塞读/写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(NIOServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">1234</span>));</span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(selector.selectNow() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取注册的channel</span></span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            <span class="comment">//遍历所有的key</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="comment">//如果通道上有事件发生</span></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">//获取该通道</span></span><br><span class="line">                    ServerSocketChannel acceptServerSocketChannel = (ServerSocketChannel) key.channel();</span><br><span class="line">                    SocketChannel socketChannel = acceptServerSocketChannel.accept();</span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    LOGGER.info(<span class="string">"Accept request from &#123;&#125;"</span>, socketChannel.getRemoteAddress());</span><br><span class="line">                    <span class="comment">//同时将SelectionKey标记为可读，以便读取。</span></span><br><span class="line">                    SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    <span class="comment">//利用SelectionKey的attache功能绑定Acceptor 如果有事情，触发Acceptor</span></span><br><span class="line">                    <span class="comment">//Processor对象为自定义处理请求的类</span></span><br><span class="line">                    readKey.attach(<span class="keyword">new</span> Processor());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    Processor processor = (Processor) key.attachment();</span><br><span class="line">                    processor.process(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processor类中设置一个线程池来处理请求，</span></span><br><span class="line"><span class="comment"> * 这样就可以充分利用多线程的优势</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Processor.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">final</span> SelectionKey selectionKey)</span> </span>&#123;</span><br><span class="line">        service.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ByteBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">                SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="keyword">int</span> count = socketChannel.read(buffer);</span><br><span class="line">                    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        socketChannel.close();</span><br><span class="line">                        selectionKey.cancel();</span><br><span class="line">                        LOGGER.info(<span class="string">"&#123;&#125;\t Read ended"</span>, socketChannel);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(count == <span class="number">0</span>) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                LOGGER.info(<span class="string">"&#123;&#125;\t Read message &#123;&#125;"</span>, socketChannel, <span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多路复用IO为何比非阻塞IO模型的效率高是因为在非阻塞IO中，不断地询问socket状态时通过用户线程去进行的，而在多路复用IO中，轮询每个socket状态是内核在进行的，这个效率要比用户线程要高的多。</p><h5 id="文件锁定"><a href="#文件锁定" class="headerlink" title="文件锁定"></a>文件锁定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果请求的锁定范围是有效的，阻塞直至获取锁</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">lock</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"><span class="comment">// 尝试获取锁非阻塞，立刻返回结果  </span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">tryLock</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="comment">// 第一个参数：要锁定区域的起始位置  </span></span></span><br><span class="line"><span class="function"><span class="comment">// 第二个参数：要锁定区域的尺寸,  </span></span></span><br><span class="line"><span class="function"><span class="comment">// 第三个参数：true为共享锁，false为独占锁  </span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">lock</span> <span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span>  </span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">tryLock</span> <span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span></span></span><br></pre></td></tr></table></figure><h4 id="NIO-AsynchronousFileChannel异步文件通道"><a href="#NIO-AsynchronousFileChannel异步文件通道" class="headerlink" title="NIO AsynchronousFileChannel异步文件通道"></a>NIO AsynchronousFileChannel异步文件通道</h4><h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><p>Java 异步 IO 提供了两种使用方式，分别是<strong>返回 Future 实例</strong>和<strong>使用回调函数</strong>。</p><p><strong>返回Future实例</strong></p><ul><li><p><code>future.isDone();</code></p><p>判断操作是否已经完成，包括了<strong>正常完成、异常抛出、取消</strong></p></li><li><p><code>future.cancel(true);</code></p><p>取消操作，方式是中断。参数 true 说的是，即使这个任务正在执行，也会进行中断。</p></li><li><p><code>future.isCancelled();</code></p><p>是否被取消，只有在任务正常结束之前被取消，这个方法才会返回 true</p></li><li><p><code>future.get();</code></p><p>这是我们的老朋友，获取执行结果，阻塞。</p></li><li><p><code>future.get(10, TimeUnit.SECONDS);</code></p><p>如果上面的 get() 方法的阻塞你不满意，那就设置个超时时间。</p></li></ul><p><strong>提供 CompletionHandler 回调函数</strong></p><p>用法</p><blockquote><p>注意，参数上有个 attachment，虽然不常用，我们可以在各个支持的方法中传递这个参数值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousServerSocketChannel listener = AsynchronousServerSocketChannel.open().bind(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// accept 方法的第一个参数可以传递 attachment</span></span><br><span class="line">listener.accept(attachment, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      AsynchronousSocketChannel client, Object attachment)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Channel-1"><a href="#Channel-1" class="headerlink" title="Channel"></a>Channel</h4><h5 id="AsynchronousFileChannel"><a href="#AsynchronousFileChannel" class="headerlink" title="AsynchronousFileChannel"></a><strong>AsynchronousFileChannel</strong></h5><p>AIO 的读写主要也还是与 Buffer 打交道，这个与 NIO 是一脉相承的。</p><p>另外，还提供了用于将内存中的数据刷入到磁盘的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">force</span><span class="params">(<span class="keyword">boolean</span> metaData)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><blockquote><p>因为我们对文件的写操作，操作系统并不会直接针对文件操作，系统会缓存，然后周期性地刷入到磁盘。如果希望将数据及时写入到磁盘中，以免断电引发部分数据丢失，可以调用此方法。参数如果设置为 true，意味着同时也将文件属性信息更新到磁盘。</p></blockquote><p>还有，还提供了对文件的锁定功能，我们可以锁定文件的部分数据，这样可以进行排他性的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Future&lt;FileLock&gt; <span class="title">lock</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>position 是要锁定内容的开始位置，size 指示了要锁定的区域大小，shared 指示需要的是共享锁还是排他锁</p></blockquote><p><strong>注意: AsynchronousFileChannels 不属于 group</strong>。但是它们也是关联到一个线程池的，如果不指定，会使用系统默认的线程池，如果想要使用指定的线程池，可以在实例化的时候使用以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsynchronousFileChannel <span class="title">open</span><span class="params">(Path file,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           Set&lt;? extends OpenOption&gt; options,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           ExecutorService executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           FileAttribute&lt;?&gt;... attrs)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AsynchronousServerSocketChannel"><a href="#AsynchronousServerSocketChannel" class="headerlink" title="AsynchronousServerSocketChannel"></a>AsynchronousServerSocketChannel</h5><h5 id="AsynchronousSocketChannel"><a href="#AsynchronousSocketChannel" class="headerlink" title="AsynchronousSocketChannel"></a>AsynchronousSocketChannel</h5><h5 id="Asynchronous-Channel-Groups"><a href="#Asynchronous-Channel-Groups" class="headerlink" title="Asynchronous Channel Groups"></a>Asynchronous Channel Groups</h5><blockquote><p>异步 IO 一定存在一个线程池，这个线程池负责接收任务、处理 IO 事件、回调等。这个线程池就在 group 内部，group 一旦关闭，那么相应的线程池就会关闭。</p><p>AsynchronousServerSocketChannels 和     AsynchronousSocketChannels 是属于 group 的，当我们调用 AsynchronousServerSocketChannel 或 AsynchronousSocketChannel 的 open() 方法的时候，相应的 channel 就属于默认的 group，这个 group 由 JVM 自动构造并管理。</p></blockquote><p>想要使用自己定义的 group，这样可以对其中的线程进行更多的控制，使用以下几个方法即可：</p><ul><li><code>AsynchronousChannelGroup.withCachedThreadPool(ExecutorService executor, int initialSize)</code></li><li><code>AsynchronousChannelGroup.withFixedJava 非阻塞 IO 和异步 IOThreadPool(int nThreads, ThreadFactory threadFactory)</code></li><li><code>AsynchronousChannelGroup.withThreadPool(ExecutorService executor)</code></li></ul><p><a href="https://javadoop.com/post/nio-and-aio" target="_blank" rel="noopener">Java 非阻塞 IO 和异步 IO</a></p><h3 id="事件驱动模型和消息驱动模型"><a href="#事件驱动模型和消息驱动模型" class="headerlink" title="事件驱动模型和消息驱动模型"></a>事件驱动模型和消息驱动模型</h3><p>事件驱驱动架构由三个基本组件构成，事件、事件处理器、事件循环。事件产生后发送给事件循环，事件循环将每个事件分派给个各个事件处理器。事件A由处理器A处理，事件B将被处理器B处理。</p><p>select</p><p>poll</p><p>epoll</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Web容器"><a href="#Web容器" class="headerlink" title="Web容器"></a>Web容器</h3><p><a href="https://blog.csdn.net/guzhangyu12345/article/details/91047750#servlet容器的启动过程" target="_blank" rel="noopener">servlet工作原理之tomcat篇</a></p><blockquote><p>Web容器是一种服务程序，给处于其中的应用程序组件提供环境，使其直接跟容器中的环境变量交互，不必关注其它系统问题。主要由应用服务器来实现，如Tomcat、JBoss、Weblogic、WebSphere等。</p></blockquote><p><strong>Servlet容器的主要任务是管理Servlet的生命周期，而Web容器主要任务是管理Web应用程序。</strong></p><p>一个web应用对应一个context容器，添加一个应用时将会创建一个StandardContext容器，并且给这个context容器设置必要的参数，url和path分别代表这个应用在tomcat中的访问路径和这个应用实际的物理路径。其中最重要的一个配置是ContextConfig，这个类将会负责整个web应用配置的解析工作，最后将这个context容器加到父容器host中。</p><p><img src="https://img-blog.csdnimg.cn/20190606175306985.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1emhhbmd5dTEyMzQ1,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>servlet</strong></p><p><img src="/2019/10/15/java-note/image010.jpg" alt="å¾ 5.Servlet é¡¶å±ç±»å³èå¾"></p><ol><li><p>抽象类<code>HttpServlet</code>继承抽象类<code>GenericServlet</code>，其有两个比较关键的方法，<code>doGet()</code>和<code>doPost()</code></p></li><li><p><code>GenericServlet</code>实现接口<code>Servlet</code>,<code>ServletConfig</code>,<code>Serializable</code></p></li><li><p><code>MyServlet</code>(用户自定义<code>Servlet</code>类)继承<code>HttpServlet</code>，重写抽象类<code>HttpServlet</code>的<code>doGet()</code>和<code>doPost()</code>方法</p></li></ol><p>注：任何一个用户自定义<code>Servlet</code>，只需重写抽象类<code>HttpServlet</code>的<code>doPost()</code>和<code>doGet()</code>即可</p><h3 id="容器中的执行过程"><a href="#容器中的执行过程" class="headerlink" title="容器中的执行过程"></a>容器中的执行过程</h3><p> Servlet只有放在容器中，方可执行，且Servlet容器种类较多，如Tomcat,WebLogic等。下图为简单的 请求响应 模型。</p><p><img src="https://img2018.cnblogs.com/blog/1066923/201902/1066923-20190210235114200-2361046.png" alt="img"></p><p>分析：</p><p>1.浏览器向服务器发出GET请求(请求服务器ServletA)</p><p>2.服务器上的容器逻辑接收到该url,根据该url判断为Servlet请求，此时容器逻辑将产生两个对象：请求对象(<code>HttpServletRequest</code>)和响应对象(<code>HttpServletResponce</code>)</p><p>3.容器逻辑根据url找到目标Servlet(本示例目标Servlet为ServletA),且创建一个线程A</p><p>4.容器逻辑将刚才创建的请求对象和响应对象传递给线程A</p><p>5.容器逻辑调用Servlet的<code>service()</code>方法</p><p>6.service()方法根据请求类型(本示例为GET请求)调用doGet()(本示例调用doGet())或doPost()方法</p><p>7.doGet()执行完后，将结果返回给容器逻辑</p><p>8.线程A被销毁或被放在线程池中</p><p><strong>注意：</strong></p><p><strong>1.在容器中的每个Servlet原则上只有一个实例</strong></p><p><strong>2.每个请求对应一个线程</strong></p><p><strong>3.多个线程可作用于同一个Servlet(这是造成Servlet线程不安全的根本原因)</strong></p><p><strong>4.每个线程一旦执行完任务，就被销毁或放在线程池中等待回收</strong></p><h3 id="在JavaWeb中扮演的角色"><a href="#在JavaWeb中扮演的角色" class="headerlink" title="在JavaWeb中扮演的角色"></a>在JavaWeb中扮演的角色</h3><blockquote><p>Servlet在JavaWeb中，扮演两个角色：<strong>页面角色</strong>和<strong>控制器角色</strong>(更多)。</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="/2019/10/15/java-note/image-20200219115839114.png" alt="image-20200219115839114"></p><p>第一步：容器先加载<code>Servlet</code>类</p><p>第二步：容器实例化<code>Servlet</code>(<code>Servlet</code>无参构造函数执行)</p><p>第三步：执行<code>init()</code>方法（在Servlet生命周期中，只执行一次，且在<code>service()</code>方法执行前执行）</p><p>第四步：执行<code>service()</code>方法，处理客户请求，<code>doPost()或doGet()</code></p><p>第五步：执行<code>destroy()</code>，销毁线程</p><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p> 保留两位小数的方法</p><ul><li>BigDecimal的setScal()方法</li><li>System.out.println(“%2f”,a);</li><li>NumberFormat</li><li>DecimalFormat的format方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Format</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> f = <span class="number">111231.5585</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BigDecimal bg  = <span class="keyword">new</span> BigDecimal(f);</span><br><span class="line">        <span class="keyword">double</span> f1 = bg.setScale(<span class="number">2</span>,BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00"</span>);</span><br><span class="line">        Sytem.out.println(df.format(f));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printlin(String.format()<span class="string">".%2f"</span>,f);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            NumberFormat nf = NumberFormat.getNumberInstance();</span><br><span class="line">            nf.setMaximumFractionDigits(<span class="number">2</span>);</span><br><span class="line">            System.out.println(nf.format(f));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当<code>double</code>必须用作<code>BigDecimal</code>的源时，</strong>请使用<code>Double.toString(double)</code>转成String，然后`使用String构造方法，或使用BigDecimal的静态方法valueOf，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal bDouble1 = BigDecimal.valueOf(<span class="number">2.3</span>);</span><br><span class="line">        BigDecimal bDouble2 = <span class="keyword">new</span> BigDecimal(Double.toString(<span class="number">2.3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"bDouble1="</span> + bDouble1);</span><br><span class="line">        System.out.println(<span class="string">"bDouble2="</span> + bDouble2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor, <span class="keyword">int</span> scale, <span class="keyword">int</span> roundingMode)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ROUND_CEILING    <span class="comment">//向正无穷方向舍入</span></span><br><span class="line"></span><br><span class="line">ROUND_DOWN    <span class="comment">//向零方向舍入</span></span><br><span class="line"></span><br><span class="line">ROUND_FLOOR    <span class="comment">//向负无穷方向舍入</span></span><br><span class="line"></span><br><span class="line">ROUND_HALF_DOWN    <span class="comment">//向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向下舍入, 例如1.55 保留一位小数结果为1.5</span></span><br><span class="line"></span><br><span class="line">ROUND_HALF_EVEN    <span class="comment">//向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位数是奇数，使用ROUND_HALF_UP，如果是偶数，使用ROUND_HALF_DOWN</span></span><br><span class="line"></span><br><span class="line">ROUND_HALF_UP    <span class="comment">//向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向上舍入, 1.55保留一位小数结果为1.6</span></span><br><span class="line"></span><br><span class="line">ROUND_UNNECESSARY    <span class="comment">//计算结果是精确的，不需要舍入模式</span></span><br><span class="line"></span><br><span class="line">ROUND_UP    <span class="comment">//向远离0的方向舍入</span></span><br></pre></td></tr></table></figure><p>(1)商业计算使用BigDecimal。</p><p> (2)尽量使用参数类型为String的构造函数。</p><p> (3) BigDecimal都是不可变的（immutable）的，在进行每一步运算时，都会产生一个新的对象，所以在做加减乘除运算时千万要保存操作后的值。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="EnumSet和EnumMap"><a href="#EnumSet和EnumMap" class="headerlink" title="EnumSet和EnumMap"></a>EnumSet和EnumMap</h3><p>EnumMap是专门为枚举类型量身定做的Map实现。虽然使用其它的Map实现（如HashMap）也能完成枚举类型实例到值得映射，但是使用EnumMap会更加高效：它只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以EnumMap使用数组来存放与枚举类型对应的值。这使得EnumMap的效率非常高。EnumMap在内部使用枚举类型的ordinal()得到当前实例的声明次序，并使用这个次序维护枚举类型实例对应值在数组的位置。</p><blockquote><p>1、父类为AbstractMap，未实现Map接口，只实现了Cloneable和Serializable接口。<br> 2、非线程安全，所有方法和操作都未加锁。<br> 3、采用key数组和vals数组共同实现key和value的关联。<br> 4、不允许null key，但允许null value。<br> 5、null值会被转换为Object的NULL实例占位替换。<br> 6、元素的存储顺序按照枚举值的声明次序存储。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个防火墙nat拓扑</title>
      <link href="/2019/10/15/nat-topo/"/>
      <url>/2019/10/15/nat-topo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ensp真是有毒。。昨天死活ping不通的路由今天重启就可以ping通了？？亏我昨天排查了一晚上。。</p><a id="more"></a><hr><p>记录一次搭建大型的网络拓扑，先看看总的拓扑结构：</p><p><img src="http://cdn.zblade.top/qiniu_img/1571103420738.png" alt></p><p>这是一个大型公司的组网方案，总部放在内网192.168.0.0， 这里以四个PC作为代替的四个分部门，四部门之间可以配置VLAN实现互通或者限制某一部门不通。</p><p>连接部门的是两台核心交换机，作为汇聚层。交换机上实现主备备份并在关键链路实现链路聚合。同时，核心交换机还承担着DHCP服务器的作用，向下面的四个部门分配IP地址并实现三层交换</p><p>防火墙添加了NAT策略并实现了双机热备+心跳检测，由于开启了web视图，因此配置起来变得更加简单</p><p>外网方面，AR作为核心路由器汇聚了外网服务器机群和分部门</p><p>其中一个子公司使用PPP 协议+CHAP链路加密实现和AR的通信；另外一个子公司使用帧中继于AR通信；路由协议使用的是ospf，为了防环设置了选择了子公司不同的area与核心路由器area0相连</p><p>防火墙NAT策略</p><p><img src="http://cdn.zblade.top/qiniu_img/1571103861398.png" alt></p><p>踩坑</p><p>+ </p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程、IO流与反射</title>
      <link href="/2019/10/12/mutithread/"/>
      <url>/2019/10/12/mutithread/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>旧笔记补档</p><img src="http://cdn.zblade.top/qiniu_img/72048990_p0.png" style="zoom: 33%;"><a id="more"></a><h2 id="多线程-IO"><a href="#多线程-IO" class="headerlink" title="多线程/IO"></a>多线程/IO</h2><blockquote><p>CPU是以时间片的方式为进程分配CPU处理时间的,为了提高CPU的使用率，采用多线程的方式去同时完成几件事情而互不干扰,从而提高CPU的使用效率</p></blockquote><h4 id="多线程的使用场景"><a href="#多线程的使用场景" class="headerlink" title="多线程的使用场景"></a>多线程的使用场景</h4><ul><li><p>多线程同时完成多个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多线程核心代码 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream out  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">            <span class="keyword">int</span> buf = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] b =  <span class="keyword">new</span> <span class="keyword">byte</span>[buf];</span><br><span class="line">            <span class="keyword">int</span> lenth = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> len = src.length();</span><br><span class="line"><span class="comment">//            //已复制文件的字节数</span></span><br><span class="line">            <span class="keyword">double</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//数字格式化，显示百分比</span></span><br><span class="line">            DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"##.00%"</span>);</span><br><span class="line">            <span class="keyword">while</span> ((lenth = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(b,<span class="number">0</span>,lenth);</span><br><span class="line">                <span class="comment">//获取已下载的大小，并且转换成百分比</span></span><br><span class="line">                temp += lenth;</span><br><span class="line">                <span class="keyword">double</span> d = temp/len;</span><br><span class="line">                System.out.println(src.getName()+<span class="string">"以复制进度"</span>+df.format(d));</span><br><span class="line">                <span class="comment">//线程阻塞，实现同步</span></span><br><span class="line"><span class="comment">//                Thread.sleep(1);</span></span><br><span class="line">                <span class="keyword">if</span> (len - temp &lt; buf) &#123;</span><br><span class="line">                    buf = (<span class="keyword">int</span>) (len - temp);</span><br><span class="line">                    <span class="keyword">if</span> (buf == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    b = <span class="keyword">new</span> <span class="keyword">byte</span>[buf];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(in !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>多线程协同完成单一任务</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多线程核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以从任意位置进行读写文件</span></span><br><span class="line">        RandomAccessFile in =<span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             in =   <span class="keyword">new</span> RandomAccessFile(src, <span class="string">"r"</span>);</span><br><span class="line">             out = <span class="keyword">new</span> RandomAccessFile(dest, <span class="string">"rw"</span>);</span><br><span class="line">            in.seek(startPos);</span><br><span class="line">            out.seek(endPos);</span><br><span class="line">            <span class="keyword">int</span> size = endPos-startPos;</span><br><span class="line">            <span class="keyword">int</span> lenth=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span> temp =<span class="number">0</span>;</span><br><span class="line"><span class="comment">//            判断剩余长度是否大于1024</span></span><br><span class="line">            <span class="keyword">int</span> bufLen = (<span class="keyword">int</span>) (size &lt; <span class="number">1024</span> ? src.length() : <span class="number">1024</span>);</span><br><span class="line"><span class="comment">//            int bufLen = 1024;</span></span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[bufLen];</span><br><span class="line">            <span class="comment">//数字格式化，显示百分比</span></span><br><span class="line">            DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"##.00%"</span>);</span><br><span class="line">                <span class="keyword">while</span> ((lenth = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(b, <span class="number">0</span>, lenth);</span><br><span class="line">                    temp += lenth;</span><br><span class="line">                    <span class="keyword">double</span> d = temp / size;</span><br><span class="line">                    System.out.println(<span class="string">"线程"</span> + j + <span class="string">"复制进度"</span> + df.format(d));</span><br><span class="line">                    <span class="keyword">if</span> (size - temp &lt; bufLen) &#123;</span><br><span class="line">                        bufLen = (<span class="keyword">int</span>) (size - temp);</span><br><span class="line">                        <span class="keyword">if</span> (bufLen == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        b = <span class="keyword">new</span> <span class="keyword">byte</span>[bufLen];</span><br><span class="line">                    &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"运行到这里"</span>);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//线程调用方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Executor executor = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MutiCopy</span><span class="params">(String src,String dest,<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        File file  = <span class="keyword">new</span> File(src);</span><br><span class="line">        <span class="keyword">long</span> len= file.length();</span><br><span class="line">        <span class="keyword">int</span> oneNum = (<span class="keyword">int</span>) (len/count);</span><br><span class="line">        System.out.println(oneNum);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        CountDownLatch latch = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>((num= (<span class="keyword">int</span>) (len%count))!=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"剩余："</span>+(len%count));</span><br><span class="line">           latch = <span class="keyword">new</span> CountDownLatch(count+<span class="number">1</span>);</span><br><span class="line">            executor.execute(<span class="keyword">new</span> FileCopy2(src,dest,(<span class="keyword">int</span>)(len-len%count),(<span class="keyword">int</span>)len,num,latch));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"整除"</span>);</span><br><span class="line">            latch = <span class="keyword">new</span> CountDownLatch(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt;count;i++)&#123;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> FileCopy2(src,dest,oneNum*i,oneNum*(i+<span class="number">1</span>),i,latch));</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+i+<span class="string">"启动"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="sleep-、join-、CountDownLatch类之间的区别"><a href="#sleep-、join-、CountDownLatch类之间的区别" class="headerlink" title="sleep()、join()、CountDownLatch类之间的区别"></a>sleep()、join()、CountDownLatch类之间的区别</h4><blockquote><p>Sleep方法是个静态方法，由thread类来调用。<strong>它只能暂停当前线程，不能暂停其他线程</strong>。它接受的参数指名这个线程需要休眠多少时间。</p><p>Join方法是非静态方法，他使得在系统调用此方法时<strong>只有这个线程执行完后</strong> ，才能执行其他线程，包括主线程的终止；或者给它制定时间，即最多过了这么多时间后，如果还是没有执行完，下面的线程可以继续执行而不必再理会当前线程是否执行完。</p><p>CountDownLatch是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。调用join方法需要等待thread执行完毕才能继续向下执行,而CountDownLatch只需要检查计数器的值为零就可以继续向下执行</p></blockquote><h4 id="Thread和Runnable之间的关系"><a href="#Thread和Runnable之间的关系" class="headerlink" title="Thread和Runnable之间的关系"></a>Thread和Runnable之间的关系</h4><ul><li>实现Runnable更加适合资源共享</li><li>实现Runnable接口避免单点继承的局限，一个类可以继承多个接口</li></ul><p>备注：</p><ul><li>Runnable始终使用一个对象的计数器，Thread则每次创建一个计数器</li><li>Thread通过static属性同样可以实现资源共享</li><li>注意添加同步锁</li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ul><li>更好调度和管理线程</li><li>种类<ul><li>FixedThreadPool</li><li>SingleThreadExecutor</li><li>CachedThreadPool</li><li>SingleThreadSchduledExecutor</li><li>ScheduledThreadPool</li></ul></li></ul><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决系统资源不足的问题。如果不适用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者”过度切换的问题”。</p></blockquote><h4 id="单线程和多线程"><a href="#单线程和多线程" class="headerlink" title="单线程和多线程"></a>单线程和多线程</h4><blockquote><p><strong>进程只有一个，所以分配的CPU资源是一定的，多线程只不过是轮流抢占CPU而已</strong>，并不会真正提高处理速度。这意味着，<strong>多线程的作用主要在于提高了并发数量，比如http请求，如果是单线程，一次只能接收一个请求，多线程则可以同时接收多个请求</strong></p><p><strong>但是多线程由于轮换使用CPU，会造成单个线程的执行速度变慢</strong>（以前CPU供一个线程使用，现在要供多个线程轮流使用了）。<strong>但是在多CPU的服务器上，多线程就很有优势了，它不但能提高并发数量，而且能提高处理速度</strong>。因为在多CPU的服务器上，CPU调度很灵活，当一个线程占用着一个CPU的时候，其他线程可以被分配给其他CPU去处理，从而实现了“真正意义上地并行”</p></blockquote><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h3><blockquote><p>虚拟机在运行状态中，可以动态加载一个只有名称的类，加载完类之后，在堆内存中，就产生了一个 Class 类型的对象，这个对象就包含了完整的结构信息，通过这个对象我们可以看到类的结构。</p></blockquote><p>反射的用处</p><ul><li>动态加载类，在运行期间可以打开和检查.class文件，动态获取类、方法、属性等</li><li>广泛应用于各类框架，如spring</li></ul><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><blockquote><p>在Java中每个类都有一个Class对象，每当我们编写并且编译一个新创建的类就会产生一个对应Class对象并且这个Class对象会被保存在同名.class文件里(编译后的字节码文件保存的就是Class对象)</p><p>__内存中class对象只有一个，只能被JVM创建并加载*</p></blockquote><p>类的生成过程</p><ul><li>加载</li><li>连接</li><li>初始化</li></ul><p><a href="https://github.com/bladedragon/Test-of-Reflection-MutiThread/tree/654f667fbacc13979ea5a93ad730e58a2b4a7505/assets/20170430160610299.png" target="_blank" rel="noopener"><img src="https://github.com/bladedragon/Test-of-Reflection-MutiThread/tree/654f667fbacc13979ea5a93ad730e58a2b4a7505/assets/20170430160610299.png" alt="img"></a></p><p><strong>获取 class类的三种方式</strong></p><ul><li><p>通过类名获取 : 类名.class</p></li><li><p>通过对象获取 : 对象名.getClass()</p><blockquote><p>获取字面常量的Class引用时，不会触发初始化</p></blockquote></li><li><p>通过全类名获取 : Class.ForName(全类名)</p></li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><blockquote><p>负责将.class文件加载到内存中，并为之生成对应的Class对象</p></blockquote><p><a href="https://github.com/bladedragon/Test-of-Reflection-MutiThread/tree/654f667fbacc13979ea5a93ad730e58a2b4a7505/assets/181711178455.jpg" target="_blank" rel="noopener"><img src="https://github.com/bladedragon/Test-of-Reflection-MutiThread/tree/654f667fbacc13979ea5a93ad730e58a2b4a7505/assets/181711178455.jpg" alt="img"></a></p><p>组成</p><ul><li><p><em>Bootstrap ClassLoader 根类加载器</em></p><p>负责Java核心类的加载，比如System类，在JDK中JRE的lib目录下rt.jar文件中的类</p></li><li><p><em>Extension ClassLoader 扩展类加载器</em></p><p>负责JRE的扩展目录中jar包的加载，在JDK中JRE的lib目录下ext目录</p></li><li><p><em>System ClassLoader 系统类加载器</em></p><p>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in1 = <span class="keyword">null</span>;</span><br><span class="line">        in1 = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"reflect/1.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(in1.read());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li>获取类的方法</li><li>获取类名以及其它信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static void test1() throws ClassNotFoundException &#123;</span><br><span class="line">        String path = &quot;team.redrock.reflect.Student&quot;;</span><br><span class="line">        Class cls1 = Class.forName(path);</span><br><span class="line">//        Class cls2 = Student.class;</span><br><span class="line">        System.out.println(cls1.getName());</span><br><span class="line">        System.out.println(cls1.getSimpleName());</span><br><span class="line"></span><br><span class="line">  //      Student student = new Student();</span><br><span class="line">    //    Class cls3 = student.getClass();</span><br><span class="line">      //  System.out.println(cls3.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>无参获取公有属性</li><li>无参获取私有属性</li><li>获取公有属性值</li><li>获取私有属性值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Class cls)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取公有属性</span></span><br><span class="line">        Field[] fields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : fields) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(f.getName());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取全部属性</span></span><br><span class="line">        Field[] fieldss = cls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : fieldss)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果字段是私有的，不管是读值还是写值，都必须先调用setAccessible（true）方法</span></span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(f.get(cls.getDeclaredConstructor().newInstance()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>new和newInstance的区别<ul><li>new=初始化+实例化</li><li>newInstance=实例化</li></ul></li><li>必须根据实例获取属性和方法</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>获取公有方法</li><li>获取私有方法</li><li>获取指定方法</li><li>调用方法</li><li>调用父类的私有方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(Class cls)</span></span>&#123;</span><br><span class="line"><span class="comment">//        Method[] methods = cls.getMethods();  //不能获取私有方法</span></span><br><span class="line"><span class="comment">//        for(Method method:methods)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method[] methods1 = cls.getDeclaredMethods();   //不能获取父类方法</span></span><br><span class="line"><span class="comment">//        for(Method method:methods1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            method = cls.getMethod("studySecretly",null);    //和无参获取method一样</span></span><br><span class="line">            method = cls.getDeclaredMethod(<span class="string">"studySecretly"</span>);</span><br><span class="line">            Object instance = cls.getDeclaredConstructor().newInstance();</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);  <span class="comment">//调用位置注意一下</span></span><br><span class="line">            method.invoke(instance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li>利用反射实现注解功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(Class cls)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object object = cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        Annotation annotation = (Annotation) cls.getAnnotation(GoodBoy.class);</span><br><span class="line">        <span class="keyword">if</span>(annotation !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> GoodBoy)&#123;   <span class="comment">//该注解是否是定义注解类的一个实例</span></span><br><span class="line">                GoodBoy goodBoy = (GoodBoy) annotation;</span><br><span class="line">                System.out.println(goodBoy.value());<span class="comment">//实现注解逻辑的地方</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在程序中要获取注解，然后获取注解的值进而判断我们赋值是否合法，那么类对象的创建和方法的创建必须是通过反射而来的</p></blockquote><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ul><li>利用构造器创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">(Class cls)</span></span>&#123;</span><br><span class="line">        Constructor&lt;Student&gt;[] constructors = cls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;Student&gt; constructor1 :constructors)&#123;</span><br><span class="line">            System.out.println(constructor1);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Student student = constructor1.newInstance();</span><br><span class="line">                System.out.println(student.play(<span class="string">"dota"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑记录-SSL验证报错</title>
      <link href="/2019/10/11/SSLSL-Problem/"/>
      <url>/2019/10/11/SSLSL-Problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天不知道怎么回事诸事不顺，居然连创建一个新项目都会报错。。今天一如既往打开IDEA，满怀欣喜地创建一个springboot地新项目，想着怎么去慢慢填充羽翼，给项目注入新的生命。。突然，一排红线显示在我面前——</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure><p>son of bitch !</p><a id="more"></a><p><a href="https://dotblogs.com.tw/grayyin/2018/08/14/120458" target="_blank" rel="noopener">SSL验证失败的一种解决方案</a></p><p>目前解决方法</p><p><a href="https://blog.csdn.net/weixin_30633405/article/details/99038701" target="_blank" rel="noopener">mvn编译报错mavn sun.security.validator.ValidatorException</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的九月总结</title>
      <link href="/2019/10/07/september-plan/"/>
      <url>/2019/10/07/september-plan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>天凉好个秋~</p><p>应该脚踏实地，应该认清现实，应该一往无前。</p>        <div id="aplayer-fQYVHlaN" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-fQYVHlaN"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Move Mountains",              author: "Alisa",              url: "http://music.163.com/song/media/outer/url?id=1381578814.mp3",              pic: "http://p1.music.126.net/wR8cPX0w4gj179SCzUHI6A==/109951164258264118.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script> <a id="more"></a><p>短暂的九月，曾经寄托了我多少的幻想，作为大三的开局之月，也是立下誓言后的实践时期，想着九月多长，自己的改变就会有多大，但是最后时间匆匆，恍然间带走了一叶知秋的梦想，金黄的季节却没生产出期待的果实。</p><p>这个月，是检验自己计划正确性和合理性的一个月，也是在阵痛中艰难转型的一个月，这个月走过，离自己目标的12月，只剩下残缺的三个月时间，时间不饶人，就算自己还没有完全转变过来，也只能匆匆上马</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>这个月，总算有了自己的计划</p><p>对自己的就业目标，总算有了相对清楚的认识，尽管计划多变，但我相信这些改变都在一步步接近我自己的真实水平，都在让我的目标变得更加清晰明确</p><p>还是计划做一个web后端工程师，虽然感觉编程不是很适合我，但是就目前而言，开发岗位依然是最为理想的目标</p><p>自己的技能在于JAVA后端开发和网络技术，但是基础没有十分夯实，很多知识点也还没完全理解，因此今年是打基础，提升专业素养的一年。</p><p>但是计划完成得不是很理想。</p><h3 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h3><p>这个月，勉强完成了《高性能MYSQL》重要部分的阅读，有收获，在索引的运用和表的优化上有了一点初步的认识，但是更多的是对高级特性的不解，对具体应用场景的不确定。很多知识点还是不能很好地运用到后端开发中去</p><p>这个月 开始学习python，本想系统学习，但是因为自己计划的变更最终不了了之。目前学习到了基础知识，大致地过了一遍，对这个语言的基础有了初步的理解，接下来把这些知识点归纳，总结成文，并在之后（大概是11月把）在系统地学习下去</p><p>这个月 有在紧跟日常课程。作为通信工程的学生，平时的课程相当繁重，上个学期差点挂科的我不想再经历一次最后阶段疯狂复习的痛苦。加上这个学期的课程确实十分重要，对后期找工作都意义非常，因此，我依然得在平时把学习跟上，尽量不要拉开太大距离。但令人沮丧的是，感觉自己平时花在上面的时间太多了，导致自己的就业计划进展缓慢，然而，就算是自己花时间的努力完善笔记，最后依然和上课的学习进度拉开了差距，感觉是我过于重视笔记的重要性而忽视了实践应用的缘故</p><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><p>这个月 主要是在忙ICT招新的事情</p><p>这个月 主要是在学习上课</p><p>这个月 还花了一点时间在班学长上</p><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>ICT方面学习积累不足，没有看完NA 没有回顾计网</p><p>一直在想但没有进行的Leetcode算法学习  </p><p>没有看完之前做过的项目 自己的java基础没有很大的提升</p><p>关键在于，自己学习的热情和兴趣没有想像中高涨，专注度依然没有提升，还是会想着做别的事情</p><h3 id="下个月计划"><a href="#下个月计划" class="headerlink" title="下个月计划"></a>下个月计划</h3><p><img src="/2019/10/07/september-plan/1570416070727.png" alt="1570416070727"></p><p>预期达成的目标  </p><ul><li>借小程序，对项目的经验更加丰富</li><li>JAVA基础有了提升</li><li>专注度和认真程度有提升</li></ul>]]></content>
      
      
      <categories>
          
          <category> 一如既往，只是日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各层常见协议首部格式解析</title>
      <link href="/2019/09/24/hcna/"/>
      <url>/2019/09/24/hcna/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大概一篇能讲完吧…</p><a id="more"></a><h3 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h3><p>运行在以太网上的常见帧格式分为两种，分别是Ethenet_II帧格式、IEEE802.3帧格式（SNAP）</p><p><img src="/2019/09/24/hcna/1569306865147.png" alt="1569306865147"></p><ul><li>ethenet II的type字段指定了上层的协议</li><li>IEEE802.3相同位置是长度，同时对数据进行更加细粒度的控制</li></ul><h4 id="ETHENET-II"><a href="#ETHENET-II" class="headerlink" title="ETHENET_II"></a>ETHENET_II</h4><p>字段说明</p><ol><li><code>DMAC</code>是目的MAC地址。DMAC字段长度为<strong>6</strong><br>个字节，标识帧的接收者。</li><li><code>SMAC</code>是源MAC地址。SMAC字段长度为<strong>6</strong>个字节<br>，标识帧的发送者。</li><li>类型字段用于标识数据字段中包含的高层协议，该字段长<br>度为<strong>2</strong>个字节。类型字段取值为<strong>0x0800</strong>的帧代表<code>IP</code>协议帧；类型字<br>段取值为<strong>0x0806</strong>的帧代表<code>ARP</code>协议帧。</li><li>数据字段是网络层数据，最小长度必须为<strong>46</strong>字节以保证帧长<br>至少为<strong>64</strong>字节，数据字段的最大长度为<strong>1500</strong>字节。</li><li>循环冗余校验字段（``FCS`）提供了一种错误检测机制。该字段长度<br>为<strong>4</strong>个字节。</li></ol><h4 id="IEEE802-3"><a href="#IEEE802-3" class="headerlink" title="IEEE802.3"></a>IEEE802.3</h4><p><img src="/2019/09/24/hcna/1569308653767.png" alt="1569308653767"></p><p>字段说明</p><ul><li>Length 代替ETHENET_II字段的Type字段，记录帧的字长</li><li>LLC占用Data的3个字节<ul><li>D.SAP 目的访问服务点</li><li>S.SAP  源服务访问点</li><li>Control 控制字段</li></ul></li><li>SNAP 占用Data的5个字节<ul><li>Org Code机构代码，一般为0</li><li>Type字段和Ethenet相同</li></ul></li></ul><p>DSAP和SSAP作用解释</p><ul><li>当DSAP和SSAP都取特定值``0xff<code>时，802.3帧就变成了</code>Netware ETHERNET`帧，用来承载NetWare类型的数据。</li><li>当DSAP和SSAP都取特定值``0xaa<code>时，802.3帧就变成了</code>ETHERNET_SNAP<code>帧。</code>ETHERNET_SNAP`帧可以用于传输多<br>种协议</li><li>DSAP和SSAP其他的取值均为纯``IEEE802.3`帧。</li></ul><p>MAC地址（6字节48bit）</p><ul><li>前24bit是OUI 供应商代码，后24bit是序列号</li><li>单播第1字节的第8bit为0；组播第1字节的第8bit为1；广播为全1</li></ul><h3 id="IPv4报文结构"><a href="#IPv4报文结构" class="headerlink" title="IPv4报文结构"></a>IPv4报文结构</h3><p><img src="/2019/09/24/hcna/1569310494365.png" alt="1569310494365"></p><p>字段解释</p><ul><li><code>Version</code>  4字节，版本号</li><li><code>Header Lenngth</code>  4字节，显示首部长度，一般首部长度为20字节</li><li><code>DS Field</code>  8字节，区分服务,也叫<code>TOS</code></li><li><code>Total Length</code>  16字节，报文总长度,理论上可到达65535字节</li><li><code>identification</code>  16字节，标识，和分片有关</li><li><code>Flags</code> 3字节  标志，和分片有关</li><li><code>Fragment Offset</code>  13字节，片偏移，和分片有关</li><li><code>Time To Live</code>  8字节 TTL</li><li><code>Protocol</code>  8字节 协议，指定传输层协议</li><li><code>Header Checksum</code>  16字节，首部校验和，只对首部进行差错检测</li><li><code>Source IP Address</code>   32字节，源IP地址</li><li><code>Destination IP Address</code> 32字节  目的IP地址</li><li><code>IP OPtion</code>  可选项</li><li><code>data</code>有效载荷</li></ul><h4 id="关于区分服务"><a href="#关于区分服务" class="headerlink" title="关于区分服务"></a>关于区分服务</h4><p>IPv4的DS Field字段提供Qos。</p><p>原先定义为TOS（RFC791），TOS中的IP Precedence字段只能将报文分成8类，在实际生活中完全不够用，如下</p><p><img src="/2019/09/24/hcna/1569321637888.png" alt="1569321637888"></p><p>字段说明</p><ul><li><p><code>IP Precedence</code></p><p>代表了报文的优先级</p></li><li><p><code>D/T/R</code></p><p>D bit代表延迟（Delay），T bit代表吞吐量（Throughput），R bit代表可靠性<br>（Reliability）。</p></li></ul><blockquote><p>后来，在RFC2474中对IPv4报文头的ToS字段进行了重新定义，称为DS（Differentiated  Services）字段。</p></blockquote><p><img src="/2019/09/24/hcna/1569322039284.png" alt="1569322039284"></p><p>字段说明</p><ul><li><p><code>DSCP</code>  </p><p>DSCP有两种表达方式，一种是数值，范围是0~63（6个字节）；一种是关键字，分为CS、EF、AF、BE</p></li></ul><p><img src="/2019/09/24/hcna/1569322479753.png" alt="1569322479753"></p><p>其中xy表示不同类别，数字越小丢包概率越小</p><ul><li>CS6和CS7<strong>默认用于协议报文</strong>，而且是大多数厂商设备的硬件队列里<strong>最高优先</strong><br>级的报文，因为如果这些报文无法接收的话会引起协议中断。</li><li>EF常用于<strong>承载语音</strong>的流量，因为语音要求低延迟，低抖动，低丢包率，是仅<br>次于协议报文的最重要的报文。</li><li>AF4用来承载<strong>语音的信令流量</strong>,指电话的控制信令。</li><li>AF3可以用来承载IPTV的<strong>直播流量</strong>，直播的实时性很强，需要连续性和大吞吐<br>量的保证。</li><li>AF2可以用来承载VOD（Video on Demand：<strong>视频点播</strong>）的流量，相对于直播<br>流量来说，VOD对实时性要求没那么强烈，允许有时延或者缓冲。</li><li>AF1可以用来<strong>承载普通上网业务</strong>。</li><li>BE 是指传统IP的分组投递服务，<strong>只关注可达性</strong>，对其他方面不做要求，所有路由器必须支持BE</li></ul><h4 id="关于分片"><a href="#关于分片" class="headerlink" title="关于分片"></a>关于分片</h4><p>IP数据报分片主要考虑以下原因：</p><ul><li>数据链路层有不同的承载协议，不同协议承载的最大数据长度各不相同                                                                                                                                                                                                                                                                      </li></ul><p>使用IP分片将数据分片传输，从而使数据不会超过MTU，对此，IPv4提供了三个字段：标识、标志、片偏移</p><p><code>Identification</code>：标识号,归属于同一个标识号的数据包分片具有相同的==标识号==、==源IP地址==、==目的地址== ，同时，发送主机通常为他发送的每一个数据报的标识号加1。</p><p><code>flag</code>：用于判断后面是否还有片，flag分为<code>Reserve</code>,<code>DF</code>和<code>MF</code>三部分。Reserve是保留位；DF表示是否分片（DF=1表示不分片）；MF表示是否还有后续分片。可以看出，三位同时最多只能由一个值为1</p><p><code>Fragment Offset</code>:片偏移，用来分片重组时进行定位，偏移以8字节为单位</p><p><strong>分片的缺点</strong></p><ol><li><p>分片本身的划分和重组会带来资源消耗，尤其是接收方，在接受分片时要为每个分片提供内存空间，分片过多会导致资源消耗严重</p></li><li><p>由于IP层没有重传的策略，所以当数据波中的任意分片丢失时，整个数据报都需要依赖传输层进行重传，又因为IP层的分片相对于传输层是透明的，所以往往传输层会重传整个数据包，这样会浪费资源，影响网络中的传输质量。</p></li><li><p>同时，分片的存在会对网络安全造成隐患。利用最后一个分片没有被接受，所有分片就不会重组并释放内存空间的特点，故意不向接收方发送最后一个分片，如果这样的攻击迅速，大量，就会导致接收方的内存空间占满，无法处理正常业务，达到DOS效果。同时也可以使分片的偏移量出现差错，导致接收方无法正常重组数据报</p></li><li><p>值得注意的时IP分组只有第一个分片带有四层信息，因此其余分片有可能因此逃过防火墙等的检测，从而给黑客可乘之机</p></li></ol><p>在实际应用中，应尽量避免使用IP分片。事实上，IPv6协议中已经取消分片的策略。</p><p>由于TCP协议中存在MSS，限制了最大数据发送量，从而可以确保IP数据报大小不会超过数据链路层的MTU，因此，在TCP协议中不存在IP分片；但是在UDP协议下，不存在这样的保障机制，因此最好要在应用层就限定每个包的大小</p><h4 id="关于校验"><a href="#关于校验" class="headerlink" title="关于校验"></a>关于校验</h4><p>IP层只对报文头部进行校验检错，不对数据进行差错检测，网络层实质上还是属于“尽最大努力交付”</p><p>为什么链路层、IP层和传输层都需要校验？</p><p>答：链路层的差错检验是为了保证数据在链路传输的完整性，</p><p>IP层只对头部进行校验，一来是因为链路层的校验已经尽可能地降低了差错率，二来是因为IP层范围庞杂，如果每经过一个路由器都对数据进行校验，会对性能产生影响，可以但没必须。同时校验头部是为了保障IP协议自身的正确性，同时也存在对二层的不信任，以及四层协议有校验也有无校验，做一个最低限度的保障。甚至还有说法是历史遗留问题。总之算是一个complicated issue了🤣</p><p>传输层协议例如TCP协议对整个报文段进行校验，也是出于对下层的不信任的原因。（大概吧）</p><h4 id="关于选项"><a href="#关于选项" class="headerlink" title="关于选项"></a>关于选项</h4><p>选项允许IP首部被扩展，选项字段用来支持排错、测量以及安全等措施，一般较少使用</p><h3 id="IPv6报文结构"><a href="#IPv6报文结构" class="headerlink" title="IPv6报文结构"></a>IPv6报文结构</h3><h3 id="传输层报文结构"><a href="#传输层报文结构" class="headerlink" title="传输层报文结构"></a>传输层报文结构</h3><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICT </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习（02）</title>
      <link href="/2019/09/23/python2/"/>
      <url>/2019/09/23/python2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>…</p><a id="more"></a><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><ul><li>必备参数</li><li>关键字参数</li><li>默认参数</li><li>不定长参数</li></ul><p><strong>必备参数</strong>（位置参数）</p><p><strong>默认参数</strong></p><blockquote><p>默认参数必须指向不变对象！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#L[]是可变对象，每次调用会改变值，因此使用None加锁</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p><strong>不定长参数</strong>（可变参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p><strong>关键字参数</strong></p><blockquote><p>可以传入数量不定的dict参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'city'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有city参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'job'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有job参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>指定关键字参数，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>如果已有可变参数，后面的参数就自动被设为指定关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>使用形如<code>[:]</code>的语句来执行索引范围的操作</p><ul><li>支持倒数切片</li><li></li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>使用Iterable</p><h3 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h3><ul><li>可以使用多重循环</li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现牛顿法迭代法</title>
      <link href="/2019/09/22/pynewton/"/>
      <url>/2019/09/22/pynewton/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看到牛顿迭代法和二分法，现在用python实现一下</p><a id="more"></a><p><strong>拿开方举例,转载自<a href="https://www.jb51.net/article/129718.htm" target="_blank" rel="noopener">Python编程实现二分法和牛顿迭代法求平方根代码</a></strong></p><h3 id="一、使用二分法实现开方"><a href="#一、使用二分法实现开方" class="headerlink" title="一、使用二分法实现开方"></a>一、使用二分法实现开方</h3><p>假设求根号5，二分法的基本思路是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:折半： 5/2=2.5</span><br><span class="line">b:平方校验: 2.5*2.5=6.25&gt;5，并且得到当前上限2.5</span><br><span class="line">c:再次向下折半:2.5/2=1.25</span><br><span class="line">d:平方校验：1.25*1.25=1.5625&lt;5,得到当前下限1.25</span><br><span class="line">e:再次折半:2.5-(2.5-1.25)/2=1.875</span><br><span class="line">f:平方校验：1.875*1.875=3.515625&lt;5,得到当前下限1.875</span><br></pre></td></tr></table></figure><p>每次得到当前值和5进行比较，并且记下下下限和上限，依次迭代，逐渐逼近平方根：</p><ul><li>当结果校验超过原值，继续迭代</li><li>当结构校验低于原值，获得另一半，继续迭代</li></ul><p>python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt_binary</span><span class="params">(num)</span>:</span></span><br><span class="line">    x = sqrt(num)</span><br><span class="line">    y = num/<span class="number">2.0</span></span><br><span class="line">    low = <span class="number">0.0</span></span><br><span class="line">    up = num*<span class="number">1.0</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> abs(y-x)&gt;<span class="number">0.000001</span>:</span><br><span class="line">        print(count,y)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> y*y&gt;num :</span><br><span class="line">            up = y</span><br><span class="line">            y = low+(y-low)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = y</span><br><span class="line">            y = up-(up-y)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><h3 id="二、使用牛顿迭代法实现开方"><a href="#二、使用牛顿迭代法实现开方" class="headerlink" title="二、使用牛顿迭代法实现开方"></a>二、使用牛顿迭代法实现开方</h3><p>从函数意义上理解：我们是要求函数f(x)=x²，使f(x)=num的近似解，即x²-num=0的近似解。</p><p>从几何意义上理解：我们是要求抛物线g(x)=x²-num与x轴交点（g(x)=0）最接近的点。</p><p>我们假设g(x0)=0，即x0是正解，那么我们要做的就是让近似解x不断逼近x0，这是函数导数的定义：</p><p><img src="http://cdn.zblade.top/qiniu_img/1.png" alt></p><p>可以由此得到</p><p><img src="http://cdn.zblade.top/qiniu_img/2.png" alt="img"></p><p>从几何图形上看，因为导数是切线，通过不断迭代，导数与x轴的交点会不断逼近x0。</p><img src="http://cdn.zblade.top/qiniu_img/3.png" style="zoom: 50%;"><p>对于一般情况：</p><p><img src="http://cdn.zblade.top/qiniu_img/4.png" alt></p><p>将m=2代入：</p><p><img src="http://cdn.zblade.top/qiniu_img/5.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt_newton</span><span class="params">(num)</span>:</span> </span><br><span class="line">  x=sqrt(num) </span><br><span class="line">  y=num/<span class="number">2.0</span> </span><br><span class="line">  count=<span class="number">1</span> </span><br><span class="line">  <span class="keyword">while</span> abs(y-x)&gt;<span class="number">0.00000001</span>: </span><br><span class="line">    <span class="keyword">print</span> count,y </span><br><span class="line">    count+=<span class="number">1</span> </span><br><span class="line">    y=((y*<span class="number">1.0</span>)+(<span class="number">1.0</span>*num)/y)/<span class="number">2.0000</span> </span><br><span class="line">  <span class="keyword">return</span> y </span><br><span class="line"> </span><br><span class="line">print(sqrt_newton(<span class="number">5</span>)) </span><br><span class="line">print(sqrt(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="三、利用牛顿迭代法实现立方"><a href="#三、利用牛顿迭代法实现立方" class="headerlink" title="三、利用牛顿迭代法实现立方"></a>三、利用牛顿迭代法实现立方</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube_newton</span><span class="params">(num)</span>:</span> </span><br><span class="line">  x=num/<span class="number">3.0</span> </span><br><span class="line">  y=<span class="number">0</span> </span><br><span class="line">  count=<span class="number">1</span> </span><br><span class="line">  <span class="keyword">while</span> abs(x-y)&gt;<span class="number">0.00000001</span>: </span><br><span class="line">    <span class="keyword">print</span> count,x </span><br><span class="line">    count+=<span class="number">1</span> </span><br><span class="line">    y=x </span><br><span class="line">    x=(<span class="number">2.0</span>/<span class="number">3.0</span>)*x+(num*<span class="number">1.0</span>)/(x*x*<span class="number">3.0</span>) </span><br><span class="line">  <span class="keyword">return</span> x </span><br><span class="line"> </span><br><span class="line">print(cube_newton(<span class="number">27</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习(01)</title>
      <link href="/2019/09/22/python1/"/>
      <url>/2019/09/22/python1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开始系统学习python</p><p>本节主要回顾python的基本语法</p><a id="more"></a><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由字母数字下划线组成，开头不能是数字，区分大小写</p><ul><li>单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import</code> 而导入。</li><li>以双下划线开头的 <code>__foo</code>代表类的私有成员</li><li>以双下划线开头和结尾的 <code>__foo__</code>代表 Python 里特殊方法专用的标识，如 <strong><strong>init</strong>()</strong> 代表类的构造函数。</li></ul><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><ul><li><p>多行语句</p></li><li><p>多行注释</p></li><li><p>Python 可以同一行显示多条语句，方法是用分号 <strong>;</strong> 分开</p></li><li><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 <strong>,</strong>。</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure></li></ul><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p><p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int(x [,base ])         将x转换为一个整数  </span><br><span class="line">long(x [,base ])        将x转换为一个长整数  </span><br><span class="line">float(x )               将x转换到一个浮点数  </span><br><span class="line">complex(real [,imag ])  创建一个复数  </span><br><span class="line">str(x )                 将对象 x 转换为字符串  </span><br><span class="line">repr(x )                将对象 x 转换为表达式字符串  </span><br><span class="line">eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象  </span><br><span class="line">tuple(s )               将序列 s 转换为一个元组  </span><br><span class="line">list(s )                将序列 s 转换为一个列表  </span><br><span class="line">chr(x )                 将一个整数转换为一个字符  </span><br><span class="line">unichr(x )              将一个整数转换为Unicode字符  </span><br><span class="line">ord(x )                 将一个字符转换为它的整数值  </span><br><span class="line">hex(x )                 将一个整数转换为一个十六进制字符串  </span><br><span class="line">oct(x )                 将一个整数转换为一个八进制字符串</span><br></pre></td></tr></table></figure><p>Python math 模块提供了许多对浮点数的数学运算函数。</p><p>Python cmath 模块包含了一些用于复数运算的函数。</p><h3 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h3><p><mark>ASCII编码是1个字节，而Unicode编码通常是2个字节。</mark></p><p>把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><p>Python的字符串类型是<code>str</code>，在内存中以Unicode表示，传输时需要转换成<code>bytes</code>对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示</p><p>字符串开头的含义</p><ul><li>b </li><li>r 非转义原生字符</li><li>u unicode编码字符，python3默认字符串编码方式。</li></ul><p>使用<code>encode</code>和<code>decode</code>进行编解码</p><h3 id="List和tuple"><a href="#List和tuple" class="headerlink" title="List和tuple"></a>List和tuple</h3><p>list</p><ul><li>有序集合</li></ul><p>tuple</p><ul><li><p>初始化后无法修改的有序列表</p></li><li><p>在定义的时候，tuple的元素就必须被确定下来</p></li><li><p>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义</p></li></ul><h3 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h3><p>dict</p><ul><li><p>又称map，使用键-值（key-value）存储，具有极快的查找速度</p></li><li><p>判断key不存在</p><ul><li>通过<code>in</code>判断key是否存在</li><li>通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value</li></ul></li><li><p>dict是用空间来换取时间的一种方法。</p></li><li><p>hasn算法决定key不可变</p></li></ul><p>set</p><ul><li>不重复的key的集合</li></ul><p>注意不可变对象，例如<code>str</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UI设计尺寸问题——移动端</title>
      <link href="/2019/09/18/ui/"/>
      <url>/2019/09/18/ui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近正在做前端的UI，本来以为会是一件很简单的事情，但一来二去也搞了整整一天。其中最让我郁闷的是在了PS设置画布尺寸的时候没有做充分的调查，理解错了同学口中的尺寸意义，导致UI画完了才发现尺寸整整小了一圈😂怎么办？重画呗~</p><p>这次我吸取教训，整理了相关资料，这次一定要一举击破像素尺寸问题！</p><a id="more"></a><h2 id="物理尺寸"><a href="#物理尺寸" class="headerlink" title="物理尺寸"></a>物理尺寸</h2><h3 id="英寸"><a href="#英寸" class="headerlink" title="英寸"></a>英寸</h3><p>英寸(inch)是衡量设备尺寸的常用单位</p><p>它代表的是屏幕对角线的长度</p><blockquote><p>一英寸≈2.54cm</p></blockquote><p><img src="/2019/09/18/ui/16ac3a65a02a95cd.png" alt="img"></p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>像素是屏幕的最小单位，所有图片都是由无数个像素点构成。</p><p>像素应该是用来衡量尺寸的，像素点和尺寸成正比</p><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><blockquote><p>分辨率即垂直和水平方向上的像素点数,例如<code>1080*1920</code></p></blockquote><p>指具体设备的屏幕像素尺寸，一般我们所说的手机或者电脑等物理设备的分辨率的时候就是指屏幕分辨率</p><p>屏幕分辨率越高不代表屏幕越清晰，这还要取决设备的物理尺寸。换句话说，分辨率要和物理尺寸搭配才能体现清晰度，因为它直接能表现的是屏幕所能容纳的总的像素点数，如果设备物理尺寸不同，比较分辨率应该意义不大。当然这里的像素应该指的是物理像素，这点之后会提到。</p><p><strong>这里要记住的是屏幕分辨率/设备独立像素(逻辑像素) = 倍率（设备像素比）这个结果才能真正定义清晰度</strong></p><h3 id="图像分辨率"><a href="#图像分辨率" class="headerlink" title="图像分辨率"></a>图像分辨率</h3><p>即图片所含的像素点数，表示一张图片在垂直和水平方向上的像素点数</p><p>和屏幕分辨率的定义差不多，只不过一个是定义屏幕的一个是定义图片的。同一尺寸下分辩率越高，图片越清晰</p><p><img src="/2019/09/18/ui/16ac3a653fc492ca.jpg" alt="img"></p><h3 id="PPI（Pixel-per-Inch）"><a href="#PPI（Pixel-per-Inch）" class="headerlink" title="PPI（Pixel per Inch）"></a>PPI（Pixel per Inch）</h3><blockquote><p>每英尺包含的像素点数，可以用来描述屏幕的清晰程度</p></blockquote><p>PPI越高，图片质量越清晰。</p><p>这里注意在设计的时候一般约定</p><p><mark><strong>手机屏幕使用72PPI，海报使用300PPI</strong></mark></p><p>据说PPI达到300以上，就会给人真实感，因此海报的PPI要达到这个数值，而手机屏幕如果<code>PPI</code>设置过大，会导致加载过慢，卡顿的现象，一般<code>72PPI</code>也够用了</p><p><strong>PPI的计算公式</strong></p><p><img src="/2019/09/18/ui/equation.svg" alt="img"></p><p><strong>DPI（Dot per Inch）</strong></p><p>每英寸包括的点数。它可以是屏幕像素点、图片像素点也可以是打印机的墨点。</p><p><strong>在描述图片和屏幕的时候可以认为DPI和PPI两者等价</strong></p><p>在使用打印机的时候，由于打印机打印的点不是规则排列的，打印点之间会存在空隙，因此<code>DPI</code>也被称之为打印点的密度</p><p>打印机的DPI越高，打印图像的精细程度越高，同时墨点的耗费量和打印时间也越长</p><h2 id="逻辑像素和物理像素"><a href="#逻辑像素和物理像素" class="headerlink" title="逻辑像素和物理像素"></a>逻辑像素和物理像素</h2><p>以上我们看到的像素都是真实的像素，是物理像素</p><p>但是随着技术的发展出现了逻辑像素，即由多个物理像素组成一个逻辑像素。</p><p>这是由乔布斯在<code>Iphone4</code>的发布会上发布的视网膜屏幕（<code>Retina Display</code>）首次提出的</p><p><img src="/2019/09/18/ui/16ac3a658fe8b6ff.jpg" alt="img"></p><p>一个很直观的对比就是，由逻辑像素（假设一个逻辑像素由3个物理像素组成）组成的分辨率为1080<em>1920的图片，和一个由物理像素组成的分辨率为`1080</em>1920`的图片，在像素总量一定的前提下，前者的图片尺寸是后者的3倍，试想想如果把这个3倍的尺寸图片压缩到1倍的图片中，是不是清晰度骤然就提升了呢？</p><h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>设备独立像素，指设备的原始尺寸，这里的像素是逻辑像素</p><p>打开<code>chrome</code>的开发者工具，我们可以模拟各个手机型号的显示情况，每种型号上面会显示一个尺寸，比如<code>iPhone X</code>显示的尺寸是<code>375x812</code>，实际<code>iPhone X</code>的分辨率会比这高很多，这里显示的就是设备独立像素。</p><p><img src="/2019/09/18/ui/16ac3a664842c93c.jpg" alt="img"></p><h3 id="设备像素比DPR"><a href="#设备像素比DPR" class="headerlink" title="设备像素比DPR"></a>设备像素比DPR</h3><p><code>device pixel ratio</code>简称<code>DIP</code>或<code>DP</code>,指设备的物理像素和逻辑像素之比，也称之为倍数</p><h2 id="开发问题"><a href="#开发问题" class="headerlink" title="开发问题"></a>开发问题</h2><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p><code>iOS</code>的尺寸单位为<code>pt</code>，<code>Android</code>的尺寸单位为<code>dp</code>，<code>React Native</code>中没有指定明确的单位，它们其实都是设备独立像素<code>dp(Device Pixel)</code>。</p><h3 id="WEB端"><a href="#WEB端" class="headerlink" title="WEB端"></a>WEB端</h3><p>CSS像素使用的是设备独立像素(逻辑像素)</p><p>UI准备图的时候根据屏幕的质量（2倍屏或3倍屏）准备2倍和3倍的像素尺寸进行绘图</p><p>在写<code>CSS</code>时，我们用到最多的单位是<code>px</code>，即<code>CSS像素</code>，当页面缩放比例为<code>100%</code>时，一个CSS像素等于一个设备独立像素。</p><p>但是CSS像素是很容易被改变的，当用户对浏览器进行了放大，CSS像素会被放大，这时一个CSS像素会跨越更多的物理像素。</p><blockquote><p>页面的缩放系数 = CSS像素 / 设备独立像素</p></blockquote><h2 id="屏幕问题"><a href="#屏幕问题" class="headerlink" title="屏幕问题"></a>屏幕问题</h2><p>我们常使用P和K衡量屏幕质量</p><blockquote><p><strong>P代表的屏幕纵向的像素个数</strong></p></blockquote><p>1080P即代表屏幕纵向有1080个像素</p><blockquote><p><strong>K代表的屏幕横向的像素个数</strong></p></blockquote><p>K代表屏幕横向有几个1024像素，像像素超过4096一般就称之为4K屏</p><p>参考文章：<a href="https://juejin.im/post/5cddf289f265da038f77696c#heading-46" target="_blank" rel="noopener">关于移动端适配，你必须要知道的</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我们面对命运的时候，我们在想些什么？</title>
      <link href="/2019/09/18/destiney/"/>
      <url>/2019/09/18/destiney/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“北海，我只能告诉你，在那之前要多想”</p><a id="more"></a><p>当我点开它的一瞬间，我在想什么？无奈？恐惧？有对过去的忏悔？有在默默祈祷？不管怎样，我至少能确定一点。</p><p><strong>那一刻，我被命运主宰了。</strong></p><p>我相信命运吗？在我保持理智的时候，我是会否认的，但每当在那些关键的节点的时候，我不得不承认，我无能为力，如果说我无法控制我未来走向，那究竟是谁在控制它？大概就是命运吧。</p><h3 id="什么是命运？"><a href="#什么是命运？" class="headerlink" title="什么是命运？"></a><strong>什么是命运？</strong></h3><a href="#" style="color:#F5F6F7; text-decoration:none;" onmouseover="this.style.cssText='color:black; text-decoration:none; '" onmouseout="this.style.cssText='color:#F5F6F7;text-decoration:none'">~很显然，我们暂时无法得知命运地全貌，但是我们能粗瞥它的真容。命运不会偏袒任何一方，它所做的所有都是合理的，尽管有时候会由于我们认知的不足而出现一些看似偶然，但实则必然的事情。它是绝对公正的。但是我们需要绝对公正吗?我不知道，这个问题用我现在的思维能力无法解答。但是很有趣，希望有一天我能知道</a><p>我知道这次我又是无能为力，面对即将出现的成绩我无可奈何，我任由命运给我答案。但是也正是这个节点，我开始疯狂回忆自己的所作所为，开始假想各种各样的结局，明明知道自己的结局已经是确定的，但是潜意识中，仍希望做着看似无谓的挣扎。这就是人性吧。</p><p>我把内心的挣扎归为是自由意志的体现，这也是为什么人类能不断前进的原因。因为人类就是这样一种为了否定命运而存在的动物。因为对自由的渴望，人类不断反抗着，希望掌握自己的命运，因此他们成功了，他们自由了，所以人成了万物的灵长。永不停止抗争和失去对自由的追求，这是我们的天性。</p><h3 id="命运由我不由天"><a href="#命运由我不由天" class="headerlink" title="命运由我不由天"></a>命运由我不由天</h3><p>命运由我不由天。尽管有的时候我们无法主宰命运，但是不能让命运决定我们的未来。道路是曲折的，但是前途是光明的，在我们的自由意志下，目标的实现是必然的。</p><p>只是，现在的我，开始开始承认命运的主宰地位了。当面对命运的时候，巨大的无力感让我无可奈何。束手无策的我失去了自己的自由。尽管思考再多，我也打不倒命运。</p><p><mark><strong>“北海，我只能告诉你，在那之前要多想”</strong></mark></p><p>是啊，如果人都只是在大难临头的时候才思考，那他离毁灭也不远了。比这更可怕的是被击倒后就习惯了下跪，再痛的伤愈合后也被忘得一干二净。想，要多想，要无时不刻地想。既然记忆总会趋向逝去，那就就不断地刷新强化，用毅力去坚持！这才是我们的自由意志！</p>]]></content>
      
      
      <categories>
          
          <category> 行路匆匆，随笔悠悠 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷失的人迷失了，相逢的人还会再相逢</title>
      <link href="/2019/09/18/spirit-away/"/>
      <url>/2019/09/18/spirit-away/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-eAwEjMmq" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-eAwEjMmq"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "いつも何度でも",              author: "伊藤サチコ",              url: "http://music.163.com/song/media/outer/url?id=584155.mp3",              pic: "http://p1.music.126.net/GYWkXtrnAawOWO2nfLg3PA==/109951163028865726.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><a id="more"></a><p><img src="http://cdn.zblade.top/qiniu_img/green.jpeg" alt="海报">    </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我没有修改文字的习惯。我以为但凡是写下的都是内心的真实想法，都是转瞬即逝的珍贵记忆，尽管有时候写出来的东西混乱不堪，但是我依然能从这些文字总体会到当时我的思绪，所以说文字是一把打开记忆之门的钥匙，同时也是我不断反省的工具。因此所有的文字我都原样保留，特此说明，引以为警。</p><hr><p>本以为又将是一次痛苦的折磨，但是室友们的敞开心扉，让我真的发现了一丝的光亮。我自诩孤独，只是我一直在抗拒，或者说一直在逃避。但是我真的不是一个人，他们就是我的朋友。我无需在今晚改变什么，但是我只确定一点，以后必须坚定不移地坚持这一点认识：</p><blockquote><p><strong>我不是一个人，我有真正的朋友，对朋友请敞开心扉。</strong></p></blockquote><p><img src="/2019/09/18/spirit-away/movie.jpeg" alt="img"></p><hr><p>2019.7.2</p><blockquote><p>无面男</p></blockquote><p>他像我但不是我。我们都是孤独中找不到自我的人，我们都是被欲望填充就失去自我的人。他终究是单纯的，最后也能找到自己的归宿。而我一直都是残缺的，对世界的联系是脆弱的，故事总是美好的，即使有无奈的结局但至少还能庆幸是虚假的，我是真实存在的，所有关于我的一切都是真实地残酷，这是一条无法回头的路，没有一丝的怜悯，没有一丝的侥幸，走着走着只能像是一滴浊泪坠入汪洋，分解地悄无声息又消失地无可奈何，世界不会因此有任何改变，存在也不会有任何意义，</p><p><strong>人为什么要白白走这一遭啊！</strong></p><img src="/2019/09/18/spirit-away/great.jpg" alt="巨人名场面" style="zoom: 50%;"><hr><p>2019.7.3</p><blockquote><p>我犯了一个很大的错。我直到现在都没有真正地去接纳这个世界。我是孤独的，因为我总是把眼光局限在了自己所能触及的范围内，被自己的臆想所束缚，所想即所得，犯了唯心主义的大忌。其次，我一直都是知道路的，但是我一直在路旁伫立。在静止的时间你确实可以好好反省，但是没有了流动，你就无法打破自己设下的环，想得太多，所得的结果却总是原地打转，只有负能量在不断放大，最终毒害了自己。</p><p>所以，不要停下来啊！</p><p>遇到自己解决不了的事情就大胆说出来，所有的烦恼和困惑请及时抛弃，只有大胆地迈出这一步，你才能走出怪圈。造物主是缺乏想象力的，人们外貌特征总是会和别人有部分地相似，所有经历都像是别人经历的东拼四凑，因此没有人是特殊的，所有人都是平凡的。但平凡的人们却是富有想象力的，人们对于同样的事情，会有着不同的看法，会有着千奇百怪的解决办法，正因为大家都有一段经历的相似性，因此所有的解决方法才有了借鉴的可能，人因此能总结前人留下 的经验，为自己的经历增添新的思路看法。我们的目标从来不是解决完世界的所有问题，我们也不期望问题都有一个最佳的答案，因为我们在思考问题的过程中所迸发的无穷的智慧才是我们想要传承和发扬的宝藏。</p><p>因此人生是值得的。</p></blockquote><p>再一次看看《千与千寻》，虽说是想找寻一下内心的平静，但是其实也有很大程度是因为自诩电影爱好者总想给自己赋予一些专业度。希望能通过再次回顾电影去探索电影背后的寓意，来满足自己的虚荣心。事实证明，尽管第二次重温电影，我依然没有能抓住电影的深层含义，开场第一幕音乐一响起，我就像浸泡在了浴缸里一样，舒服得不想再去动脑子，只想好好沉浸在电影带来的观感中。再加上后半段的剧情自己也已记忆模糊，所以只晓得跟着剧情走了，别的再不想（果然还是不懂脑子比较好~），总的来说，还是值得的 。</p><p>尽管如此，第二次观影还是给我带来了一些不一样的感触。比如第一次让我开始有所反省的就是无脸男的登场。无脸男喜欢小千，却不懂什么是爱 ，我反正觉得这就是我的影子。我渴望成功和荣誉（或者爱情也不是不可以–）但是却找不到方法，或者说很迷茫。无脸男为了讨小千欢心，不断地思考什么是人所想要的，最后他发现了金子。金子珍贵又充满的魔力，单纯的他很快就迷失在了其中，金子满足了他的欲望，欲望不断地膨胀，最后可以扭曲一个人的性格。被欲望填充的无脸男变得丑陋，油腻，狂妄自大，深陷其中不能自拔。进入大学的我也是一样的迷茫，四处碰壁，或沉迷于欲望中，大学的自由让我不得不面对周围许许多多的诱惑，然而我没有成功地克制住自己，任由欲望不断膨胀，我开始失去目标，开始变得无奈和颓废，明知道自己的祸根在哪，可就是无法舍弃。我再也回不到原来的状态了，那个永不放弃，单纯，勇敢的少年，正提前变得油腻，失去斗志。怎么办？电影中解决方法很有趣，无脸男吃多了欲望，多运动就好。随着运动不断排泄出无用的欲望，直到自己再一次孑然一身，身体也重新变得空灵起来。所以简单就是一种态度。我那两个在衡中的室友想念原来的生活方式也不是没有道理，现在的我几乎也要被他们说服了。</p><blockquote><p><strong>大学的我们有太多的选择，可很多时候我们又不会选择</strong></p></blockquote><p>这样的话，不如我们就从头来过，回到高中简简单单的模式，给自己减负。这就是舍得。</p><p>全片最让我感动的就是千寻和无脸男坐上有轨列车，列车在水上缓缓驶过，车外风景变换无常，车上旅客行路匆匆，我和你肩并肩坐着，不说话，就很美好。</p><p><img src="/2019/09/18/spirit-away/partner.jpg" alt="陪伴"></p><p> 记住自己的名字，忘记了就找不回自我。简单就是一句话，不忘初心，方得始终。</p><p> 电影播完，字幕出场，伴随着《いつも何度でも》的ED响起，又是泛起一阵不舍，千言万语化作一句话：“这就是人生啊”。 立下一个不算是Flag的Flag：以后还是会再见的，《千と千尋の神隠し》</p>]]></content>
      
      
      <categories>
          
          <category> 行路匆匆，随笔悠悠 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库事务初识</title>
      <link href="/2019/09/18/transaction/"/>
      <url>/2019/09/18/transaction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p>本篇共2895字，阅读大约需要6分钟</p></blockquote><p>本次将向大家科普一些数据库事务相关知识。为什么选择数据库作为本次介绍的主角？</p><p>数据库是现代网络的重要组成部分。在信息爆炸的大数据时代，各行各业都因为大幅爆发的数据而正变得蒸蒸日上；海量，多样且在高速产生的数据正迸发着前所未有的价值。可以说，数据改变了我们的生活，也在创造我们的未来。因此，我们越来越需要更加灵活，功能强大的数据库来帮助我们存储数据，处理数据。随着时代的发展，掌握数据库操作相关技术已经是从事ICT行业的相关人员的必备选择。</p><a id="more"></a><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>在正式介绍事务之前，让我们先充充电，大致了解一些基本概念，这些在之后的学习将会用到。</p><ol><li>什么是数据库</li></ol><blockquote><p>“数据库”是以一定方式储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合</p></blockquote><ol><li>什么是数据库管理系统</li></ol><blockquote><p>数据库管理系统（Data Base Management System，简称DBMS）是位于用户应用程序与操作系统之间的一层数据管理软件，是数据库系统的核心组成部分。<strong>为用户或应用程序提供访问数据库的方法：包括数据库的建立、查询、更新以及各种数据控制</strong>。</p></blockquote><p>数据库管理系统不仅允许单个用户查询和修改数据，也可以支持多人操作。多人操作就会出现导致操作并发，出现拥塞。</p><ol><li>什么是锁</li></ol><blockquote><p>锁是数据库服务器用来控制数据资源被并行使用的一种机制。被锁的对象只允许持有用户操作，只有等锁释放后，其他用户才能有拥有锁的机会。</p><p>大部分数据库使用下面两种锁策略：</p><ul><li>写操作需要申请写锁，读操作申请读锁，一个表一次只能分配一个写锁，并且拒绝读请求直到写锁释放</li><li>写操作需要写锁，读操作不需要锁</li></ul><p>其中常见的数据库如mysql可以根据不同的存储引擎选择不同的锁策略</p></blockquote><ol><li>锁的粒度</li></ol><blockquote><p>即锁的范围，在数据库中，服务器可以在3个不同级别应用锁</p><ul><li><p>表锁</p><p>阻止多用户同时修改同一张表的数据</p></li><li><p>页锁</p><p>阻止多用户同时修改某表中的一页</p></li><li><p>行锁</p><p>阻止多用户同时修改某表中的某一行</p></li></ul></blockquote><ol><li>什么是存储引擎</li></ol><blockquote><p>数据库存储引擎是数据库底层软件组织,数据库管理系统(DBMS)使用数据引擎进行创建、查询、更新和删除数据，不同的存储引擎提供不同的存储机制、锁定水平等功能。</p><p>锁的行为是由存储引擎决定的，存储引擎使用不当会引发死锁现象</p><p>例如mysql有三种存储引擎：InnoDB MyISAM MEMORY</p></blockquote><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>我们从一个场景开始说起。假设一个人在银行办理转账业务，现在他要将1万元转账到另一个人，按一般情况，转账的过程几乎是秒级完成，但是，当我们将过程拆解，转账步骤可分为3步：1.查询账户余额是否大于1万元，2.从原账户上减去1万元，3.在对方账户上增加1万元。我们可以发现，其实只要其中任意一个环节出现偏差，都有可能造成无法挽回的重大损失。因此，为了确保银行里金额不会损失，我们可以这么做：将这一万元暂时缓存下来，只有确认对方账户已完成扣除款项的操作，才将这一万元增加到对方账户；否则，所有操作都失效，原账户取消扣除款项，对方账户也不会无故增加数量，我们把这种操作称之为事务回滚，转账的操作就是一个事务。</p><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>世界上总是充满各种各样的意外，很多都是我们无法左右的，例如服务器的损坏，突然的断电，系统的崩溃等等，如果没有事务的存在，数据库的操作可靠性将无法得到保证。但这些的前提是事务本身应当有完备的标准来确保事务本身的可靠性。因此，那些前辈们给事务指定了ACID四大特性，只有严格通过了ACID测试，事务才能发挥其作用。</p><ol><li><p>原子性</p><blockquote><p>一个事务必须被视为不可分割的最小工作单元，整个事务种的所有操作要么全部提交成功，要么全部失败回滚，对于一个 事务来说，不可能 执行其中一部分操作。</p></blockquote></li><li><p>一致性</p><blockquote><p>数据库总是从一个一致性的状态转移到另一个一致性的状态，事务不能破坏数据库的完整性以及业务逻辑的一致性。比如无论转账成功或失败，都不可能会多出或减少1万元，金额总数是不变的。&gt;</p></blockquote></li><li><p>隔离性</p><blockquote><p>一个事务在提交前的修改对其他事务通常是不可见的。一个事务不应影响其他事务的运行效果。</p></blockquote></li><li><p>持久性</p><blockquote><p>一旦事务提交，其修改是不可逆的。</p></blockquote></li></ol><p>事务的ACID特性保证了数据库操作的安全性和可靠性，但实际操作总没有想象中那么简单。同时，添加事务也需要数据库系统进行更多额外的工作，这对数据库系统的性能提出了一定的要求。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>实际上，要让事务保证完全隔离依然是一件十分困难的事情 ，完全的隔离要求数据库同一时间只能执行一个事务，这样会严重影响性能。现实中，往往是多个事务并发执行。</p><p>一旦隔离性无法得到保证，数据库的读写就会面临如下情况</p><ol><li>脏读：事务读取了未提交的数据。例如事务A读取了事务B的更新的数据，但是事务B回滚了，导致A读取的为脏数据</li><li>不可重复读：事务A读取同一数据两次，但是在两次之间事务B对该数据进行了修改并提交，导致事务A读取两次读取不一致</li><li>幻读：事务A修改全表的数据，在未提交时，事务B向表中插入或删除数据，导致事务A读取的数据与需要修改的数据不一致</li></ol><p>对此，sql标准中指定了四种隔离级别：</p><ol><li><p>未提交读（READ UNCOMMITTED）</p><p>事务可以读取为提交的数据，不做隔离控制</p></li><li><p>提交读（READ COMMITTED）</p><p>不允许未提交读,一个事务开始前，只能“看见”已提交的事务修改，是大部分数据库的默认隔离级别（mysql除外）</p></li><li><p>可重复读（REPEATED READ）</p><p>保证同一事务中多次读取同一记录的结果是一致的，一般方法是事务中对符合条件的记录上排他锁，这样其他事务不能对该事务操作的数据进行修改，是mysql的默认隔离级别</p></li><li><p>可串行化(SERIALIZABLE)</p><p>是最高隔离级别，通过强制事务串行执行，在读取的每一行数据上加锁，导致其他事务不能对数据进行操作（包括增加、删除和修改），但是此级别也要注意大量锁的超时会极大地影响性能。</p></li></ol><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">未提交读（READ UNCOMMITTED）</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">提交读（READ COMMITTED）</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">可重复读（REPEATED READ）</td><td align="left">否</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="left">可串行化(SERIALIZABLE)</td><td align="left">否</td><td align="left">否</td><td align="left">否</td></tr></tbody></table><h3 id="阻塞和死锁"><a href="#阻塞和死锁" class="headerlink" title="阻塞和死锁"></a>阻塞和死锁</h3><p>谈到并发就大致谈一下阻塞的概念</p><p>当多个事务对某一资源进行锁定时，其他没有分配到锁的事务势必等待锁的释放，这就造成了阻塞。</p><p><img src="/2019/09/18/transaction/880402-20160705084123342-493440158.png" alt="img"></p><p>当阻塞时间达到永久，就形成了死锁。</p><p>在事务中，一旦两个及以上的事务在同一资源上相互占用，并请求锁定对方占用的资源，就会引发死锁现象。</p><p>解决思路</p><ol><li>查询时间达到锁的超时时间后放弃请求</li><li>使用较低的隔离级别，让持有锁的时间减短，减少锁竞争</li><li>避免事务中用户交互，同时尽量顺序访问对象</li><li>…….</li></ol><p>不同的存储引擎对死锁实现了不同的死锁检测和死锁超时机制，因此大家在考虑死锁的解决方案的时候一定要结合数据库存储引擎的实现方案，并且做好事务日志，以便在问题发生时进行有效排查和高效解决。</p><p>事务的阻塞和死锁的出现实际上是多个进程并发的必然结果，大家如果想了解更多关于有关并发和锁，可以自行了解相关知识。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇笔者带大家初识数据库事务，初步了解了：</p><ol><li>什么是数据库、什么是锁和事务;</li><li>事务的四个特性：原子性、隔离性、一致性、持久性;</li><li>数据库读写出现的情况：脏读、幻读和不可重复读;</li><li>事务的隔离级别;</li><li>死锁的出现和解决思路</li></ol><p>因为篇幅有限，这里只能浅尝辄止。数据库是一门庞大复杂又极其重要的学科，如果大家有兴趣，鼓励大家自己凿渠引水，因笔者知识有限，文章内容所述难免存在谬误，恳请广大读者斧正。</p><h3 id="知识链接"><a href="#知识链接" class="headerlink" title="知识链接"></a>知识链接</h3><p>数据库学习《SQL学习指南》，《高性能MYSQL》</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP入门</title>
      <link href="/2019/09/18/vrrp/"/>
      <url>/2019/09/18/vrrp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着移动办公、网上购物、即时通讯、互联网金融、互联网教育等业务蓬勃发展，网络承载的业务越来越多，越来越重要。所以如何保证网络的不间断传输成为网络发展过程中急需解决的一个问题。  </p><p>对此，其中一种解决方案是，使用一套使用一套冗余备份机制，避免传统组网引发的单点故障，以便在路由器出现故障的时候及时进行链路切换，保证业务平滑进行。  </p><p>传统解决方案</p><ol><li>配备多台路由器解决单点故障</li><li>使用动态路由协议解决多网关冲突，实现链路回切</li></ol><p>但是传统方案依然存在几个问题</p><ol><li>一些动态路由协议使用广播报文进行链路切换速度上比较缓慢 </li><li>在许多情景下可能会不支持使用动态路由  </li></ol><p>于是，VRRP应运而生。</p><a id="more"></a><h2 id="VRRP的基本概念"><a href="#VRRP的基本概念" class="headerlink" title="VRRP的基本概念"></a>VRRP的基本概念</h2><p><strong>VRRP</strong></p><blockquote><p>虚拟路由冗余协议(Virtual Router Redundancy Protocol，简称VRRP)是由IETF提出的解决局域网中配置静态网关出现单点失效现象的路由协议。</p><p>VRRP能够在不改变组网的情况下，将多台路由器虚拟成一个虚拟路由器，通过配置虚拟路由器的IP地址为默认网关，实现网关的备份</p></blockquote><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>采用VRRP的链路保护机制比依赖动态路由协议的广播报文来进行链路切换的时间更短，同时弥补了不能使用动态路由情况下的链路保护。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><img src="/2019/09/18/vrrp/vrrp_1.png" alt="1559704280150"></p><ul><li>VRRP路由器：运行VRRP的设备，它可能属于一个或多个虚拟路由器。</li><li>虚拟路由器(备份组):同一个广播域的一组路由器组织成一个虚拟路由器，备份组中的所有路由器一起，共同提供一个虚拟IP地址，作为内部网络的网关地址。</li><li>虚拟IP地址：虚拟路由器的IP地址，一个虚拟路由器可以有一个或多个IP地址，由用户配置。</li><li>IP地拥有者:如果一个VRRP路由器将虚拟路由器的IP地址作为真实的接口地址，则该设备是IP地址拥有者。</li><li>虚拟MAC地址：是虚拟路由器根据虚拟路由器ID生成的MAC地址。 当虚拟路由器回应ARP请求时，使用虚拟MAC地址，而不是接口的真实MAC地址。</li><li>主IP地址：从接口的真实IP地址中选出来的一个主用IP地址，通常选择配置的第一个IP地址。<br>VRRP广播报文使用主IP地址作为IP报文的源地址。</li><li>主（Master）路由器：在同一个备份组中的多个路由器中，只有一台处于活动状态，只有主路由器能转发以虚拟IP地址作为下一跳的报文。</li><li>备份（Backup）路由器：在同一个备份组中的多个路由器中，除主路由器外，其他路由器均为备份路由器，处于备份状态。</li></ul><p><strong>状态机</strong></p><ul><li>VRRP有三种状态：初始状态、活动状态、备份状态.其状态切换过程如下：</li></ul><p><img src="/2019/09/18/vrrp/1559704314623.png" alt="1559704314623"></p><p><strong>协议报文</strong></p><p>vrrp只有一种报文：Advertisement报文；其目的IP地址是224.0.0.18（组播地址），目的MAC地址是01-00-5e-00-00-12，协议号是112</p><p>下面介绍vrrp的两种主要的工作模式：主备备份和负载分担</p><h2 id="VRRP主备备份"><a href="#VRRP主备备份" class="headerlink" title="VRRP主备备份"></a>VRRP主备备份</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="选举master"><a href="#选举master" class="headerlink" title="选举master"></a>选举master</h4><p>选举规则：1. 比较优先级 2. 优先级相同的时候，存在master则保持master状态 3. 没有master则比较接口IP地址，大的当选master</p><h4 id="备份组状态维持"><a href="#备份组状态维持" class="headerlink" title="备份组状态维持"></a>备份组状态维持</h4><ol><li>master周期性发送vrrp通告报文给组内设备，从而通知自己处于正常状态</li><li>主备切换 条件：1. master主动放弃，发送优先级为0的通告报文 2. master故障，等待Master_Down_Interval定时器超时，选举产生master。这个 切换时间叫Skew_Time，计算方式（256－Backup设备的优先级）/256（单位秒）</li><li>Master_Down_Interval定时器取值：<code>3×Advertisement_Interval＋Skew_Time</code>（单位秒）。</li></ol><h4 id="主备回切"><a href="#主备回切" class="headerlink" title="主备回切"></a>主备回切</h4><ol><li><p>如果原故障master路由器恢复，发现收到RouterB的VRRP报文中的优先级比自己低，RouterA立即抢占成为Master。</p><p>抢占模式：</p><ul><li>默认高优先级backup路由器可以抢占低优先级master路由器位置，但是如果IP地址拥有者是可用的，则它总是处于抢占的状态，并成为Master设备</li><li>注意抢占延时，默认为0，但是为了防止在网络不稳定的情况下频繁切换导致流量中断，可以设置延时时间稍长</li></ul></li><li><p>注意：如果VRRP的上行链路故障，由于主备通告正常，将无法引起主备切换</p><p>解决方法：利用VRRP的联动功能监视上行接口或链路故障，主动进行主备切换。</p></li></ol><p><img src="/2019/09/18/vrrp/1559707111077.png" alt="1559707111077"></p><h2 id="VRRP负载分担"><a href="#VRRP负载分担" class="headerlink" title="VRRP负载分担"></a>VRRP负载分担</h2><ul><li>负载分担是指多个VRRP备份组同时承担业务转发,从而解决流量分担不均，master负担过重的情况</li><li>负载分担方式需要建立多个VRRP备份组，各备份组的Master设备分担在不同设备上；单台设备可以加入多个备份组，在不同的备份组中扮演不同的角色。</li></ul><p><img src="/2019/09/18/vrrp/1559707202844.png" alt="1559707202844"></p><h2 id="VGMP简介"><a href="#VGMP简介" class="headerlink" title="VGMP简介"></a>VGMP简介</h2><p>VRRP虽然可以解决单点故障，实现主备备份，但是在配置防火墙的时候，由于防火墙功能的特殊性，在对其进行主备备份时，传统VRRP方式无法实现主、备用防火墙状态的一致性。无法实现VRRP状态一致性以及会话表状态的备份</p><p>此时，我们需要引入<strong>VGMP</strong>（VRRP Group Management Protocol）</p><p>VGMP提出VRRP管理组的概念，将同一台防火墙上的多个VRRP备份组都加入到一个VRRP管理组，由管理组统一管理所有VRRP备份组。通过统一控制各VRRP备份组状态的切换，来保证管理组内的所有VRRP备份组状态都是一致的。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>当防火墙上的VGMP为Active/Standby状态时，组内所有VRRP备份组的状态统一为Active/Standby状态。</li><li>状态为Active的VGMP也会定期向对端发送HELLO报文，通知Standby端本身的运行状态（包括优先级、VRRP成员状态等）</li><li>VGMP HELLO报文发送周期缺省为1秒。当Standby端三个HELLO报文周期没有收到对端发送的HELLO报</li><li>文时，会认为对端出现故障，从而将自己切换到Active状态。</li></ul><p><img src="/2019/09/18/vrrp/1559707907266.png" alt="1559707907266"></p><h4 id="VGMP管理机制"><a href="#VGMP管理机制" class="headerlink" title="VGMP管理机制"></a>VGMP管理机制</h4><p><strong>状态一致性管理</strong></p><p>VGMP管理组控制所有的VRRP备份组统一切换。</p><p><strong>抢占管理</strong></p><p>当原来出现故障的主设备故障恢复时，其优先级也会恢复，此时可以重新将自己的状态抢占为主。</p><p>用VGMP实现防火墙的备份以及故障自动迁移从而保证业务连续性的方法也属于防火墙的双机热备技术的一部分，因为篇幅有限，这里不再展开。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天我们从现实一个问题作为切入点，简单介绍了利用VRRP做路由冗余备份，同时针对防火墙的特性，引申出VGMP的概念，也算是揭开了防火墙神秘面纱的一角。网络安全越来越成为我们生活中不可忽视的一部分，对于安全方面知识，下次有机会我们再继续讲述吧。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICT </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo入门搭建</title>
      <link href="/2019/09/18/hexofirst/"/>
      <url>/2019/09/18/hexofirst/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了大概三天的时间，总算大致把博客的雏形搞定了。虽然说很多东西最终都不是我自己完成的，只是在别人的基础上在表面进行敲敲打打（后悔自己学习了后端，囧Orz）但不管怎样，没有文章的博客终归只是没有灵魂的躯壳，尽管自己的水平有限，但是还是希望能通过书写自己的一点一滴来见证自己的成长吧！  现在就开始我们今天的内容——hexo博客的搭建  </p><a id="more"></a><hr><h2 id="初识Hexo"><a href="#初识Hexo" class="headerlink" title="初识Hexo"></a>初识Hexo</h2><p>先让我们了解一下hexo：</p><blockquote><p> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  </p></blockquote><p>比起它的前辈wordpress，hexo最大的特点就是使用markdown编写文章，同时以node.js作为运行环境，你只需要在服务器上安装好node.js环境，就可以轻松安装hexo，这时你再回头看看wordpress的LAMP环境，是不是觉得繁琐又笨重呢？（hh其实hexo还是wordpress都是非常主流的博客框架，两者的优劣我们之后有时间或许可以再讨论）  </p><h2 id="Hexo基本搭建"><a href="#Hexo基本搭建" class="headerlink" title="Hexo基本搭建"></a>Hexo基本搭建</h2><p><strong>知识前提</strong></p><p>安装hexo前你最好了解的基本知识  </p><ol><li>markdown语法基础 </li><li>node.js基本认识（其实用不到多少，但是最好能了解一点语法基础） </li><li>html、css基础（为你个性化博客很有帮助） </li><li>github相关知识（程序猿必备）  </li></ol><p><strong>基础环境</strong></p><p>本人用的Win10</p><h3 id="搭建的基本流程"><a href="#搭建的基本流程" class="headerlink" title="搭建的基本流程"></a>搭建的基本流程</h3><blockquote><p>环境配置-&gt;本地调试-&gt;服务器部署</p></blockquote><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><strong>安装git bash</strong></p><p>首先本地安装Git，具体可以自行百度。</p><p>安装完后再任意目录下点击右键</p><p><img src="/2019/09/18/hexofirst/gitbash.png" alt="gitbash"></p><p>进入git bash，之后我们的操作都将在这里进行  </p><p>（PS：实测cmd也可以，如果遇到一些操作在git bash里得不到响应可以在cmd中尝试进行，注意要在相同的路径下面）  </p><p><strong>安装node.js</strong></p><p>首先安装好node.js环境，直接<a href="https://www.baidu.com/link?url=tsLvkFN4hyDOi_ejiKpM3c6W8yAJ1rwGwDZotldsgjO&wd=&eqid=a2cbec9f00038dbd000000065cf3fb8d" target="_blank" rel="noopener">官网</a>下载就行了</p><p>安装好后查看版本</p><p>正常无误即可</p><p><strong>安装hexo</strong></p><p>进入gitbash，使用node.js的包管理器npm，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h4 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h4><p>安装完成后在自己想要放博客的文件夹根目录下，输入</p><p>可以看到hexo生成以下文件</p><ul><li>node_modules（项目依赖包）</li><li>public（存放生成页面）</li><li>scaffolds：命令生成文章等的模板</li><li>source：资源库，放置比如文章、跳转页面等</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>这时你已经可以启动你的博客了，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    //清除之前的配置，防止博客配置出错的必要操作 </span><br><span class="line">hexo generate  //可缩写为hexo g   创建资源文件 </span><br><span class="line">hexo server    //可缩写为hexo s   启动server服务器</span><br></pre></td></tr></table></figure><p>当显示下面代码时说明启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$INFO</span>  Start processing</span><br><span class="line"><span class="variable">$INFO</span>  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop</span><br></pre></td></tr></table></figure><p>按流程输入<code>localhost:4000</code>当你看到下图说明基本配置成功了</p><p><img src="/2019/09/18/hexofirst/hexo_bg.png" alt="hexo_bg"></p><h4 id="3-服务器部署"><a href="#3-服务器部署" class="headerlink" title="3.服务器部署"></a>3.服务器部署</h4><p>现在我们就要在公网上部署hexo了</p><p>这里我用的是Github Page对博客进行托管，有条件的同学也可以自己部署到服务器上，这是暂时不提  </p><p>首先需要在GitHub上新建一个仓库，命名形式为<code>yourusername.github.io</code>（<strong>yourusername是你的git账户,重要</strong>)  </p><p>然后进入setting查看是否开启</p><p><img src="/2019/09/18/hexofirst/github1.png" alt="github1"></p><p><img src="/2019/09/18/hexofirst/github2.png" alt="github2"></p><p>接着创建ssh密钥对，将公钥放在GitHub上</p><p>在全局setting-&gt;SSH and GPG keys-&gt;new SSH keys添加  </p><p><img src="/2019/09/18/hexofirst/github3.png" alt="github3"></p><p>如何本地创建SSH密钥对，请查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name <span class="string">"Your Name"</span></span><br><span class="line"><span class="variable">$git</span> config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><p>接着打开博客文件夹根目录，前往_config.yml文件，找到如下字段，修改自己的repo  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:   type: git   repo: git@github.com:yourusername/yourusername.github.io.git   branch: master</span><br></pre></td></tr></table></figure><p>然后在gitbash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate  //可缩写为hexo g</span><br><span class="line">hexo deploy    //可缩写为hexo d  部署hexo</span><br></pre></td></tr></table></figure><p>打开<code>https://yourgithubname.github.io</code>，看到与上一步相同的页面，证明博客搭建完成    </p><p>至此，博客的基本搭建基本完成。</p><p>接着如果需要书写博客，使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;layout&gt; &quot;title&quot;</span><br></pre></td></tr></table></figure><p>这里的对应我们要添加的内容，如果是posts就是添加新的文章，如果是page就是添加新的页面。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish &lt;layout&gt; &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发布内容，实际上是将内容从drafts（草稿）文件夹移到posts（文章）文件夹。  接着重启就行  </p><h2 id="hexo优化配置"><a href="#hexo优化配置" class="headerlink" title="hexo优化配置"></a>hexo优化配置</h2><p>虽然搭建了基本的博客，但是每次初始化时都要花很多时间（可以但没必要）  因此我们可以写一个脚本自动完成固定命令的执行  新建一个txt文件，输入  1 2 3 hexo clean hexo g hexo d 保存后将后缀名改成.bat就可以点击执行了  </p><h3 id="个性化你的Hexo-博客"><a href="#个性化你的Hexo-博客" class="headerlink" title="个性化你的Hexo 博客"></a>个性化你的Hexo 博客</h3><p>真正让人充满激情的地方在于它可以让你个性化，真正把博客作为你自己的小天地，这次我就结合自己搭建博客的实例分析一下如何个性化自己的博客吧</p><h4 id="添加主题NEXT"><a href="#添加主题NEXT" class="headerlink" title="添加主题NEXT"></a>添加主题NEXT</h4><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><h4 id="菜单图标选择"><a href="#菜单图标选择" class="headerlink" title="菜单图标选择"></a>菜单图标选择</h4><p>如何选择博客上丰富的图标？难道要下载到本地？为了提升博客的打开速度，建议所有的静态资源能通过HTTP下载就HTTP下载，因为部署博客的服务器带宽终究有限，如果因为加载静态资源而占用带宽，会降低博客的阅读体验</p><p>这里那<code>awesome icon</code>举例</p><p>在首页寻找自己想要的图标，然后再<strong>主题配置文件</strong>的菜单图标项填<code>&lt;! class=&quot;fa fa-fw fa-envelope&gt;&lt;/i&gt;</code>即可</p><h4 id="引入评论插件gitalk"><a href="#引入评论插件gitalk" class="headerlink" title="引入评论插件gitalk"></a>引入评论插件gitalk</h4><p>gitalk插件将GitHub作为你的数据库，评论用户通过GitHub账号登录并发表评论，非常适合国内的开发者进行及交流讨论</p><ol><li>注册oauth app</li><li>下载gitalk插件</li><li></li></ol><p><a href="https://segmentfault.com/a/1190000014085547" target="_blank" rel="noopener">集成Gitalk</a></p><h3 id="引入Aplayer"><a href="#引入Aplayer" class="headerlink" title="引入Aplayer"></a>引入Aplayer</h3><p><a href="https://music.xf1433.com/?name=%E5%B0%91%E5%B9%B4%E5%B0%91%E5%A5%B3&type=kugou" target="_blank" rel="noopener">外链生成地址</a></p><h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><p>搜索模块 config.yml没有注意空格  注意备份  require是node.js的语法。。</p><p>打包js文件  出现各种都是npm包的问题</p><p>json.package是用来处理依赖问题的，有了它，就不用像远古时代那样一个个install，同时写好webpack.comfig.js才可以打包成功</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用java优雅爬虫——Jsoup</title>
      <link href="/2019/09/18/jsoup/"/>
      <url>/2019/09/18/jsoup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>jsoup是一个用于处理真实HTML的Java库。它提供了一个非常方便的API，用于提取和操作数据，使用最好的DOM，CSS和类似jquery的方法。  </p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><strong>jsoup概述</strong></li><li><strong>使用场景</strong></li></ol><ul><li><strong>DOM解析</strong></li><li><strong>CSS选择器</strong></li><li><strong>HTML过滤</strong></li></ul><ol start="3"><li><strong>逻辑分析</strong></li><li><strong>总结</strong></li></ol><h2 id="jousp概述"><a href="#jousp概述" class="headerlink" title="jousp概述"></a>jousp概述</h2><p>官方解释：</p><blockquote><p> jsoup是一个用于处理真实HTML的Java库。它提供了一个非常方便的API，用于提取和操作数据，使用最好的DOM，CSS和类似jquery的方法。  </p></blockquote><p>个人接触到Jsoup是在用java写爬虫时，苦恼于大量使用正则匹配不仅降低了代码的可读性，相对也比较费时费力。这时候，一款爬虫框架突然映入眼帘，那就是jsoup。</p><p>作为一款轻量，功能强大的爬虫框架，jsoup让简单抓取网页信息变得优雅，便捷。  虽然是一个java库，但是它的使用逻辑却无比接近于jQuery，以至于只要是熟悉或是了解JQuery的人可以轻而易举地上手这款框架。  </p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h3><p>jsoup的dom解析异常简单吗，只需要new一个ducumnet对象即可实现获取这个网页元素，接下来以解析一个网页为例。可以看到，将网页转化成ducument类，之后的Element类以及其子类都可以看成是一个个节点，通过调用相关方法实现整个文件节点的遍历。同时，Element类的getElementByTag让人很容易联想到js中的相关方法，因此只要有点JS基础和java基础的人看这段代码都不会觉得陌生。  这里以查询学生成绩信息为例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsoupTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">(String stu_num, String id_num)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String testURL = <span class="string">"http://jwc.cqupt.edu.cn/showS tuQmcj.php"</span>;  <span class="comment">//目标网页</span></span><br><span class="line">        Connection con = Jsoup.connect(testURL);                    <span class="comment">//获取连接</span></span><br><span class="line">        con.data(<span class="string">"xh"</span>, stu_num);                                <span class="comment">//填写参数</span></span><br><span class="line">        con.data(<span class="string">"sfzh"</span>, id_num);</span><br><span class="line">        Document document = con.post();                         <span class="comment">//选择发送方式,获取整个网页信息，存在documnet类里</span></span><br><span class="line"></span><br><span class="line">        Element pTable = document.body().getElementsByClass(<span class="string">"pTable"</span>).get(<span class="number">0</span>);   <span class="comment">//通过class属性 ，获取子类元素</span></span><br><span class="line"></span><br><span class="line">        Elements trs = pTable.getElementsByTag(<span class="string">"tbody"</span>).get(<span class="number">0</span>).children();</span><br><span class="line">        trs.forEach(tr -&gt; &#123;                                                               <span class="comment">//遍历&lt;tr&gt;标签</span></span><br><span class="line">            <span class="keyword">if</span> (!tr.children().isEmpty()) &#123;</span><br><span class="line">                Element element = tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">0</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!element.text().equals(<span class="string">"课程类型"</span>)) &#123;</span><br><span class="line">                    GradeInfo gradeInfo = <span class="keyword">new</span> GradeInfo();</span><br><span class="line">                    gradeInfo.setProperty(tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">0</span>).text());</span><br><span class="line">                    String term = tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">1</span>).text();</span><br><span class="line"></span><br><span class="line">                    System.out.println(term);</span><br><span class="line">                    System.out.println(tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">2</span>).text());</span><br><span class="line">                    System.out.println(tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">5</span>).text());</span><br><span class="line">                    System.out.println(tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">6</span>).text());</span><br><span class="line">                    System.out.println(tr.getElementsByTag(<span class="string">"td"</span>).get(<span class="number">7</span>).text());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2019/09/18/jsoup/love_2.png" alt="love_2"></p><p>只需要几行就可以完成对html的基本解析，而且所有的操作都可以用js的逻辑解释。或多或少比原生正则匹配要实用的多。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>jsoup决心是想向前端靠齐了，除了基本的DOM解析操作外，它同时加入了CSS选择器，这个操作乍一看似乎没什么用处，但是当你真正去学习如何使用后你的就会发现这是多少好用。在针对较复杂地语句匹配时，使用选择器可以轻而易举地筛选出你想要的元素，可以帮你节省大量代码。  使用方法：可以用Element.select(String selector)和Element.select(String selector)实现.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBySelect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String testURL = <span class="string">"&lt;html&gt;"</span> +</span><br><span class="line">               <span class="string">"&lt;head&gt;&lt;/head&gt;"</span>+</span><br><span class="line">               <span class="string">"&lt;body&gt;"</span>+<span class="string">"&lt;span id=\"grade\"&gt;成绩&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"subject\"&gt;课程&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"name\"&gt;姓名&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"stunum\"&gt;学号&lt;/span&gt;"</span>+</span><br><span class="line">               <span class="string">"&lt;span class = \"score\"&gt;85&lt;/span &gt;"</span>+<span class="string">"&lt;span class = \"class\"&gt;语文&lt;/span&gt;"</span>+<span class="string">"&lt;span class = \"stuname\"&gt;小明&lt;/span class = \"number\"&gt;"</span>+<span class="string">"&lt;span&gt;201721001&lt;/span&gt;"</span>+</span><br><span class="line">               <span class="string">"&lt;span id=\"grade\"&gt;80&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"subject\"&gt;数学&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"name\"&gt;小明&lt;/span&gt;"</span>+<span class="string">"&lt;span id = \"stunum\"&gt;2017210001&lt;/span&gt;"</span>+</span><br><span class="line">               <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;  <span class="comment">//利用字符串拼接出HTML标签</span></span><br><span class="line">                     <span class="comment">//获取连接</span></span><br><span class="line"></span><br><span class="line">       Document document = Jsoup.parse(testURL);                         <span class="comment">//将HTML转化成可遍历地document类</span></span><br><span class="line">       Elements elements = document.select(<span class="string">"span:matchesOwn(^8)"</span>);</span><br><span class="line">       <span class="keyword">for</span> (Element element:</span><br><span class="line">            elements) &#123;</span><br><span class="line">           System.out.println(elements.text());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2019/09/18/jsoup/love_3.png" alt="love_3"></p><p>CSS选择器类似于JQuery和CSS中使用的选择器，可以通过特定的选择器语法将对指定元素进行筛选  对于选择器的筛选，这里推荐一篇文章：<a href>详解JSOUP的Select选择器语法 </a>(链接已失效）</p><h3 id="HTML过滤"><a href="#HTML过滤" class="headerlink" title="HTML过滤"></a>HTML过滤</h3><p>这个功能也是偶然看见的，不过现在想来也理所当然，过滤网页信息本身就是Jsoup分内的事。当时正在看XSS攻击方面的知识，突然发现jsoup在安全方面已早有考虑，已本身优秀的HTML解析为基础，抵御XSS攻击自然也是十分优秀。  </p><p>XSS注入本质就是在HTML中插入特定的标签改变原来标签的含义，因此防止XSS攻击的本质是能分辨并及时过滤掉多余或是无效的HTML标签。对此，jsoup有一个白名单机制，通过clean方法可以一步通过白名单设置的过滤规则清理所有的标签，同时也会保留适当标签和禁止图片显示的功能。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xss过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自带的basicWithImages 白名单</span></span><br><span class="line"><span class="comment">     * 允许的便签有a,b,blockquote,br,cite,code,dd,dl,dt,em,i,li,ol,p,pre,q,small,span,</span></span><br><span class="line"><span class="comment">     * strike,strong,sub,sup,u,ul,img</span></span><br><span class="line"><span class="comment">     * 以及a标签的href,img标签的src,align,alt,height,width,title属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Whitelist whitelist = Whitelist.basicWithImages();</span><br><span class="line">    <span class="comment">/** 配置过滤化参数,不对代码进行格式化 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.OutputSettings outputSettings = <span class="keyword">new</span> Document.OutputSettings().prettyPrint(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑时一些样式是使用style来进行实现的</span></span><br><span class="line">        <span class="comment">// 比如红色字体 style="color:red;"</span></span><br><span class="line">        <span class="comment">// 所以需要给所有标签添加style属性</span></span><br><span class="line">        whitelist.addAttributes(<span class="string">":all"</span>, <span class="string">"style"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">clean</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jsoup.clean(content, <span class="string">""</span>, whitelist, outputSettings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        String text = <span class="string">"&lt;a href=\"http://www.baidu.com/a\" onclick=\"alert(1);\"&gt;sss&lt;/a&gt;&lt;script&gt;alert(0);&lt;/script&gt;sss"</span>;</span><br><span class="line">        System.out.println(clean(text));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑分析-jsoup"><a href="#逻辑分析-jsoup" class="headerlink" title="逻辑分析 jsoup"></a>逻辑分析 jsoup</h2><p>作为一款轻便的爬虫框架，全部由Jonathan Hedley独立写出，因此代码相比其他一些笨重的框架要简洁很多，我通过网上一些解析jsoup源码的博客，加深对jsoup的理解。废话不多说，让我们看看jsoup的魅力吧！  </p><p>借用别人博客里整理的图片，可以看到，让java能像js那样使用类似标签的嵌套存储的方法就是在这里就是利用自定义的node抽象类，将属性存储在类似树状的结构中这，这样做不仅有利于之后的DOM树解析，也容易遍历，有利于性能的提高。  我们再看看CSS选择器的实现逻辑。这是selector的源码列表  </p><p>jsoup在关于selector的实现大致是利用Evaluator抽象类，Selector选择的表达式都会通过QueryParser最终编译到对应的Evaluator类上，然后此类又有很多派生子类，从而分别实现不同功能。逻辑思路还算简单，但是具体代码我还不曾仔细研读，因此在此也不再赘述。不过其中进行嵌套实现对象的思路还是值得借鉴的。  </p><p>在HTML过滤方面，jsoup防止XSS攻击的大致策略是  </p><ol><li>将HTMl字符串解析成document对象，这样保证了无法通过注入一段无用的脚本和字符串拼接导致网页的功能发生了改变 </li><li>将一些高频出现的危险系数较高的标签加入白名单进行提前过滤  </li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>jsoup在操作便捷度上已经展现了它的实力，但是在性能上，考虑到它的底层还是通过正则进行匹配，因此对于一些一些简单的HTML解析或许直接正则的最快的；但是，当HTML页面比较复杂，这便是jsoup大显身手的时候了。  </p><p>但是jsoup还是有很多不足，例如  </p><ol><li>只能处理静态页面，对于动态显示或者后端渲染后后的页面无法正常进行爬取，这时就需要利用其他的工具例如httpunit进行模拟的ajax请求。 </li><li>jsoup总归还只是个人项目，在后期的维护方面还是存在一定的不确定性，如果需要用应用在一些大型的长久性的项目中还需三思。 </li><li>jsoup的底层实现还是正则匹配，尽管jsoup本身够轻量，但它依然需要解析整个HTML，再进行进一步的搜索，因此在一些简单的网页解析中，肯定还是直接上正则来的直接来的方便。但是如果网页的结构足够复杂，使用正则的的代码量巨大，那么jsoup不失为一个不错的选择。 </li></ol><p>总而言之，jsoup作为一款轻量的爬虫框架，在HTML解析方面的表现还是很不错的，如果平时希望偷点懒，节省点时间和代码量，完全推荐大家使用。  </p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown常用格式测试</title>
      <link href="/2019/09/18/test/"/>
      <url>/2019/09/18/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是对hexo 渲染的markdown模板的测试，同时也贴一下常用的markdown书写格式和插件使用，做一下备忘~</p><a id="more"></a><p>以下所有代码只需要复制到markdown编辑器即可使用，同时要注意编辑器的版本和兼容性，比如我之间用的typora就总是不能正常显示html格式🤣，还好博客重建前更新了版本又可以用了…</p><h2 id="插件测试"><a href="#插件测试" class="headerlink" title="插件测试"></a>插件测试</h2><h3 id="Aplayer播放测试"><a href="#Aplayer播放测试" class="headerlink" title="Aplayer播放测试"></a>Aplayer播放测试</h3>        <div id="aplayer-OSDllpoa" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-OSDllpoa"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "三轮学",              author: "Jeff Williams",              url: "http://music.163.com/song/media/outer/url?id=5231510.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer <span class="string">"可以了"</span> <span class="string">"陈奕迅"</span> <span class="string">"音乐地址"</span> <span class="string">"图片地址"</span>  %&#125;</span><br><span class="line">外链地址http:<span class="comment">//music.163.com/song/media/outer/url?id=478384.mp3</span></span><br></pre></td></tr></table></figure><h3 id="Dplayer播放测试"><a href="#Dplayer播放测试" class="headerlink" title="Dplayer播放测试"></a>Dplayer播放测试</h3><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://lc-dtfowewy.cn-n1.lcfile.com/e84e4b6519b04ed3c497/400%E7%B1%B3.mp4","pic":"http://devtest.qiniudn.com/若能绽放光芒.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer <span class="string">"url=视频地址"</span> <span class="string">"pic=图片地址"</span> <span class="string">"loop=yes"</span> <span class="string">"theme=#FADFA3"</span> <span class="string">"autoplay=false"</span>%&#125;</span><br></pre></td></tr></table></figure><h2 id="MARKDOWN格式测试"><a href="#MARKDOWN格式测试" class="headerlink" title="MARKDOWN格式测试"></a>MARKDOWN格式测试</h2><p><mark>我是黑体字(不，你是高亮)</mark></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color="red">我是红色</font></p><p><font color="#008000">我是绿色</font></p><p><font color="Blue">我是蓝色</font></p><p><font size="5">我是尺寸</font></p><p><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>我是黑体字(不，你是高亮)<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span>我是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>我是红色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span>我是绿色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span>我是蓝色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>我是尺寸<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>我是黑体，绿色，尺寸为5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="博客插件记录"><a href="#博客插件记录" class="headerlink" title="博客插件记录"></a>博客插件记录</h2><p>我用的博客主题是<a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">sagiri</a>这里感谢原作者的和辛勤努力和慷慨开源，在部署的时候遇到了一些插件缺失的问题，这里稍微提一下，做一下备份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.FastClick = <span class="built_in">require</span>(<span class="string">'fastclick'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'lazyload'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'fancybox'</span>)(<span class="built_in">window</span>.$);</span><br><span class="line"><span class="built_in">window</span>.notie = <span class="built_in">require</span>(<span class="string">'corner-notie'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./utils'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./motion'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./affix'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./pisces'</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./scrollspy'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./post-details'</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./bootstrap'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./evanyou'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./leancloud'</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./share'</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./scroll'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./since'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./title'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./type'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./kanban'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./mix'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./clipboard'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./pjax'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./online'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./search'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./cursor-effects'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能mysql学习笔记</title>
      <link href="/2019/09/18/mysql-h/"/>
      <url>/2019/09/18/mysql-h/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://cdn.zblade.top/qiniu_img/wallhaven-g8dm6e.jpg" alt></p><p>最近在看《高性能MySql》，感觉有些地方确实需要反复咀嚼才能真正领会，现在将内容总结了一下，方便以后二次阅读</p><a id="more"></a><p><a href="https://blog.csdn.net/suifeng3051/article/details/52669644" target="_blank" rel="noopener">数据库索引原理及优化</a></p><h2 id="Mysql架构"><a href="#Mysql架构" class="headerlink" title="Mysql架构"></a>Mysql架构</h2><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>为MVCC是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开 销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>MVCC的实现,是通过保存数据在某个时间点的快照来实现的。也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的</p><h2 id="创建高性能索引"><a href="#创建高性能索引" class="headerlink" title="创建高性能索引"></a>创建高性能索引</h2><p>基础</p><p>Mysql只能高效地使用最左前缀列</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>索引是在存储层实现的，不是在服务器层</p><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><p>默认索引，除了Archive不支持之外</p><p>不同引擎使用的存储结构不同，NDB集群存储引擎使用T-Tree结构，innoDB使用B+Tree结构</p><p>不同引擎使用性能也不同，MyISAM使用前缀压缩技术使索引更小，通过数据的物理位置引用被索引的列；InonDB按照原数据格式压缩存储，根据主键引用被索引的列</p><blockquote><p>B-Tree表示值都是按顺序存储，每一个叶子到根的距离相同</p></blockquote><p><img src="http://cdn.zblade.top/qiniu_img/1570244126303.png" alt></p><p>查询从索引的根节点开始，根节点中存放的是指向叶子节点的指针</p><p>叶子节点的指针指向被索引数据</p><p>B-Tree索引适用于全键型、键值范围和键前缀查找中的最左前缀查找</p><ul><li><p>全值匹配</p><p>与所有列进行匹配</p></li><li><p>最左前缀匹配</p><p>只使用索引的第一列</p></li><li><p>列前缀匹配</p><p>某列的开头部分</p></li><li><p>范围值匹配</p></li><li><p>精确匹配某一列并范围匹配另外一列</p></li><li><p>只访问索引的查询</p><p>即覆盖查询</p></li><li><p>顺序查询，比如Order By</p></li></ul><p>使用限制</p><ul><li>非最左匹配查询</li><li>不能跳过索引的列</li><li>如果存在某列的范围查询，右边所有列都无法使用索引优化查询</li></ul><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>基于hash表实现，必须精确匹配才有效</p><p>只有memory引擎显式支持且默认支持</p><p><img src="http://cdn.zblade.top/qiniu_img/1570244148591.png" alt></p><p>分为Slot槽和Value值</p><p>查找方法：计算hash值-&gt;找到指向指针-&gt;查找数据行</p><p>限制</p><ul><li>只包含hash值和指针，不存储字段值，所以必须读取数据行。不过内存访问行速度较快，可以不考虑</li><li>索引数据不是按照索引值顺序存储，无法应用于排序</li><li>不支持部分匹配索引</li><li>只支持等值查询</li><li>存在哈希冲突，即不同索引列值具有相同的哈希值，当存在哈希冲突的时候必须遍历链表中的所有行指针，逐行比较</li><li>索引维护代价随着哈希冲突的增加越来越大</li></ul><p>InnDB存在自适应哈希索引，当判断出查找频繁的索引值时，在B-Tree的基础上再创建一个Hash索引</p><blockquote><p>可以创建自定义hash索引，进行伪hash索引，针对索引值较大时，但是必须保证索引值的唯一性</p></blockquote><h4 id="R-Tree空间索引"><a href="#R-Tree空间索引" class="headerlink" title="R-Tree空间索引"></a>R-Tree空间索引</h4><p>MyISAM引擎支持空间索引，用作地理位置存储</p><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>查找文本中的关键字</p><p>…</p><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul><li>减少服务器扫描数据量</li><li>帮助服务器避免排序和临时表</li><li>将随机IO变成3顺序IO</li></ul><p>三星原则</p><ul><li>索引是否将相关记录放在一起</li><li>索引中的数据顺序和排序顺序一致</li><li>包含查询中需要的全部列</li></ul><h3 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h3><h4 id="使用独立的列"><a href="#使用独立的列" class="headerlink" title="使用独立的列"></a>使用独立的列</h4><p>将索引列单独放在比较符号的一侧</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>使用前缀索引索引很长的字符串，能让索引更小更快但是Mysql无法使用前缀索引做ORDER BY和GROUP BY，也无法使用前缀索引做覆盖扫描</p><p><strong>索引的选择性</strong>：不重复的索引值和数据表的记录总数的比值；唯一索引的选择性是1</p><p>尽可能要让前缀索引的选择性和全值素银的选择性相匹配</p><h4 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h4><p>出现合并索引（Using Union）意味着索引建立糟糕</p><ul><li>多个AND条件可以使用一个包含所有列的多列索引代替</li><li>多个OR条件会消耗大量CPU和内存资源</li></ul><h4 id="选择合适顺序"><a href="#选择合适顺序" class="headerlink" title="选择合适顺序"></a>选择合适顺序</h4><p>一般思路：</p><ol><li><p>将选择性最高的列放在索引最前列（不需要考虑排序或分组时）</p></li><li><p><img src="http://cdn.zblade.top/qiniu_img/1570257036180.png" alt></p><p>计算选择性，选择性低的放在最前面</p></li><li><p>注意具体情况，留心WHERE字句中的排序、分组和范围条件等因素对查询的影响</p></li></ol><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>聚簇索引是一种数据存储方式，不是索引类型</p><p>InnoDB中竖数据行存放在索引的叶子页中，聚簇即数据行和相邻键值紧凑存储在一起</p><p><img src="http://cdn.zblade.top/qiniu_img/1570257308095.png" alt></p><p>优点</p><ul><li>数据访问更快</li><li>使用覆盖索引扫扫描查询时可以直接使用主键值</li><li>数据相关保存</li></ul><p>缺点</p><ul><li>数据放在内存就没有优势了</li><li>插入速度依赖于插入顺序，按照主键插入最快</li><li>更新聚簇索引列代价较高</li><li>更新时存在列分裂的问题，即当页面插满的时候会将该页分裂容下该行，从而占用更多磁盘空间</li><li>聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候</li><li>二级索引（非聚簇索引）很大</li><li>二级索引访问需要两次索引查找，因为二级索引节点保存的是行主键值而不是物理位置指向的指针</li></ul><h4 id="InnoDB和MyISAM的数据分布"><a href="#InnoDB和MyISAM的数据分布" class="headerlink" title="InnoDB和MyISAM的数据分布"></a>InnoDB和MyISAM的数据分布</h4><ul><li>MyISAM更加简单，二级索引存放的是指针；InnoDB存放的索引的主键值</li></ul><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><ul><li>只读取索引即可以获取数据行，减少数据访问量；也更容易放入内存中</li><li>索引是顺序存储的，适合IO密集型</li><li>聚簇索引+覆盖索引比较高效</li></ul><p>无法执行覆盖索引的原因</p><ul><li>索引必须存索引列的值，mysql中一般只用B-Tree</li><li>没有任何索引能覆盖这个查询</li><li>不能使用LIKE操作</li></ul><p>改良方法</p><ul><li><p>使用延迟关联</p><p><img src="http://cdn.zblade.top/qiniu_img/1570260614053.png" alt></p></li></ul><h4 id="索引扫描作为排序"><a href="#索引扫描作为排序" class="headerlink" title="索引扫描作为排序"></a>索引扫描作为排序</h4><p>explain中type值为”index”说明使用索引扫描</p><p>当索引的列顺序和ORDERBY子句顺序一致并且所以列的排序方向一样时，mysql才能使用索引做结果排序</p><h4 id="压缩（前缀压缩）索引"><a href="#压缩（前缀压缩）索引" class="headerlink" title="压缩（前缀压缩）索引"></a>压缩（前缀压缩）索引</h4><p>MyISAM可以压缩索引大小</p><p>方法</p><ul><li>先保存索引块的第一个值</li><li>其他值和第一个值比较得到相同前缀的字节数和剩余的不通过后缀部分</li></ul><p>优势</p><ul><li>占用更小的空间</li></ul><p>缺点</p><ul><li>无法使用二分查找等，有些操作如倒序操作速度不行</li><li>不适合CPU密集型应用</li></ul><h4 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h4><p>杜绝重复索引</p><p>冗余索引出现情况</p><ul><li>需要扩展索引又要保证原索引性能不被影响</li><li>注意索引越多维护成本越高</li></ul><h4 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h4><p>索引可以让査询锁定更少的行。</p><p>InnoDB在二级索引上使用共享(读）锁，但访问主键索引需要排他（写）锁。这消除了使用覆盖索引的可能性，并且使得SELECT FOR UPDATE比LOCK IN SHARE MODE或非锁定査询要慢很多。</p><h3 id="索引案例"><a href="#索引案例" class="headerlink" title="索引案例"></a>索引案例</h3><h4 id="支持多种过滤条件"><a href="#支持多种过滤条件" class="headerlink" title="支持多种过滤条件"></a>支持多种过滤条件</h4><ul><li>字段选择少的放在前面</li><li>范围查找的字段放在后面</li></ul><h4 id="避免多个范围查询"><a href="#避免多个范围查询" class="headerlink" title="避免多个范围查询"></a>避免多个范围查询</h4><p>范围列后面无法索引</p><p>可以尝试将一个范围列变成等值列进行比较</p><h4 id="优化排序"><a href="#优化排序" class="headerlink" title="优化排序"></a>优化排序</h4><ul><li>使用延迟关联，通使用覆盖索引查询返回需要的主键，再根据这些主键关联原表获得需要的行</li></ul><p><img src="http://cdn.zblade.top/qiniu_img/1570265050077.png" alt></p><h3 id="维护索引和表"><a href="#维护索引和表" class="headerlink" title="维护索引和表"></a>维护索引和表</h3><p>维护目的</p><ul><li>找到并修复损坏的表</li><li>维护准确而的索引统计信息</li><li>较少碎片</li></ul><h4 id="更新索引统计信息"><a href="#更新索引统计信息" class="headerlink" title="更新索引统计信息"></a>更新索引统计信息</h4><p>MySQL的查询优化器有两个API</p><ul><li>records_in_range()  InnoDB传入两个边界值得到估算值</li><li>info() 返回个各种类型数据</li></ul><blockquote><p>MySQL优化器使用的是基于成本的模型，而衡量成本的主要指标就是一个查询需要扫描多少行</p></blockquote><p><strong>ANALYZE TABLE：</strong>重新生成统计信息</p><h4 id="减少索引和数据碎片"><a href="#减少索引和数据碎片" class="headerlink" title="减少索引和数据碎片"></a>减少索引和数据碎片</h4><p><strong>行碎片</strong></p><p>这种碎片指的是数据行被存储为多个地方的多个片段中。即使査询只从索引中访问一行记录，行碎片也会导致性能下降。</p><p><strong>行间碎片</strong></p><p>行间碎片是指逻辑上顺序的页，或者行在磁盘上不是顺序存储的。行间碎片对诸如全表扫描和聚簇索引扫描之类的操作有很大的影响，因为这些操作原本能够从磁盘上顺序存储的数据中获益。</p><p><strong>剩余空间碎片</strong></p><p>剩余空间碎片是指数据页中有大量的空余空间。这会导致服务器读取大量不需要的数据，从而造成浪费。</p><p><code>MylSAM</code>表，这三类碎片化都可能发生。但``InnoDB<code>不会出现短小的行碎片；</code>InnoDB`会移动短小的行并重写到一个片段中。</p><p>解决方法</p><ul><li>OPTIMIZE TABLE或者导出再导入的方式来重新整理数据</li><li>MylSAM引擎以通过排序算法重建索引的方式来消<br>除碎片</li><li>InnoDB可以先删除，然后再重新创建索引的方式来消除索引的碎片化。</li><li><code>mysql&gt; ALTER TABLE &lt;table&gt; ENGINE=&lt;efigiwe&gt;;</code></li></ul><p>总结</p><h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><h3 id="为什么查询速度会变慢"><a href="#为什么查询速度会变慢" class="headerlink" title="为什么查询速度会变慢"></a>为什么查询速度会变慢</h3><p>查询的生命周期</p><p>查询的时间花费</p><h3 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h3><p>査询性能低下最基本的原因是访问的数据太多</p><ol><li>确认应用程序是否在检索大量超过需要的数据。这通常意味着访问了太多的行，但有时候也可能是访问了太多的列。</li><li>确认MySQL服务器层是否在分析大量超过需要的数据行。</li></ol><p>举例</p><ul><li><p>查询不需要记录</p><p>使用LIMIT限制查询数量</p></li><li><p>多表关联时返回全部列</p></li></ul><ul><li><p>总是取出全部列</p></li><li><p>重复查询相同的数据</p></li></ul><h4 id="查看是否扫描额外的记录"><a href="#查看是否扫描额外的记录" class="headerlink" title="查看是否扫描额外的记录"></a>查看是否扫描额外的记录</h4><p>影响开销的三指标</p><ul><li>响应时间</li><li>扫描行数</li><li>返回行数</li></ul><p><strong>响应时间</strong></p><p>由服务时间和排队时间组成</p><p><strong>扫描行数</strong></p><p>理想情况应该和返回行数相同</p><p>访问类型</p><ul><li>全表扫描(最慢)</li><li>索引扫描</li><li>范围扫描</li><li>唯一索引查询</li><li>常数引用（最快）</li></ul><p>mysql使用where的方式</p><ul><li>在索引中使用where条件来过滤不匹配的记录。</li><li>使用索引覆盖扫描返回记录</li><li>从数据表中返回数据，然后过滤不满足条件的记录</li></ul><p>解决方案</p><ul><li>使用索引覆盖扫描</li><li>改变库表结构</li><li>重写查询</li></ul><h3 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h3><h4 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h4><p>按时清理数据</p><p><img src="http://cdn.zblade.top/qiniu_img/1570278297049.png" alt></p><h4 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h4><p><img src="http://cdn.zblade.top/qiniu_img/1570278403072.png" alt></p><ul><li>缓存效率更高</li><li>执行单个查询时减少锁的竞争</li><li>数据库的高性能和可扩展</li></ul><h3 id="查询执行"><a href="#查询执行" class="headerlink" title="查询执行"></a>查询执行</h3><h4 id="查询执行的过程"><a href="#查询执行的过程" class="headerlink" title="查询执行的过程"></a>查询执行的过程</h4><p><img src="http://cdn.zblade.top/qiniu_img/1570278487204.png" alt></p><ol><li>客户端发送一条査询给服务器。</li><li>服务器先检査査询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行査询。</li><li>将结果返回给客户端。</li></ol><h4 id="MySQL客户端-服务器通信协议"><a href="#MySQL客户端-服务器通信协议" class="headerlink" title="MySQL客户端/服务器通信协议"></a>MySQL客户端/服务器通信协议</h4><p>半双工，优点简单快速，缺点数据包越长性能越低</p><p><strong>查询状态</strong></p><p><strong>Sleep</strong><br>线程正在等待客户端发送新的请求。<br><strong>Query</strong><br>线程正在执行查询或者正在将结果发送给客户端。<br><strong>Locked</strong><br>在MySQL服务器层，该线程正在等待表锁。在存储引擎级别实现的锁，例如InnoDB的行锁，并不会体现在线程状态中。对于MylSAM来说这是一个比较典型的状态，但在其他没有行锁的引擎中也经常会出现。<br><strong>Analyzing and statistics</strong><br>线程正在收集存储引擎的统计信息，并生成査询的执行计划。<br><strong>Copying to tmp table [on disk]</strong><br>线程正在执行査询，并且将其结果集都复制到一个临时表中，这种状态一般要么是在做GROUP BY操作，要么是文件排序操作，或者是UNION操作。如果这个状态后面还有 “on disk”标记，那表示MySQL正在将一个内存临时表放到磁盘上。<br><strong>Sorting result</strong><br>线程正在对结果集进行排序。</p><p><strong>Sending data</strong><br>这表示多种情况：线程可能在多个状态之间传送数据，或者在生成结果集，或者在向客户端返回数据。</p><h4 id="查询优化处理"><a href="#查询优化处理" class="headerlink" title="查询优化处理"></a>查询优化处理</h4><p>解析SQL、预处理、优化SQL执行计划</p><p><strong>语法解析器和预处理</strong></p><p>通过关键字解析SQL生成一棵解析树，使用mysql的语法规则验证和解析查询</p><p>预处理器根据MySQL规则进一步检查解析树是否合法，下一步还会验证权限</p><p><strong>查询优化器</strong></p><p>优化器将语法树转化成执行计划，其作用就是找到最合适的执行计划</p><p>MySQL使用基于成本的优化，使用了复杂的优化策略</p><p>优化策略</p><ul><li>静态优化：直接对解析树分析，完成优化</li><li>动态优化：将WHERE转化 ，运行时优化，和查询的上下文有关</li></ul><p>MySQL对查询的静态优化只做一次，但是对动态优化则每次执行时都需要重新评估</p><p><strong>能处理的优化类型</strong></p><p>重新定义关联表的顺序</p><p>外连接转化成内连接</p><p>使用等价变换原则</p><p>优化COUNT()、MIN()、MAX()</p><p>预估并转化成常数表达式</p><p>覆盖索引扫描</p><p>子查询优化</p><p>提前终止查询</p><p>等值传播</p><p>列表IN()的比较</p><p>….</p><p><strong>数据和索引的统计信息</strong></p><p>统计信息由存储引擎实现，MySQL査询优化器在生成査询的执行计划时，需要向存储引擎获取相应的统计信息</p><p><strong>执行计划</strong></p><p>mysql是一棵左侧深度优先的树而不是平衡树</p><p><img src="http://cdn.zblade.top/qiniu_img/1570292149269.png" alt></p><p><strong>关联查询优化器</strong></p><p>MySQL会选择合适的关联顺序让查询成本京可能降低</p><p>但是等关联表的个数增加的时候，执行计划的搜索空间(需要检查的阶乘种关联顺序)增长迅速，此时优化器就会使用贪婪模式寻找最优关联顺序</p><p><strong>排序优化</strong></p><p>索引排序不起作用的时候MySQL需要自己进行排序，如果数据量小则在内存中进行，如果数据量大则需要使用磁盘，这个过程统一称为文件排序(<strong>filesort</strong>)</p><p>排序算法</p><ul><li><p>两次传输排序</p><p>读取行指针和需要排序的字段，对其进行排序，然后再根据排序结果读取所需要的数据行。</p></li><li><p>单次传输排序</p><p>先读取査询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结果</p></li></ul><h4 id="查询执行引擎"><a href="#查询执行引擎" class="headerlink" title="查询执行引擎"></a>查询执行引擎</h4><p>查询优化阶段每一个表创建了一个handler实例，优化器调用实例接口（``handler API`）获取表相关信息</p><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><ul><li><p>即使不需要返回结果集，mysql任然会返沪查询的一些信息</p></li><li><p>查询如果可以别缓存，mysql也会在这个阶段将结果存放到查询缓存中</p></li><li><p>返回是一个增量、逐步返回的过程，好处是服务器无需存储大量洁后果，也不会因为要返回太多接轨而消耗大量内存；而且，客户端也呢个第一时间获得返回的结果</p></li><li></li></ul><h3 id="查询优化器的局限性"><a href="#查询优化器的局限性" class="headerlink" title="查询优化器的局限性"></a>查询优化器的局限性</h3><p><strong>关联子查询</strong></p><p>MySQL会将相关的外层表压到子査询中，它认为这样可以更高效率地查找到数据行</p><p><img src="http://cdn.zblade.top/qiniu_img/1570328865332.png" alt></p><p>优化</p><ul><li><img src="http://cdn.zblade.top/qiniu_img/1570328883309.png" alt></li><li>使用函数GR0UP_C0NCAT()在IN()中构造一个由逗号分隔的列表(性能不佳)</li></ul><ul><li><p>等效改写</p><p><img src="http://cdn.zblade.top/qiniu_img/1570328958854.png" alt></p></li></ul><p>一般使用左外连接比子查询稍快</p><p>去重时会产生临时中间表，此时子查询比关联更快</p><p>具体问题具体分析</p><h4 id="UNION限制"><a href="#UNION限制" class="headerlink" title="UNION限制"></a>UNION限制</h4><p>有时，MySQL无法将限制条件从外层“下推”到内层，这使得原本能够限制部分返回结果的条件无法应用到内层査询的优化上。</p><h4 id="索引合并优化"><a href="#索引合并优化" class="headerlink" title="索引合并优化"></a>索引合并优化</h4><p>当WHERE子句中包含多个复杂条件的 时候，MySQL能够访问单个表的多个索引以合并和交叉过滤的方式来定位需要査找的行</p><h4 id="等值传递"><a href="#等值传递" class="headerlink" title="等值传递"></a>等值传递</h4><p>例如，有一个非常大的IN()列表，而MySQL优化器发现存在WHERE、ON或者USING的子句，将这个列表的值和另一个表的某个列相关联。那么优化器会将IN()列表都复制应用到关联的各个表中。</p><h4 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h4><p>MySQL无法并行执行查询</p><h4 id="哈希关联"><a href="#哈希关联" class="headerlink" title="哈希关联"></a>哈希关联</h4><p>mysql不支持哈希关联，所有关联都是嵌套循环关联</p><h4 id="松散索引扫描"><a href="#松散索引扫描" class="headerlink" title="松散索引扫描"></a>松散索引扫描</h4><p>MySQL不支持松散索引扫描，无法按照不连续的方式扫描一个索引</p><h4 id="最大值和最小值优化"><a href="#最大值和最小值优化" class="headerlink" title="最大值和最小值优化"></a>最大值和最小值优化</h4><p>使用LIMIT重写查询，从而使得扫描记录数尽可能少</p><h4 id="在同一张表上查询更新"><a href="#在同一张表上查询更新" class="headerlink" title="在同一张表上查询更新"></a>在同一张表上查询更新</h4><p>一般i情况MySQL不允许对哦同一张表同时进行查询和更新。</p><p>但是可以通过生成表的形式绕过限制</p><p><img src="http://cdn.zblade.top/qiniu_img/1570331815508.png" alt></p><h3 id="查询优化器的提示"><a href="#查询优化器的提示" class="headerlink" title="查询优化器的提示"></a>查询优化器的提示</h3><p>略</p><h3 id="优化特定类型的查询"><a href="#优化特定类型的查询" class="headerlink" title="优化特定类型的查询"></a>优化特定类型的查询</h3><h4 id="优化COUNT-查询"><a href="#优化COUNT-查询" class="headerlink" title="优化COUNT()查询"></a>优化COUNT()查询</h4><p><code>COUNT()</code>：</p><ul><li>它可以统计某个列值的数量，也可以统计行数。在统计列值时要求列值是非空的（不统计NULL)。如果在C0UNT()的括号中指定了列或者列的表达式，则统计的就是这个表达式有值的结果数</li><li>另一个作用是统计结果集的行数。当MySQL确认括号内的表达式值不可能为空时，实际上就是在统计行数</li></ul><p>MylSAM的C0UNTO函数总是非常快，不过这是有前提条件的，即只有没有任何WHERE条件的COUNT(*)才非常快</p><p><strong>优化策略</strong></p><ul><li>使用近似值</li><li>索引覆盖扫描</li></ul><h4 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h4><ul><li>确保ON或者USING子句中的列上有索引</li><li><strong>确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。</strong></li></ul><h4 id="优化GROUP-BY和DISTINCT"><a href="#优化GROUP-BY和DISTINCT" class="headerlink" title="优化GROUP BY和DISTINCT"></a>优化GROUP BY和DISTINCT</h4><p>无法使用索引的时候，Group BY使用两种策略完成</p><ul><li>使用临时表</li><li>使用文件排序进行分组</li></ul><p>在分组査询的SELECT中直接使用非分组列通常导致结果是不定的，当索引改变，或者优化器选择不同的优化策略时都可能导致结果不一样</p><p>如果没有通过ORDER BY子句显式地指定排序列，当査询使用<code>GROUP BY</code>子句的时候，<strong>结果集会自动按照分组的字段进行排序</strong>。如果不关心结果集的顺序，而这种默认排序又导致了需要文件排序，则可以使用<code>ORDER BY NULL</code>,让MySQL不再进行文件排序。也可以在<code>GROUP BY</code>子句中直接使用<code>DESC</code>或者<code>ASC</code>关键字，使分组的结果集按需要的方向排序</p><h4 id="优化GROUP-BY-WITH-ROLLUP"><a href="#优化GROUP-BY-WITH-ROLLUP" class="headerlink" title="优化GROUP BY WITH ROLLUP"></a>优化GROUP BY WITH ROLLUP</h4><p>尽可能将该功能转移到应用程序中</p><h4 id="优化LIMIT分页"><a href="#优化LIMIT分页" class="headerlink" title="优化LIMIT分页"></a>优化LIMIT分页</h4><ul><li>尽可能地使用索引覆盖扫描</li><li>做一次关联操作再返回所需的列（关联延迟）</li><li>利用offset记录上次查询点直接向下查询</li></ul><p><img src="http://cdn.zblade.top/qiniu_img/1570335148560.png" alt></p><h4 id="优化-SQL-CALC-FOUND-ROWS"><a href="#优化-SQL-CALC-FOUND-ROWS" class="headerlink" title="优化 SQL_CALC_FOUND_ROWS"></a>优化 SQL_CALC_FOUND_ROWS</h4><p>分页的时候，另一个常用的技巧是在LIMFT语句中加上``SQL_CALC_FOUND_ROWS`提示(hint)，这样就可以获得去掉LIMIT以后满足条件的行数，因此可以作为分页的总数</p><p>另一种做法是先获取并缓存较多的数据，然后每次分页从缓存中获取</p><h4 id="优化UNION查询"><a href="#优化UNION查询" class="headerlink" title="优化UNION查询"></a>优化UNION查询</h4><p>否则就一定要使用UNION ALL,这一点很重要。如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这会导致对整个临时表的数据做唯一性检査。这样做的代价非常高。</p><h4 id="静态查询分析"><a href="#静态查询分析" class="headerlink" title="静态查询分析"></a>静态查询分析</h4><h4 id="使用用户自定义变量"><a href="#使用用户自定义变量" class="headerlink" title="使用用户自定义变量"></a>使用用户自定义变量</h4><p>不能使用的情况</p><ul><li>使用自定义变量的査询，无法使用査询缓存。</li><li>不能在使用常量或者标识符的地方使用自定义变量,例如表名、列名和LIMIT子句中。</li><li>用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信。</li><li>如果使用连接池或者持久化连接，自定义变量可能让看起来毫无关系的代码发生交互（如果是这样，通常是代码bug或者连接池bug,这类情况确实可能发生）。</li><li>在5.0之前的版本，是大小写敏感的，所以要注意代码在不同MySQL版本间的兼容性问题。</li><li>不能显式地声明自定义变量的类型。确定未定义变量的具体类型的时机在不同</li><li>MySQL版本中也可能不一样。如果你希望变量是整数类型，那么最好在初始化的时候就赋值为0,如果希望是浮点型则赋值为0.0,如果希望是字符串则赋值为”，用&lt;M户自定义变量的类型在赋值的时候会改变。MySQL的用户自定义变量是一个动态<br>类型。</li><li>MySQL优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想的方式运行。</li><li>赋值的顺序和赋值的时间点并不总是固定的，这依赖于优化器的决定。实际情况可能很让人困惑，后面我们将看到这一点。</li><li>赋值符号：=的优先级非常低，所以需要注意，赋值表达式应该使用明确的括号。</li><li>使用未定义变量不会产生任何语法错误，如果没有意识到这一点，非常容易犯错。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="队列表"><a href="#队列表" class="headerlink" title="队列表"></a>队列表</h4><h4 id="计算两点之间距离"><a href="#计算两点之间距离" class="headerlink" title="计算两点之间距离"></a>计算两点之间距离</h4><h4 id="使用用户自定义的函数"><a href="#使用用户自定义的函数" class="headerlink" title="使用用户自定义的函数"></a>使用用户自定义的函数</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://cdn.zblade.top/qiniu_img/1570511358318.jpeg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List类知识点总结</title>
      <link href="/2019/09/10/collection2/"/>
      <url>/2019/09/10/collection2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>List类知识点总结</p><a id="more"></a><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>链表集合，继承<code>AbstractSequentialList</code>，实现<code>Deque</code>、<code>Cloneable</code>、<code>Serializable</code>。</p><ol><li>实现<code>Deque</code>，可以当作双端序列使用</li><li><code>Cloneable</code>：可被克隆</li><li><code>Serializable</code>：可被序列化</li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// 长度</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">// 头节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last; <span class="comment">// 尾节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item; <span class="comment">// 元素</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">// 下一节点</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">// 上一节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可见LinkedList实现的是双向链表</strong></p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法大全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Queue接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> <span class="comment">// 尾部添加一个节点</span></span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span> <span class="comment">// 获取头节点元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> <span class="comment">// 尾部添加元素</span></span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span> <span class="comment">// 获取头节点元素</span></span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span> <span class="comment">// 获取头节点元素并移除</span></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span> <span class="comment">// 获取头节点元素并移除</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Deque接口的方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> <span class="comment">// 添加元素至头节点</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> <span class="comment">// 添加元素至尾节点</span></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 迭代器</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> <span class="comment">// 逆序迭代器</span></span></span><br><span class="line"><span class="function">E <span class="title">getFirst</span><span class="params">()</span> <span class="comment">// 获取头节点元素</span></span></span><br><span class="line"><span class="function">E <span class="title">getLast</span><span class="params">()</span> <span class="comment">// 获取尾节点元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> <span class="comment">// 头部添加元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> <span class="comment">// 尾部添加元素</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span> <span class="comment">// 获取头节点元素，空集合返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span> <span class="comment">// 获取尾节点元素，空集合返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span> <span class="comment">// 获取头节点元素并移除，空集合返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span> <span class="comment">// 获取尾节点元素并移除，空集合返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span> <span class="comment">// 出栈，弹出链表头节点</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> <span class="comment">// 压栈，添加在链表头部（与add()相反）</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> <span class="comment">// 移除指定节点元素</span></span></span><br><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span> <span class="comment">// 获取头节点元素并移除</span></span></span><br><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span> <span class="comment">// 获取尾节点元素并移除</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> <span class="comment">// 移除指定元素（出现的第一个）</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> <span class="comment">// 移除指定元素（出现的最后一个）</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 其它</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> <span class="comment">// 指定位置添加一个节点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">// 尾部添加指定集合中所有元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> <span class="comment">// 指定位置添加指定集合中所有元素</span></span></span><br><span class="line"><span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 获取指定位置节点元素</span></span></span><br><span class="line"><span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> <span class="comment">// 替换指定位置元素</span></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 获取指定位置节点元素并移除</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> <span class="comment">// 获取元素首次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> <span class="comment">// 逆序获取元素首次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">// 清除所有元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> <span class="comment">// 是否包含某元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">// 大小</span></span></span><br><span class="line"><span class="function">Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> <span class="comment">// spliterator</span></span></span><br><span class="line"><span class="function">Object[] <span class="title">toArray</span><span class="params">()</span> <span class="comment">// 将集合以数组形式返回</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T[] <span class="title">toArray</span><span class="params">(T[] a)</span> <span class="comment">// 将集合以数组形式返回，类型、大小由参数决定，不足返回null</span></span></span><br><span class="line"><span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="comment">// 浅复制集合</span></span></span><br></pre></td></tr></table></figure><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last; <span class="comment">// 保存last</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>); <span class="comment">// Node(pre, element, next)，创建新节点，next为null</span></span><br><span class="line">    last = newNode; <span class="comment">// last为新节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode; <span class="comment">// 链表为空时，初始化first</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode; <span class="comment">// 链表不为空时，上一节点的next指向newNode</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index); <span class="comment">// 检查index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) <span class="comment">// 尾部添加节点</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev; <span class="comment">// 保存原位置节点前一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ); <span class="comment">// 创建新节点，设置pre，next</span></span><br><span class="line">    succ.prev = newNode; <span class="comment">// 设置原位置节点的pre为新节点</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode; <span class="comment">// 原位置节点前一个节点为null，设置新节点为头节点</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode; <span class="comment">// 原位置节点的前一个节点的next为新节点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c); <span class="comment">// 转为addAll(index, c)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index); <span class="comment">// 检查index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line">    Object[] a = c.toArray(); <span class="comment">// 转为数组</span></span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">        succ = <span class="keyword">null</span>; <span class="comment">// 插入到尾部</span></span><br><span class="line">        pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        succ = node(index); <span class="comment">// 插入到位置i（0&lt;=i&lt;size）</span></span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123; <span class="comment">// 遍历节点，进行插入操作</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>); <span class="comment">// 设置pre，next</span></span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode; <span class="comment">// pred为null，重置first</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode; <span class="comment">// 设置前一个节点的next</span></span><br><span class="line">        pred = newNode; <span class="comment">// 重置pred</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = pred; <span class="comment">// 插入到尾部，重置last</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pred.next = succ; <span class="comment">// 设置插入的最后一个节点的next</span></span><br><span class="line">        succ.prev = pred; <span class="comment">// 设置原位置节点的prev</span></span><br><span class="line">    &#125;</span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代方式"><a href="#迭代方式" class="headerlink" title="迭代方式"></a>迭代方式</h4><ol><li>随机访问：list.get(i)，效率超级低</li><li>迭代器：list.iterator()，效率最高</li><li>foreach：for(Object i: list)，效率其次</li></ol><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote><p>动态数组，继承AbstractList，实现List、RandomAccess、Cloneable、Serializable。</p></blockquote><ul><li>Q：ArrayList继承了<code>AbstractList</code>，为什么还要实现List？</li><li><a href="http://stackoverflow.com/questions/4387419/why-does-arraylist-have-implements-list" target="_blank" rel="noopener">A</a>：显式表明<code>ArrayList</code>实现了<code>List</code>，<code>AbstractList</code>只是为了提升<code>List</code>实现的代码重用。</li></ul><ol><li><code>RandomAccess</code>：标记接口，表明List的某个实现支持随机访问。</li><li><code>Cloneable</code>：可被克隆``</li><li><code>Serializable</code>：可被序列化</li></ol><p>不是线程安全，多线程可以选择<code>Vector</code>或<code>CopyOnWriteArrayList</code>。</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据的数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="comment">// ArrayList中实际数据的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><ul><li><code>Q：elementData</code>需要序列化，为什么还要被<code>transient</code>修饰，被<code>transient</code>修饰了，为什么还能被序列化？</li><li><a href="http://zhidao.baidu.com/link?url=8xuaZ3lw4AJxK_vE7Xz0hVDntSPa3PTR-ub58AsH5Gm7sLsCFHIWD800MCBRC5_-KcOdIUsZw1LAenZE4SNetq" target="_blank" rel="noopener">A</a>：<code>elementData</code>是一个缓存数组，通常会预留容量，所以<code>elementData</code>中只有实际存放的元素需要被序列化，故被<code>transient</code>修饰防止所有元素被序列化；<code>ArrayList</code>中元素还能被序列化是因为它重写了<code>writeObject()</code>方法（debug看到这个方法是被反射获取调用的）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    s.writeInt(size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]); <span class="comment">// 只序列化size个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可变的空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化指定大小的数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment">    *如果指定的集合为null，throws NullPointerException。 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>第一个构造函数会将<code>elementData</code>初始化为空数组</li><li>第二个构造函数会将<code>elementData</code>初始化为指定大小的数组</li></ul><p>细心的同学一定会发现 ：<strong>以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。</strong> </p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>方法大全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> <span class="comment">// 尾部添加元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> <span class="comment">// 在指定位置添加元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">// 尾部添加集合中所有元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> <span class="comment">//　指定位置添加集合中所有元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">// 清除所有元素</span></span></span><br><span class="line"><span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="comment">// 浅复制集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> <span class="comment">// 是否包含某元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> <span class="comment">// 确保ArrayList的容器能装下minCapacity个元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> <span class="comment">// 对每个元素执行action操作（迭代器模式）</span></span></span><br><span class="line"><span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 获取指定位置元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> <span class="comment">// 获取指定元素位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="comment">// 是否为空集合</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> <span class="comment">// 获取迭代器</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> <span class="comment">// 获取指定位置，倒序查找</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> <span class="comment">// 返回迭代器ListIterator</span></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 在指定位置返回迭代器ListIterator</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 移除并获取指定位置元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> <span class="comment">// 移除元素，仅移除遍历到的第一个</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">// 移除指定集合中所有元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> <span class="comment">// 移除满足条件的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> <span class="comment">// 按照operator操作替换所有元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">// 只保留包含在指定集合中的元素</span></span></span><br><span class="line"><span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> <span class="comment">// 设置指定位置的元素值</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">// 集合大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> <span class="comment">// 根据指定比较方式comparator排序</span></span></span><br><span class="line"><span class="function">Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> <span class="comment">// 获取集合的spliterator，不会用</span></span></span><br><span class="line"><span class="function">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> <span class="comment">// 获取fromIndex-toIndex的子集合</span></span></span><br><span class="line"><span class="function">Object[] <span class="title">toArray</span><span class="params">()</span> <span class="comment">// 转化为数组</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T[] <span class="title">toArray</span><span class="params">(T[] a)</span> <span class="comment">// 创建一个新数组传入，返回新数组类型元素，元素不够置null</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> <span class="comment">// 缩减ArrayList容器的大小至真实存放元素的数量</span></span></span><br></pre></td></tr></table></figure><h4 id="add-扩容机制"><a href="#add-扩容机制" class="headerlink" title="add/扩容机制"></a>add/扩容机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// 确保容器能装下(size+1)个元素</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">// 数组越界检查</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// arraycopy(src, srcPos, dest, destPos, length) 将src[srcPos, srcPos+length]复制到dest[destPos, destPos+length]</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组越界检查</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index)); <span class="comment">// 越界抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当添加元素时，会调用如下方法，若<code>elementData</code>为空数组，则将它扩展为默认长度（<code>10</code>）的数组；若添加元素后<code>elementData</code>长度不够，将会将<code>elementData</code>扩展为原来的<code>1.5</code>倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认容器大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当要add 进第1个元素时，minCapacity为1，在Math.max()方法比较后，minCapacity 为10。</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 确保ArrayList能装下minCapacity个元素</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">        <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">       <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">       <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>具体逻辑</strong></p><p>如果通过元素值添加，确保容器能装下；如果通过索引添加，之前还需要数组越界检查</p><ul><li>当我们要 add 进第1个元素到 ArrayList 时，elementData.length 为0 （因为还是一个空的 list），因为执行了 <code>ensureCapacityInternal()</code> 方法 ，所以 minCapacity 此时为10。此时，<code>minCapacity - elementData.length &gt; 0</code>成立，所以会进入 <code>grow(minCapacity)</code> 方法。</li><li>当add第2个元素时，minCapacity 为2，此时e lementData.length(容量)在添加第一个元素后扩容成 10 了。此时，<code>minCapacity - elementData.length &gt; 0</code>不成立，所以不会进入 （执行）<code>grow(minCapacity)</code> 方法。</li><li>添加第3、4···到第10个元素时，依然不会执行grow方法，数组容量都为10。</li><li>直到添加第11个元素，<code>minCapacity</code>(为11)比<code>elementData.length</code>（为10）要大。进入<code>grow</code>方法进行扩容。</li></ul><p><strong>同时注意一下如果需要容量大于<code>MAX_ARRAY_SIZE</code>会进入<code>hugeCapacity()</code>方法</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">     <span class="comment">//对minCapacity和MAX_ARRAY_SIZE进行比较</span></span><br><span class="line">     <span class="comment">//若minCapacity大，将Integer.MAX_VALUE作为新数组的大小</span></span><br><span class="line">     <span class="comment">//若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小</span></span><br><span class="line">     <span class="comment">//MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span></span><br><span class="line">     <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">         Integer.MAX_VALUE :</span><br><span class="line">         MAX_ARRAY_SIZE;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">// 越界检查</span></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index); <span class="comment">// 取出旧值，待返回</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>; <span class="comment">// 待移动的个数</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved); <span class="comment">// 向前移动一个位置</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// 最后一个元素置null</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index); <span class="comment">// 所有元素向前移动一个位置</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c); <span class="comment">// 需要非空值，null报空指针异常</span></span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement) <span class="comment">// complement=false</span></span><br><span class="line">                elementData[w++] = elementData[r]; <span class="comment">// 只保留c中不存在的元素</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123; <span class="comment">// 不解，为什么r可能!=size</span></span><br><span class="line">            System.arraycopy(elementData, r, elementData, w, size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++) <span class="comment">// 剩余元素全置null</span></span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w; <span class="comment">// 重置size</span></span><br><span class="line">            modified = <span class="keyword">true</span>; <span class="comment">// 修改flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">// 越界检查</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element; <span class="comment">// 设置新值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue; <span class="comment">// 返回旧值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> elementData(index); <span class="comment">// elementData(int index)方法，等同于elementData[index]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>) <span class="comment">// 返回遍历到的第一个元素位置</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 不存在返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>; <span class="comment">// 使用indexOf()方法检测是否包含</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object e : c)</span><br><span class="line">        <span class="keyword">if</span> (!contains(e)) <span class="comment">// 一旦不包含某元素，返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="System-arraycopy-和Arraya-copyOf"><a href="#System-arraycopy-和Arraya-copyOf" class="headerlink" title="System.arraycopy()和Arraya.copyOf()"></a>System.arraycopy()和Arraya.copyOf()</h4><p><strong>联系：</strong></p><p>看两者源代码可以发现 copyOf() 内部实际调用了 <code>System.arraycopy()</code> 方法</p><p><strong>区别：</strong></p><p><code>arraycopy()</code> 需要目标数组，将原数组拷贝到你自己定义的数组里或者原数组，而且可以选择拷贝的起点和长度以及放入新数组中的位置 <code>copyOf()</code> 是系统自动在内部新建一个数组，并返回该数组。</p><h4 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a>ensureCapacity</h4><blockquote><p>ArrayList 源码中有一个 <code>ensureCapacity</code> 方法不知道大家注意到没有，这个方法 ArrayList 内部没有被调用过，所以很显然是提供给用户调用的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>   minCapacity   所需的最小容量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">           <span class="comment">// any size if not default element table</span></span><br><span class="line">           ? <span class="number">0</span></span><br><span class="line">           <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">           <span class="comment">// supposed to be at default size.</span></span><br><span class="line">           : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">           ensureExplicitCapacity(minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>最好在 add 大量元素之前用 <code>ensureCapacity</code> 方法，以减少增量重新分配的次数</strong></p><h4 id="迭代方式-1"><a href="#迭代方式-1" class="headerlink" title="迭代方式"></a>迭代方式</h4><ol><li>随机访问：list.get(i)，效率最高</li><li>迭代器：list.iterator()</li><li>foreach：for(Object i: list)</li></ol><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>Collections 工具类常用方法:</p><ol><li>排序</li><li>查找,替换操作</li><li>同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合)</li></ol><h3 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list, Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list, <span class="keyword">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面。</span></span></span><br></pre></td></tr></table></figure><h3 id="查找替换操作"><a href="#查找替换操作" class="headerlink" title="查找替换操作"></a>查找替换操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list, Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll, Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list, Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frequency</span><span class="params">(Collection c, Object o)</span><span class="comment">//统计元素出现次数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List list, List target)</span><span class="comment">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replaceAll</span><span class="params">(List list, Object oldVal, Object newVal)</span>, 用新元素替换旧元素</span></span><br></pre></td></tr></table></figure><h3 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h3><p>Collections提供了多个<code>synchronizedXxx()</code>方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p><p>我们知道 HashSet，TreeSet，ArrayList,LinkedList,HashMap,TreeMap 都是线程不安全的。Collections提供了多个静态方法可以把他们包装成线程同步的集合。</p><p><strong>Collections还可以设置不可变集合，提供了如下三类方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emptyXxx(): 返回一个空的、不可变的集合对象，此处的集合既可以是List，也可以是Set，还可以是Map。</span><br><span class="line">singletonXxx(): 返回一个只包含指定对象（只有一个或一个元素）的不可变的集合对象，此处的集合可以是：List，Set，Map。</span><br><span class="line">unmodifiableXxx(): 返回指定集合对象的不可变视图，此处的集合可以是：List，Set，Map。</span><br><span class="line">上面三类方法的参数是原有的集合对象，返回值是该集合的”只读“版本。</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>常见操作</p><ol><li>排序 : <code>sort()</code></li><li>查找 : <code>binarySearch()</code></li><li>比较: <code>equals()</code></li><li>填充 : <code>fill()</code></li><li>转列表: <code>asList()</code></li><li>转字符串 : <code>toString()</code></li><li>复制: <code>copyOf()</code></li></ol><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *************排序 sort****************</span></span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// sort(int[] a)方法按照数字顺序排列指定的数组。</span></span><br><span class="line">Arrays.sort(a);</span><br><span class="line">System.out.println(<span class="string">"Arrays.sort(a):"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort(int[] a,int fromIndex,int toIndex)按升序排列数组的指定范围</span></span><br><span class="line"><span class="keyword">int</span> b[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line">Arrays.sort(b, <span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.sort(b, 2, 6):"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// parallelSort(int[] a) 按照数字顺序排列指定的数组(并行的)。同sort方法一样也有按范围的排序</span></span><br><span class="line">Arrays.parallelSort(c);</span><br><span class="line">System.out.println(<span class="string">"Arrays.parallelSort(c)："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : c) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// parallelSort给字符数组排序，sort也可以</span></span><br><span class="line"><span class="keyword">char</span> d[] = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line">Arrays.parallelSort(d);</span><br><span class="line">System.out.println(<span class="string">"Arrays.parallelSort(d)："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> d2 : d) &#123;</span><br><span class="line">System.out.print(d2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>binarySearch</strong>()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// *************查找 binarySearch()****************</span><br><span class="line">char[] e = &#123; &apos;a&apos;, &apos;f&apos;, &apos;b&apos;, &apos;c&apos;, &apos;e&apos;, &apos;A&apos;, &apos;C&apos;, &apos;B&apos; &#125;;</span><br><span class="line">// 排序后再进行二分查找，否则找不到</span><br><span class="line">Arrays.sort(e);</span><br><span class="line">System.out.println(&quot;Arrays.sort(e)&quot; + Arrays.toString(e));</span><br><span class="line">System.out.println(&quot;Arrays.binarySearch(e, &apos;c&apos;)：&quot;);</span><br><span class="line">int s = Arrays.binarySearch(e, &apos;c&apos;);</span><br><span class="line">System.out.println(&quot;字符c在数组的位置：&quot; + s);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/18/hello-world/"/>
      <url>/2019/07/18/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><p><img src="/2019/07/18/hello-world/9252150_142515375000_2.jpg" alt="img"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
